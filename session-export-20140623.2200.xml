<schedule created="2014-06-24T01:09:18.459833"><day date="2014-07-21"><entry id="1"><category></category><audience></audience><topics></topics><start>0930</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Breakfast</title><description></description><speakers></speakers></entry><entry id="37"><category></category><audience></audience><topics></topics><start>1030</start><duration>30</duration><room id="1">C01</room><title>Welcome</title><description></description><speakers></speakers></entry><entry id="118"><category>Keynote</category><audience>Novice</audience><topics></topics><start>1100</start><duration>45</duration><room id="1">C01</room><title>One year of Snowden, what's next?</title><abstract>Since June 2013, disclosed by Edward Snowden, we learn more and more facts about American and British spies&#8217; deep appetite for information, economic spying and the methods they use to collect data. They systematically tapped international communications on a scale that only few people could imagine. But what are the consequences for societies when they now know about the NSA metadata repository capable of taking in billions of "events" daily to collected and analyze? Is there a way to defend against an agency with a monstrous secret budget?</abstract><description>Since June 2013, disclosed by Edward Snowden, we learn more and more facts about American and British spies&#8217; deep appetite for information, economic spying and the methods they use to collect data. They systematically tapped international communications on a scale that only few people could imagine. But what are the consequences for societies when they now know about the NSA metadata repository capable of taking in billions of "events" daily to collected and analyze? Is there a way to defend against an agency with a monstrous secret budget?</description><speakers><speaker id="1332"><name>Constanze Kurz</name><profile>https://ep2014.europython.eu/en/accounts/profile/1332/</profile><description>Constanze Kurz works at the University of Applied Sciences in Berlin as a computer scientist. She is the spokeswoman of the German Chaos Computer Club, Europe&#8217;s largest hacker group. She is an expert on surveillance techniques and co-author of technical analyses on voting computers, data retention and anti-terror laws for the German Constitutional Court.</description><image>https://ep2014.europython.eu/site_media/avatars/xWbxpPTjVcg.jpg</image></speaker></speakers></entry><entry id="11"><category></category><audience></audience><topics></topics><start>1200</start><duration>30</duration><room id="1">C01</room><title>pymove3D Winner Announcement</title><description>The pymove3D competition was running until May 1st, 2014 (http://pymove3d.pysv.org). In this session, the winners will be announced.</description><speakers></speakers></entry><entry id="6"><category></category><audience></audience><topics></topics><start>1230</start><duration>90</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Lunch</title><description></description><speakers></speakers></entry><entry id="121"><category>Keynote</category><audience>Novice</audience><topics></topics><start>1400</start><duration>45</duration><room id="1">C01</room><title>What can python learn from Haskell?</title><abstract>What can we learn from Erlang or Haskell for building reliable high&#13;
concurrency services? Bob was involved in many Python projects but&#13;
argues that for some domains there may be better methods found&#13;
elsewhere. He started looking for alternatives back in 2006 when&#13;
building high concurrency services at Mochi Media (originally with&#13;
Twisted), which led him to the land of Erlang and later Haskell. Bob is&#13;
going to talk about what he learned along the way. In particular, he&#8217;ll&#13;
cover some techniques that are used in functional programming languages&#13;
and how they can be used to solve problems in more performant, robust&#13;
and/or concise ways than the standard practices in Python. He is also&#13;
going to discuss some potential ways that the Python language and its&#13;
library ecosystem could evolve accordingly.</abstract><description>What can we learn from Erlang or Haskell for building reliable high&#13;
concurrency services? Bob was involved in many Python projects but&#13;
argues that for some domains there may be better methods found&#13;
elsewhere. He started looking for alternatives back in 2006 when&#13;
building high concurrency services at Mochi Media (originally with&#13;
Twisted), which led him to the land of Erlang and later Haskell. Bob is&#13;
going to talk about what he learned along the way. In particular, he&#8217;ll&#13;
cover some techniques that are used in functional programming languages&#13;
and how they can be used to solve problems in more performant, robust&#13;
and/or concise ways than the standard practices in Python. He is also&#13;
going to discuss some potential ways that the Python language and its&#13;
library ecosystem could evolve accordingly.</description><speakers><speaker id="1331"><name>Bob Ippolito</name><profile>https://ep2014.europython.eu/en/accounts/profile/1331/</profile><description>Bob Ippolito is an entrepreneur and polyglot open source developer from San Francisco, CA. His open source contributions include the json library for Python, the MochiKit framework for Javascript, and the mochiweb web server for Erlang. He&#8217;s founder and former CTO of Mochi Media, Inc. and currently dedicates his time to advising startups and working with non-profits such as Mission Bit and The College Initiative as a volunteer educator.</description><image>https://ep2014.europython.eu/site_media/avatars/bob_ippolito.jpg</image></speaker></speakers></entry><entry id="46"><category>Training</category><audience>Novice</audience><topics></topics><start>1400</start><duration>180</duration><room id="6">A03/A04</room><title>An intro to Blender modeling and scripting </title><abstract>Blender&#8217;s basics  *120 minutes*&#13;
-----------------&#13;
3D modeling tools, materials and textures, lighting and camera management. &#13;
&#13;
Going deeper *60 minutes*&#13;
---------------&#13;
Physics simulation! Smoke, fluids, particles, rigid and soft bodies will all be under your control.</abstract><description>This training introduces you to the marvelous world of Blender, the popular opensource 3d computer graphics software. The goal is to create step by step some stunning 3d art by the end of the training giving you the knowledge to start having fun with Blender and python.</description><speakers><speaker id="110"><name>Federico Frenguelli</name><profile>https://ep2014.europython.eu/en/accounts/profile/110/</profile><description>None is better than Null</description><image>https://ep2014.europython.eu/site_media/avatars/gravatar_1.jpeg</image></speaker></speakers></entry><entry id="93"><category>Training</category><audience>Advanced</audience><topics><topic>System Administration</topic></topics><start>1400</start><duration>180</duration><room id="7">A05/A06</room><title>Deploying and managing FreeBSD jails with mr.awsome, fabric and ansible</title><abstract>FreeBSD jails provide a light-weight but powerful and secure way to virtualise services. The combination of mr.awsome (provisioning), ansible (declarative configuration) and Fabric (imperative configuration and maintenance) allow you to manage them elegantly, combining the best of each approach.</abstract><description>FreeBSD jails provide a light-weight but powerful and secure way to virtualise services. However, the *BSD world has sort of stood on the side lines as the recent advances in systems deployment have developed. I.e. while vagrant, puppet, chef, ansible etc. have gained a great deal of acceptance in the Linux world, they often only consider BSD as an afterthought, which is a shame.&#13;
&#13;
Well, mr.awsome has changed this! With its declarative provisioning approach you simply define a jail host and its jails and mr.awsome will go about and make it so.&#13;
&#13;
Configuring a jail then simply becomes a matter of applying one or more ansible playbooks to it and maintenance operations such as performing updates, backups, managing services etc. that don't quite fit the declarative approach of ansible can then easily be applied using Fabric - all powered by a single, canonical configuration!&#13;
&#13;
By separating provisioning from declarative and imperative configuration each area becomes much more concise and clean.&#13;
&#13;
Having great Python tools for each of these areas allows mr.awsome to tie them together on API level to provide a seemless, powerful solution that becomes greater than the sum of its parts.&#13;
&#13;
</description><speakers><speaker id="387"><name>Tom Lazar</name><profile>https://ep2014.europython.eu/en/accounts/profile/387/</profile><description></description><image></image></speaker></speakers></entry><entry id="12"><category></category><audience></audience><topics></topics><start>1445</start><duration>45</duration><room id="1">C01</room><title>Lightning Talks</title><description>A lightning talk is a short talk, typically only five minutes in duration, providing an opportunity for participants - particularly people not featured in the main programme - to deliver a presentation on a subject of their choosing. Speakers need to sign up before the session on the conference website.</description><speakers></speakers></entry><entry id="13"><category></category><audience></audience><topics></topics><start>1530</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Coffee Break</title><description></description><speakers></speakers></entry><entry id="67"><category></category><audience></audience><topics></topics><start>1600</start><duration>60</duration><room id="1">C01</room><title>Recruiting Session</title><description></description><speakers></speakers></entry><entry id="62"><category></category><audience></audience><topics></topics><start>1700</start><duration>120</duration><room>B05/B06, B07/B08, B09</room><title>Poster and Recruiting Session</title><description></description><speakers></speakers></entry><entry id="64"><category></category><audience></audience><topics></topics><start>1900</start><duration>180</duration><room>ALL</room><title>Sponsored Event: RhodeCode</title><description>## RESERVE YOUR PLACE AT THE RHODECODE HIRING EVENT&#13;
&#13;
Reserve your place and join us at the RhodeCode recruitment evening on Monday July 21, from 19:00 - 22:00. The reception will be held at the same conference centre as [EuroPython 2014](https://ep2014.europython.eu/en/), once the opening day sessions come to a close.  You will have the chance to sit down with us and get to know us better. We want to discuss our goals, your passion for development, and the opportunities that we currently have to join the team.&#13;
&#13;
![EuroPython 2014 logo](https://media.ep14.org/site_media/sponsor_logos/hb-300.png)&#13;
&#13;
We need the best talent to join us as we expand the functionality of our core product, [RhodeCode Enterprise](https://rhodecode.com/features). This will give you the chance to put your stamp on the future direction of how RhodeCode Enterprise will better the lives of millions of developers daily.  &#13;
&#13;
We will be providing a fully catered meal with a wide variety of food, to be sampled with some of that famous German beer. In addition to discussing the future of RhodeCode you will get to meet us in person. As a company we aim to create an ethos of openness and empowerment. Everyone who joins us will be responsible for their own work, have their voice heard, and opinions valued when it comes to deciding our future direction.  &#13;
&#13;
**Reserve your place by sending a tweet [@rhodecode](https://twitter.com/rhodecode) or email [jobs@rhodecode.com](mailto:jobs@rhodecode.com).** &#13;
We look forward to meeting you.  </description><speakers></speakers></entry></day><day date="2014-07-22"><entry id="120"><category>Keynote</category><audience>Novice</audience><topics></topics><start>0900</start><duration>45</duration><room id="1">C01</room><title>Will I still be able to get a job in 2024 if I don't do TDD?</title><abstract>Geoffrey Moores's book "Crossing the chasm" outlines the difficulties&#13;
faced by a new, disruptive technology, when adoption moves from&#13;
innovators and visionaries into the mainstream. Test Driven Development&#13;
is clearly a disruptive technology, that changes the way you approach&#13;
software design and testing. It hasn't yet been embraced by everyone,&#13;
but is it just a matter of time? Ten years from now, will a non-TDD&#13;
practicing developer experience the horror of being labelled a&#13;
technology adoption 'laggard', and be left working exclusively on&#13;
dreadfully boring legacy systems?&#13;
&#13;
It could be a smart move to get down to your nearest Coding Dojo and&#13;
practice TDD on some Code Katas. On the other hand, the thing with&#13;
disruptive technologies is that even they can become disrupted when&#13;
something better comes along. What about Property-Based Testing?&#13;
Approval Testing? Outside-In Development?&#13;
&#13;
In this talk, I'd like to look at the chasm-crossing potential of TDD&#13;
and some related technologies. My aim is that both you and I will still&#13;
be able to get a good job in 2024.&#13;
</abstract><description>Geoffrey Moores's book "Crossing the chasm" outlines the difficulties&#13;
faced by a new, disruptive technology, when adoption moves from&#13;
innovators and visionaries into the mainstream. Test Driven Development&#13;
is clearly a disruptive technology, that changes the way you approach&#13;
software design and testing. It hasn't yet been embraced by everyone,&#13;
but is it just a matter of time? Ten years from now, will a non-TDD&#13;
practicing developer experience the horror of being labelled a&#13;
technology adoption 'laggard', and be left working exclusively on&#13;
dreadfully boring legacy systems?&#13;
&#13;
It could be a smart move to get down to your nearest Coding Dojo and&#13;
practice TDD on some Code Katas. On the other hand, the thing with&#13;
disruptive technologies is that even they can become disrupted when&#13;
something better comes along. What about Property-Based Testing?&#13;
Approval Testing? Outside-In Development?&#13;
&#13;
In this talk, I'd like to look at the chasm-crossing potential of TDD&#13;
and some related technologies. My aim is that both you and I will still&#13;
be able to get a good job in 2024.&#13;
</description><speakers><speaker id="1330"><name>Emily Bache</name><profile>https://ep2014.europython.eu/en/accounts/profile/1330/</profile><description>Emily Bache is a software developer and test automation specialist. Currently an employee of a Swedish company, Pagero, she works on their electronic invoicing product. Together with her team, she regularly delivers working software. Emily has previously worked as a developer in organizations as diverse as small startup and large corporation, using&#13;
Python as well as other languages such as Java, Scala and Ruby. For several years she worked as an independent consultant, facilitating many Coding Dojos and developer training events. Emily is a well-known conference speaker, and author of &#8220;The Coding Dojo Handbook&#8221;. She is originally from the U.K. but now lives in G&#246;teborg, Sweden.</description><image>https://ep2014.europython.eu/site_media/avatars/photo_1.jpg</image></speaker></speakers></entry><entry id="14"><category>Talk</category><audience>Novice</audience><topics><topic>Best Practices</topic></topics><start>1000</start><duration>30</duration><room id="1">C01</room><title>Marconi - OpenStack Queuing and Notification Service</title><abstract>Marconi is a multi-tenant cloud queuing system written in Python as part of the OpenStack project. &#13;
Marconi aims to ease the design of distributed systems and allow for asynchronous work distribution without creating yet another message broker.&#13;
This talk aims to give the audience a broad look at Marconi&#8217;s design and technologies used.&#13;
</abstract><description>Similar to other message bus frameworks, Marconi's main goals are: performance, availability, durability, fault-tolerance and scalability.&#13;
Besides providing support for queuing and notification services through OpenStack, Marconi aims to ease the design of distributed systems and allow for asynchronous work distribution without creating yet another message broker.&#13;
This talk aims to give the audience a broad look at Marconi&#8217;s architecture, design, technologies used, development process, and discuss the issues it adresses.</description><speakers><speaker id="855"><name>Yeela Kaplan</name><profile>https://ep2014.europython.eu/en/accounts/profile/855/</profile><description>Yeela is a software engineer at the cloud storage team in Red Hat.&#13;
Yeela has been contributing to the oVirt and OpenStack projects.</description><image></image></speaker></speakers></entry><entry id="55"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1000</start><duration>30</duration><room id="2">B05/B06</room><title>Amanda: A New Generation of Distributed Services Framework</title><abstract>Abstract&#13;
=======&#13;
&#13;
To help create award winning visual effects, MPC developed a distributed service-oriented platform, Amanda.&#13;
Amanda allows developers of any level to write a service that is presented to users across 8 facilities globally without them requiring any&#13;
knowledge of building large concurrent systems. It allows artists and developers across different domains to work with&#13;
clearly defined API's and gives the service developer control over what and how data can and should be accessed.&#13;
&#13;
The talk will cover how to set up such a platform from the ground up. Starting at the service level building it out with&#13;
additional modules and technologies until the fully distributed system, covering topics such as concurrency, componetisation and monitoring that allow the&#13;
fine tuning of setups depending on the type of work being undertaken and changing business needs.</abstract><description>Presentation outline&#13;
====================&#13;
&#13;
We'll start off with a quick overview of a movie production pipeline which will set the stage&#13;
for how Amanda provides artists with the tools they need to develop and streamline the production process&#13;
as well as Amanda's crucial function as a robust framework for the support and development teams.&#13;
Going over some stats, up to 250.000 service calls a minute during World War Z for example (for frame of reference this is&#13;
twice the average rate of stackoverflow.com), I'll highlight some of the problems encountered with the 1st generation.&#13;
Initially developed in 2007 and replaced last year it had several flaws in regards to scalability, maintainability and future proofing.&#13;
From there I'll introduce the 2nd generation which is build on the principle of componentisation and building blocks. Every part of the system&#13;
needs to be replaceable and this needs to be possible from the configuration.&#13;
&#13;
During the presentation we will be stepping through the different building blocks, how they have been set up, how they slot together&#13;
and how we monitor, trace and test the system from the ground up. Starting at the lowest level with services we'll slowly&#13;
step through the different blocks necessary to build a fault tolerant, distributed and scalable platform.&#13;
We made sure that the platform is not tied into any specific technology but allows the use of the best technologies&#13;
depending on the type of work being undertaken and changing business needs and technological advances.&#13;
&#13;
Service development and testing&#13;
-------------------------------&#13;
&#13;
Our development teams build applications for artists creating visual effects through to management teams coordinating productions.&#13;
A service-based architecture was chosen to provide consistent interfaces across the many different environments where this is required.&#13;
We provide an ecosystem where developers of any level can safely write a service (a set of instructions regarding a&#13;
specific topic) that are presented to developers and technical artists globally.&#13;
To write a service the developer doesn't need any knowledge in regards to building large concurrent systems.&#13;
The service is implemented through a simple Python API and the provided ecosystem allows services to exist in a standalone manner.&#13;
The service concept was separated from the platform hosting it. This allows hosting in any application that provides a&#13;
standard container (a service provider). Extracting this allowed for more rigorous and simple testing of services;&#13;
it also allows developers to provide fake versions of their services publicly against which client code can be tested.&#13;
The adage &#202;&#187;everything as a service&#202;&#188; was applied to the development of internal facilities.&#13;
This includes our management tools and the developer console, which presents the documentation of services and methods&#13;
available to developers through a web interface.&#13;
Infrastructure services were introduced to present an interface to facilities provided to a regular service, for example&#13;
databases, configuration and centralized logging.&#13;
Services can call other services and, similarly to infrastructures, services can be replaced with different services depending on the configuration.&#13;
Services are exposed to a service (or client as we will see later) via a service provider just like in applications.&#13;
Setting services up with the above patterns allows developers to iterate quickly and to include services within testing frameworks.&#13;
It has also provided a standardized form across projects allowing developers to support and add to unfamiliar code easily.&#13;
And last but not least it has given us full abstractions at all levels, users of services do not need to know the code underneath the hood&#13;
be it at a service level or at an infrastructure level.&#13;
&#13;
&#13;
Building the cluster&#13;
--------------------&#13;
&#13;
Rather than building a single system, the new architecture defines a set of building blocks for constructing a&#13;
distributed service platform. These can provide adapters for best of breed third party tools or, where necessary,&#13;
custom implementations of functionality. Configuration is used to determine the number and types of modules to use&#13;
and the parameters with which to initialize them. This allows the same platform to be used for small instances at&#13;
a developer&#202;&#188;s desk up to a production environment of many nodes. The design enables improved components to be&#13;
swapped into the existing system whilst forming the basis for an entirely new design.&#13;
&#13;
Most practical applications require the service provider to handle multiple requests at the same time.&#13;
Amanda provides a set of interchangeable concurrency modules. This allows the most appropriate Python model&#13;
for parallel processing to be chosen. For work involving heavy I/O work we choose approaches that avoid waiting&#13;
for the GIL, for example multiple processes and greenlets/coroutines, whilst for CPU bound work we can use threads&#13;
which may prove more performant.  Having the option to choose between mechanisms is important since there is not a&#13;
solution that neatly fits all use cases. A pluggable concurrency abstraction also allows integration of new libraries&#13;
as they become available. In future this might include the new asyncio (formerly Tulip) core library for Python 3.3+.&#13;
&#13;
To benefit from concurrency, resource pooling, caching etc. we don't always want to execute the service locally to the service provider.&#13;
Service proxies implement this behavior; they take the service, method and arguments of a request as their input&#13;
and return the result. The proxy should be transparent to the service and service provider components. By chaining&#13;
proxies, complex routing schemes can be built or analysis performed on the results returned. Some similarity can be&#13;
drawn with middle-ware in the Web Services Gateway Interface (WSGI) specification.&#13;
Communication between proxy and service provider is served by the transport. This abstraction provides an&#13;
asynchronous interface to underlying technologies &#226;&#8364;&#8220; Current implementations include queue based AMQP, ontop of&#13;
RabbitMQ, and &#195;&#732;MQ and more na&#195;&#175;ve communications with standard UDP and TCP sockets. Most transports define both client&#13;
and server parts of the system &#226;&#8364;&#8220; however some, particularly HTTP-based transports, are designed to accept requests directly from external clients.&#13;
Requests from external applications commonly use XMLRPC, JSONRPC or straight JSON. Transport implementations can be&#13;
interchanged without impacting other components of Amanda or service developers.&#13;
&#13;
In production, a request gateway implemented as a WSGI application fronts the HTTP protocols. Using the standard&#13;
web components NGINX and &#206;&#188;WSGI we can build a very scalable front end which internally uses the service provider, proxy, transport&#13;
pattern to offload the requests to a backend. The gateway can also provide standard web facilities such as template rendering&#13;
(through the Jinja2 library1) for general web clients. The gateway was a requirement as requests originate from applications&#13;
written in many languages including C++, Python, JavaScript and domain specific languages such as mel. For us it was&#13;
important that the client used across all those languages was a proven standard and lightweight. Most requests are served&#13;
in near realtime (6ms round trip times) and are presented to the client in a synchronous way so using a frontend that supports a large number&#13;
of HTTP like protocols allowed us to keep the clients simple and present the platform to an extremely wide variety of&#13;
languages. Additionally, through the frontend, we can render a web page and present that directly if the requests was made&#13;
from a browser.&#13;
&#13;
The final behavior of the platform is defined in configuration. This allows the platform to be tuned to suit&#13;
the work that a particular service is performing (I/O vs CPU bound). It is important to remember that every single&#13;
component mentioned above be it the concurrency, transport, proxies or frontend can be changed, removed, updated without&#13;
it impacting the service, the developer or any of the other components that make up the platform.&#13;
&#13;
Also important to mention that internally and externally everything is a queue and presented as a queue. Going from the client&#13;
to the frontend there is a queue, from the frontend onto the backend there is a queue etc. all the way down to a request&#13;
being read of the transport and stored inside a queue until a concurrency object is ready to handle the request with the&#13;
service provider.&#13;
&#13;
This is where we think our platform might take a different approach. Rather than building the platform on top of a single&#13;
great technology we didn't want to limit ourselves and be able to use all the other great technologies out there.&#13;
There is no perfect solution for all problems but allowing to fine tune the platform according to different problems.&#13;
The setup can now evolve in line with technological advancements and changes to the industry.&#13;
&#13;
&#13;
Maintenance and Monitoring (5 mins)&#13;
-----------------------------------&#13;
&#13;
We will walk through how we are using the same setup with services, service providers, proxies and transports to manage&#13;
clusters around the globe. Once again for our maintenance and monitoring we made sure everything is done as a service so&#13;
that if there is a better tool in the future we could adopt it.&#13;
&#13;
Through leveraging the configuration management and remote execute platform Salt, a new cluster can now be provisioned quickly.&#13;
Management is itself provided as a service. Through this system, the current state is available and configuration changed across&#13;
all servers globally. This has reduced routine maintenance tasks from a half day to a five-minute task, with less&#13;
chance of human error. Monitoring and introspection are provided, as a service, to aid in day-to-day support, tuning and to help&#13;
support analysis for future development.&#13;
&#13;
Developers of services can trace requests from when they enter the system, producing a report of the sequence of&#13;
methods being called, with the supplied arguments. For each call the time spent to fulfill each request is presented.&#13;
Care was taken to minimize the impact of this on return result of the request. Due to everything being a queue we&#13;
can collect the metrics after the result has been put back onto the transport and send to the user and thus minimize the impact&#13;
of this collection on returning the result of the request&#13;
This means that there is no requirement to put the system into a debug mode in order to obtain execution metrics.&#13;
&#13;
With logging being a service we can dynamically change the logging configuration on a per service basis by making a&#13;
request to the logging service taking away the need of changing configuration and restarting the service which&#13;
often means a problem might have disappeared due to the reset.&#13;
&#13;
Future/Conclusion (1 min)&#13;
-------------------------&#13;
&#13;
Whilst developing the new generation of the platform there have been a number of possible applications that have&#13;
emerged. The way in which we are able to scale the system would be suitable to run in a cloud environment &#226;&#8364;&#8220;&#13;
 especially with the improvements to management allowing new nodes to be provisioned quickly. The ease of writing&#13;
and integrating new components would allow integration with infrastructure provided by third-party cloud vendors.&#13;
Other areas of interest include a smaller version of the platform running locally on a user&#202;&#188;s workstation and&#13;
services for management of generic processes.&#13;
&#13;
Main technologies and libraries currently used:&#13;
------------------------------------------&#13;
&#13;
* Threading&#13;
* Gevent&#13;
* Eventlet&#13;
* Multiprocessing&#13;
* ZeroMQ&#13;
* RabbitMQ&#13;
* uwsgi&#13;
* Flask&#13;
* Salt&#13;
* nginx&#13;
</description><speakers><speaker id="373"><name>Jozef van Eenbergen</name><profile>https://ep2014.europython.eu/en/accounts/profile/373/</profile><description>Jozef has been working with Python since 2009 and programming with different languages since 2005. He is currently part of the Infrastructure team at MPC where he has been responsible for Amanda, MPC's distributed service framework which is used as the backbone of their international Visual Effects pipeline.&#13;
&#13;
Jozef enjoys trying out new tools and technologies and tries to stay on top of new developments as much possible.&#13;
&#13;
In his spare time he likes to travel, watch a good movie, play the drums or work on CG/art projects as that is  what got him into the Visual Effects industry.&#13;
&#13;
He is currently based in London and lived in The Netherlands, France and Canada before that.</description><image>https://ep2014.europython.eu/site_media/avatars/oscar.jpg</image></speaker></speakers></entry><entry id="49"><category>Talk</category><audience>Novice</audience><topics><topic>Best Practices</topic></topics><start>1000</start><duration>30</duration><room id="3">B07/B08</room><title>Cutting-edge APIs using hypermedia at BSkyB</title><abstract>In this talk I will explain what hypermedia enabled API means, I will give an example of such an API and I will take you through the implementation details and the usage of flask, dougrain and HAL in this context.&#13;
 &#13;
Also, I will present a brief comparison with an API that is not hypermedia enabled and take you through the advantages of using the first approach.</abstract><description>In the technology community at the moment there is a lot of talk about hypermedia enabled APIs and Web as an Architecture model.&#13;
 &#13;
 More and more applications nowadays try to adopt the loosely coupled and distributed web like architecture by using hypermedia as an engine of the application state.&#13;
 &#13;
In Sky we are successfully implementing this approach for some of our components, and we&#8217;ve learnt that the major benefit for us is the scalability that it offers: as an increasingly expanding business with a constantly growing product portfolio, scalability of all our systems is crucial.&#13;
 &#13;
In this talk I will share some of the things we learnt, I will explain what hypermedia enabled API means, I will give an example of such an API and I will take you through the implementation details and the usage of flask, dougrain and HAL in this context.&#13;
 &#13;
Also, I will present a brief comparison with an API that is not hypermedia enabled and take you through the advantages of using the first approach.</description><speakers><speaker id="224"><name>Adriana Vasiu</name><profile>https://ep2014.europython.eu/en/accounts/profile/224/</profile><description>Adriana currently works as a Senior Software Developer at BskyB in London, where she has worked for over 2 years.  She is agnostic in terms of languages, although her favourite one at the moment is Python.&#13;
&#13;
She works in an agile team which develops features across an entire sales platform and she has learnt a lot from the very skilled and talented people that she has worked with at BSkyB.&#13;
&#13;
Having in total more than 6 years experience, she always concentrates on continuous improvement of the software that she builds, always adapting to the market, learning new things and improving her knowledge.&#13;
&#13;
Adriana sees Europython as an opportunity to share her enthusiasm and motivation towards building software applications in Python, and to expand her knowledge in the language.</description><image>https://ep2014.europython.eu/site_media/avatars/photo-1.JPG</image></speaker></speakers></entry><entry id="94"><category>Talk</category><audience>Advanced</audience><topics><topic>Gaming</topic></topics><start>1000</start><duration>30</duration><room id="5">A08</room><title>Mobile Games to the Cloud With Python</title><abstract>When a mobile game development company decides to switch to a more cloud based development it is faced with obstacles different from those it&#8217;s used to on mobile devices. This talk explains how Python provided us with most of the infrastructure for this task and how a Python game backend was built as a result.</abstract><description>#### The Talk&#13;
&#13;
This talk has two goals. Showing the audience the lessons we learned during a project which moved a simple mobile game to a server backend is our first intention. In addition to that we want to describe how such a system works in a real life example, to show which problems and which requirements arise in its creation. When the audience leaves the talk they will know how a real-life mobile game uses Python for powering the backend servers.&#13;
&#13;
 &#13;
#### The Problem&#13;
&#13;
Most of the game development for mobile devices is focused on running the game on the device. The game designers and game developers play a primary role in creating the product. The server backend plays a supporting role providing a multiplayer or social experience to the users. Indeed, at Nanobit Ltd., things were also done that way. We had a small Python infrastructure built around Django which provided a small portion of multiplayer experience for the players. The majority of development was still focused on playing the game on the device. That way of thinking was put to test when we decided to center our future games around the multiplayer experience. Due to the fact that our infrastructure at the time was not enough for what we had in mind, we had to start from scratch. The decision was made to use Python as the center of our new infrastructure.&#13;
&#13;
In order to achieve it, a server backend was needed that would allow the game to be played &#8220;in the cloud&#8221; with the device only being a terminal to the player. Most of the game logic would have to be processed in the cloud which meant that each player required a constant connection to the backend and with over 100.000 players in our previous games that presented a challenge. How to build an infrastructure which can support that? Since every user action had to be sent to the backend how to process thousands of them quick enough? Those problems were big and were just the start.&#13;
&#13;
&#13;
#### The Solution&#13;
&#13;
The design of the backend lasted for a couple of months and produced a scalable infrastructure based on &#8220;workers&#8221; developed in Python, &#8220;web servers&#8221; that use Tornado and a custom message queue which connected the two. The storage part is a combination of Riak and Redis. Since the backend is scalable new workers and new web servers had to be deployed easily so an orchestration module was build using Fabric. The scalability and launching of new workers and web servers was achieved using Docker for creation and deployment of containers. Each container presents one module of the system (worker, web server, queue). The end result can now support all of our future games and only requires the game logic of each game to be added to the workers.&#13;
&#13;
&#13;
#### The Technologies&#13;
&#13;
* Python for coding the game logic, web servers. More than 90% of the system was written in Python.&#13;
* Fabric&#13;
* SQLAlchemy&#13;
* Riak&#13;
* Redis&#13;
* ZeroMQ&#13;
* nginx&#13;
* Docker&#13;
* Websockets&#13;
* AWS&#13;
&#13;
&#13;
#### The Lessons Learned&#13;
&#13;
* How to tune the backend to handle the increasing number of active players.&#13;
* How to tackle the problem of frequent connection dropping and reachability issues of poor mobile device Internet connection in Tornado with a little help of Redis.&#13;
* How to prevent users from trying to outsmart the system by denying illegal moves.&#13;
* How to enable game profile syncing and live updating.&#13;
* Improving the performance of workers by prioritizing data being stored to databases (Riak, SQL).&#13;
* New issues and lessons show up all the time so there will definitely be more of them by the time of the conference.&#13;
&#13;
&#13;
#### Basic Outline&#13;
&#13;
1. Intro (5 min)&#13;
    1. Who are we?&#13;
    2. How was Python used in our previous games&#13;
    3. Why we decided to change it all&#13;
2. Requirements (6 min)&#13;
    1. What was the goal of creating the game backend&#13;
    2. Why was Python our first choice&#13;
3. Python backend (14 min)&#13;
    1. The architecture of the backend&#13;
    2. Which technologies did we use and how were they connected together&#13;
    3. How the backend handles the game logic&#13;
    4. Lessons learned&#13;
4. Questions &amp; Answers (5 min)</description><speakers><speaker id="1103"><name>Mislav Stipeti&#263;</name><profile>https://ep2014.europython.eu/en/accounts/profile/1103/</profile><description>Backend developer at Nanobit Ltd who likes to play with new technologies. Long time Python user who used it for everything, from servers to state machines.&#13;
&#13;
His favourite new technologies include Redis, Riak and the go programming language. He often wonders how people got anything done before Redis.</description><image>https://ep2014.europython.eu/site_media/avatars/europy_slika_2.jpg</image></speaker><speaker id="246"><name>Darko Roni&#263;</name><profile>https://ep2014.europython.eu/en/accounts/profile/246/</profile><description>Darko works as a Team Leader and Senior Server Developer at Nanobit Ltd, a mobile game development company, where he's using Python on a daily basis along with various technologies such as Amazon AWS, Redis, Riak, GoLang, Tornado, various (No)SQL databases etc. He is still doing some game development when needed but is primary focused on the server side of things.&#13;
&#13;
He's been using Python ever since the company decided they needed a server backend and hasn't looked back.</description><image>https://ep2014.europython.eu/site_media/avatars/P5065293.JPG</image></speaker></speakers></entry><entry id="123"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1000</start><duration>30</duration><room id="4">B09</room><title>The Magic of Attribute Access</title><abstract>Have you ever wondered how the "self" argument appears when you call a method? Did you know there is a general mechanism behind it? Come learn all about attributes and descriptors.</abstract><description>The first part of this talk will describe what exactly happens when you&#13;
read or write an attribute in Python.&#13;
&#13;
While this behavior is, of course, explained in the Python docs,&#13;
more precisely in the [Data model][1] section and [related][2] [writeups][3],&#13;
the documentation gives one a "bag of tools" and leaves combining them&#13;
to the reader.&#13;
&#13;
This talk, on the other hand, will present one chunk of functionality,&#13;
the attribute lookup, and show how its mechanisms and customization&#13;
options work together to provide the flexibility (and gotchas) Python provides.&#13;
The topics covered will be:&#13;
&#13;
* method resolution order, with a nod to the C3 algorithm&#13;
* instance-, class-, and metaclass-level variables&#13;
* `__dict__` and `__slots__`&#13;
* data/non-data descriptors&#13;
* special methods (`__getattr__`, `__getattribute__`, `__setattr__`, `__dir__`)&#13;
&#13;
&#13;
In the second part of the talk, I will show how to use the customization&#13;
primitives explained before on several interesting and/or useful examples:&#13;
&#13;
* A proxy object using `__getattr__`&#13;
* Generic desciptor - an ORM column sketch&#13;
* the rudimentary `@property`, method, `staticmethod` reimplemented in&#13;
  pure Python (explained [here][2] and elsewhere), which lead to&#13;
* SQLAlchemy's [`@hybrid_proprerty`][4]&#13;
* Pyramid's deceptively simple memoizing decorator, [`@reify`][5]&#13;
* An ["Unpacked" tuple properties][6] example to drive home the idea that&#13;
  descriptors can do more than provide attribute access&#13;
  (and mention weak dicts as a way to non-intrusively store data on an object)&#13;
&#13;
&#13;
(These are subject to change as I compose the talk. Also some examples may&#13;
end up interleaved with the theory.)&#13;
&#13;
Hopefully I'll have time to conclude with a remark about how Python manages to be&#13;
a "simple language" despite having these relatively complex mechanisms.&#13;
&#13;
&#13;
[1]: http://docs.python.org/3/reference/datamodel.html&#13;
[2]: http://docs.python.org/3/howto/descriptor.html&#13;
[3]: https://www.python.org/download/releases/2.3/mro/&#13;
[4]: http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/hybrid.html&#13;
[5]: http://docs.pylonsproject.org/projects/pyramid/en/latest/api/decorator.html&#13;
[6]: https://gist.github.com/encukou/9789993</description><speakers><speaker id="606"><name>Petr Viktorin</name><profile>https://ep2014.europython.eu/en/accounts/profile/606/</profile><description>I'm a Python geek, Pyvo meetup organizer, and mentor of PyLadies Brno. I work on the FreeIPA project at Red Hat.</description><image></image></speaker></speakers></entry><entry id="73"><category>Training</category><audience>Novice</audience><topics></topics><start>1000</start><duration>180</duration><room id="6">A03/A04</room><title>Effective data visualisation in 2D with matplotlib</title><abstract>The tutorial will introduce the basic theory of data visualisation and put it to use through [matplotlib](http://matplotlib.org), the popular Python library for creating 2D static and interactive visualisations. To unleash the full power of matplotlib, we will reach under the hood and discover some hidden gems in terms of customisation and working with visual primitives. The participants will be invited to practice their visualisations skills trough a series of examples. They will learn how to build complex data visualisations from ground up and spice them with a bit of interactivity. </abstract><description>In our private and professional lives we generate and process large volumes of data, from which we need to extract meaningful patterns and present them data graphically either on paper or web. The goal of the workshop is to arm you with practice-oriented tips that will help you to avoid visual clutter and increase the data density of your graphs.</description><speakers><speaker id="710"><name>Bartosz Telenczuk</name><profile>https://ep2014.europython.eu/en/accounts/profile/710/</profile><description>Bartosz Telenczuk has a PhD in biophysics. He has been active Python user since 2005. He is creator of [svgutils](https://github.com/btel/svg_utils) and he  has contributed to many open source Python libraries including numpy and matplotlib.  He is also a Python advocate and an instructor at [advanced Python schools for scientists](https://python.g-node.org/python-summerschool-2013/). Currently he is a researcher in France, developing methods to interpret the electrical activity of the brain.</description><image></image></speaker></speakers></entry><entry id="76"><category>Training</category><audience>Advanced</audience><topics></topics><start>1000</start><duration>180</duration><room id="7">A05/A06</room><title>Making your first contribution to OpenStack</title><abstract>We will be going through the process of how to make a contribution to OpenStack starting from a DevStack install. Contributions can be either code or documentation. By the end of the session, participants should have all the necessary accounts and tools set up for contributing, know how to submit a contribution to an OpenStack project,  understand the OpenStack contribution process and have a first contribution completed or underway, as well as know what are the next steps.&#13;
Participants should already be familiar with git, comfortable with Python as well as have a SSH key pair and virtual machine set up with Devstack prepared ahead of the session. You can find instructions on how to do this in the longer description of the session.</abstract><description>Taking people from a DevStack install to a first contribution.&#13;
&#13;
Objectives&#13;
----------&#13;
By the end of the session, participants will:&#13;
&#13;
 * have all the necessary accounts and tools set up for contributing&#13;
 * know how to submit a contribution to an OpenStack component&#13;
 * understand the OpenStack contribution process&#13;
 * have a first contribution completed or underway, and know what are the next steps&#13;
&#13;
The process for making both code and documentation contributions is the same in OpenStack. For this session, participants will be encouraged to choose a task of either type.&#13;
&#13;
Pre-requisites:&#13;
---------------&#13;
Participants should have:&#13;
&#13;
 * A basic knowledge of git (cloning a repository, committing)&#13;
 * A SSH key pair (instructions on how to create one can be found online, for instance [https://unfuddle.com/support/docs/topics/ssh_keypair](https://unfuddle.com/support/docs/topics/ssh_keypair))&#13;
 * A Virtual Machine (VM) with DevStack installed (see below for details)&#13;
 * Be comfortable with Python&#13;
&#13;
Some familiarity with cloud concepts may be helpful.&#13;
&#13;
Contributing to OpenStack currently requires signing a Contributor Licence Agreement (CLA). If your employment contract has a restrictive IP clause, you may want to check first with your company lawyers whether you can sign it. See [https://review.openstack.org/static/cla.html](https://review.openstack.org/static/cla.html) for the text of the licence.&#13;
&#13;
Participants are expected to install DevStack in a Virtual Machine (doing it in a VM is important as DevStack cannot be uninstalled) prior to the training to save time and to avoid overloading the Internet connection on the day.&#13;
&#13;
There are many virtualisation software packages that let you create VMs, for example *virt-manager* (Linux), *Vagrant* (Linux, Windows, Mac Os X) or *Virtual Box* (Linux, Windows, Mac OS X). You should install Fedora 20 or Ubuntu 12.04 in the virtual machine.&#13;
The installation instructions for DevStack are available at [http://devstack.org](http://devstack.org) : within the VM, clone the repository then run `./stack.sh`.&#13;
&#13;
If you have a problem installing DevStack we can try and solve it during the day - doing one run-through of `stack.sh` will at least ensure all the packages and software have been downloaded (save the VM!).&#13;
&#13;
Expected Structure:&#13;
--------------------&#13;
**30 minutes - Introduction**&#13;
&#13;
  Introduction to OpenStack and to the session goals&#13;
&#13;
  Environment check, start devstack&#13;
&#13;
**30 minutes - Setting up**&#13;
&#13;
  Creating accounts:&#13;
&#13;
  - Launchpad (used for bug tracking)&#13;
  - The Foundation&#13;
  - Gerrit + CLA (it uses the launchpad account, explanation of how gerrit is used, review team vs committer team)&#13;
  - Key pair&#13;
&#13;
  Devstack tips&#13;
&#13;
**30 minutes - Getting started**&#13;
&#13;
  How to choose a bug, bug trackers, low hanging fruits&#13;
&#13;
  Reminder of the different OpenStack projects mentioned in the introduction, as well as the documentation and integration tests&#13;
&#13;
  Each participant should pick a project and download the code for that project&#13;
&#13;
  Ways to find an easy bug:&#13;
&#13;
  - low-hanging-fruit&#13;
  - general bug tracker browsing&#13;
  - adding a unit test&#13;
  - developer docs also live in the project's repository (typos, clarifications, etc)&#13;
&#13;
**10 minutes - Break**&#13;
&#13;
**45 minutes - Find &amp; work on a bug**&#13;
&#13;
  Participants work on a small task.&#13;
&#13;
  There'll be a few tasks ready for people who struggle to find something (missing tests, mostly) but it's unlikely there will be one ready in advance for everyone. Participants will be strongly encouraged to find a task of their own based on their interests and the advice shared prior to the break.&#13;
&#13;
**35 minutes - Submitting the patch**&#13;
&#13;
  Gerrit for review&#13;
&#13;
  The git-review tool&#13;
&#13;
   * setting up git-review&#13;
   * submitting the patch&#13;
   * how it can be used for reviewing&#13;
&#13;
  The next steps (for your patch, and the community)&#13;
&#13;
Abstract:&#13;
---------</description><speakers><speaker id="377"><name>Julie Pichon</name><profile>https://ep2014.europython.eu/en/accounts/profile/377/</profile><description>Julie is a software engineer at Red Hat and works on Horizon, the web dashboard for OpenStack. A big open-source supporter, she likes to get involved in projects aiming to help newcomers get started contributing to open-source. </description><image>https://ep2014.europython.eu/site_media/avatars/julie_pichon.JPG</image></speaker></speakers></entry><entry id="2"><category></category><audience></audience><topics></topics><start>1030</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Breakfast</title><description></description><speakers></speakers></entry><entry id="69"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1100</start><duration>45</duration><room id="2">B05/B06</room><title>Extending Python, what is the best option for me?</title><abstract>Python is a great language, but there are occasions where we need access to low level operations or connect with some database driver written in C. With the FFI(Foreign function interface) we can connect Python with other languages like C, C++ and even the new Rust. There are some alternatives to achieve this goal, Native Extensions, Ctypes and CFFI.  I'll compare this three ways of extending Python.</abstract><description>In this talk we will explore all the alternatives in cpython ecosystem to load external libraries. In first place we'll study the principles and how shared libraries work. After that we will look into the internals of CPython to understand how extensions work and how modules are loaded. Then we will study the main three alternatives to extend CPython: Native Extensions, Ctypes and CFFI and how to automate the process. &#13;
Furthermore we will take a look to other python implementations and how we can extend it.</description><speakers><speaker id="175"><name>Francisco Fern&#225;ndez Casta&#241;o</name><profile>https://ep2014.europython.eu/en/accounts/profile/175/</profile><description>Francisco Fernandez works as a software engineer at biicode in Madrid. He uses Python as his main programming language but he also program in other languages like Scala, Go, Clojure... His main interests are distributed systems, functional programming and graph databases. </description><image>https://ep2014.europython.eu/site_media/avatars/foto.jpeg</image></speaker></speakers></entry><entry id="37"><category>Talk</category><audience>Advanced</audience><topics><topic>System Administration</topic></topics><start>1100</start><duration>45</duration><room id="3">B07/B08</room><title>Rethinking packaging, development and deployment</title><abstract>In Python, we're trying to solve packaging problems in our own domain, but maybe someone else already solved most our problems.&#13;
&#13;
In the talk I'll show how I develop and deploy Python projects that can be easily mixed with non-Python dependencies.&#13;
&#13;
http://nixos.org/nix/ will be demonstrated to replace technologies in our stack: pip, virtualenv, buildout, ansible, jenkins.</abstract><description>Python is often mixed with other languages in development stack, nowadays it's hard to escape any JavaScript dependencies. If you add some C dependencies such as GStreamer to the stack, packaging becomes a burden.&#13;
&#13;
While tweaking our packaging infrastructure will make things better, it's hard to fix fundamental problem of packaging with current ad-hoc solutions in Python domain.&#13;
&#13;
Using Nix (http://nixos.org/nix/) for about a year gave me an insight that solving packaging problem at operating system level (bottom-up) is a better approach.&#13;
&#13;
For example, wouldn't it be cool to have "virtualenv" implemented inside your package manager, so you could isolate also non-Python dependencies and not just Python packages for your project and not worry if system was updated?&#13;
&#13;
We'll also show what benefits do we get by using the same tool for development and deployment and how little we have to do to deploy our application.&#13;
&#13;
To see how Haskell community is touching the same subject, see blog post http://ocharles.org.uk/blog/posts/2014-02-04-how-i-develop-with-nixos.html&#13;
&#13;
</description><speakers><speaker id="182"><name>Domen Ko&#382;ar</name><profile>https://ep2014.europython.eu/en/accounts/profile/182/</profile><description>Electrical Engineering student dropout focusing on solving problems with Python / Nix / JavaScript / Linux stack using kanban workflow.&#13;
&#13;
4 times GSOC student (Gentoo, Plone, PylonsProject, PylonsProject).&#13;
&#13;
Beer lover and kite-surfer from Ljubljana, Slovenia.&#13;
&#13;
Proud member of Kiberpipa hackerspace.&#13;
&#13;
Vision: be paid to work on improving OSS infrastructure.</description><image>https://ep2014.europython.eu/site_media/avatars/domen.jpeg</image></speaker></speakers></entry><entry id="15"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1100</start><duration>45</duration><room id="1">C01</room><title>Systems Integration: The OpenStack success story</title><abstract>OpenStack is a huge, open-source cloud provider. One of the main tenets of OpenStack is the (Shared Nothing Architecture) to which all modules stick very closely. In order to do that, services within OpenStack have adopted different strategies to integrate themselves and share data without sacrificing performance nor moving away from SNA.&#13;
&#13;
This strategies are not applicable just to OpenStack but to any distributed system. Sharing data, regardless what that data is, is a must-have requirement of any successful cloud service.&#13;
&#13;
This talk will present some of the existing integration strategies that are applicable to cloud infrastructures and enterprise services. The talk will be based on the strategies that have helped OpenStack to be successful and most importantly, scalable.&#13;
</abstract><description>Abstract&#13;
=======&#13;
&#13;
OpenStack is a huge, open-source cloud provider. One of the main tenets of OpenStack is the (Shared Nothing Architecture) to which all modules stick very closely. In order to do that, services within OpenStack have adopted different strategies to integrate themselves and share data without sacrificing performance nor moving away from SNA.&#13;
&#13;
This strategies are not applicable just to OpenStack but to any distributed system. Sharing data, regardless what that data is, is a must-have requirement of any successful cloud service.&#13;
&#13;
This talk will present some of the existing integration strategies that are applicable to cloud infrastructures and enterprise services. The talk will be based on the strategies that have helped OpenStack to be successful and most importantly, scalable.&#13;
&#13;
Details&#13;
======&#13;
&#13;
Along the lines of what I've described in the abstract, the presentation will walk the audience through the state of the art of existing system integration solutions, the ones that have been adopted by OpenStack and the benefits of those solutions. At the end of the talk, a set of solutions under development, ideas and improvements to the existing ones will be presented.&#13;
&#13;
The presentation is oriented to distributed services, fault-tolerance and replica determinism. It's based on a software completely written in python and running successfully on several production environments.&#13;
&#13;
The presentation will be split in 3 main topics:&#13;
&#13;
Distributed System integration&#13;
-----------------------------------&#13;
&#13;
* What's it ?&#13;
* Why is it essential for cloud infrastructures?&#13;
* Existing methods and strategies&#13;
&#13;
OpenStack success story&#13;
----------------------------&#13;
&#13;
* Which methods did OpenStack adopt?&#13;
* How / Why do they work?&#13;
* What else could be done?&#13;
&#13;
Coming Next&#13;
---------------&#13;
&#13;
* Some issues of existing solutions&#13;
* What are we doing to improve that?&#13;
* Other solutions coming up</description><speakers><speaker id="54"><name>Flavio Percoco</name><profile>https://ep2014.europython.eu/en/accounts/profile/54/</profile><description>Flavio spends most of his time hacking on storage and messaging modules. He has both Italian and Venezuelan roots, and is currently based in Italy where he works remotely for Red Hat. Flavio is also an actively open-source contributor, part of Mongodb Masters group and a Rust language contributor.&#13;
&#13;
Prior to Red Hat, Flavio worked on Big Data oriented applications, search engines and message systems. He was also an active member of Gnome's a11y team where he contributed to Orca and created MouseTrap, a head-tracker application. Outside Red Hat Flavio likes to take pictures, swim, travel, hang around with family and friends and whatever seems interesting.</description><image>https://ep2014.europython.eu/site_media/avatars/Screen-Shot-2013-09-12-at-8.40.46-AM.png</image></speaker></speakers></entry><entry id="109"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1100</start><duration>45</duration><room id="5">A08</room><title>Pythonista: A full-featured Python environment for iOS devices</title><abstract>The [Pythonista][1] app delivers a full-featured Python development experience on an iPad or an iPhone.  This introduction to the app will provide a rapid overview of the Pythonista user experience, features and Community Forum.  Then it will focus on a few source code examples of using the GPS to deliver real-time local weather, use the image library to manipulate images and convert documents, use the gyroscope to understand pitch, yaw, and roll, use Dropbox to backup and restore scripts, images, etc.&#13;
&#13;
[1]: http://omz-software.com/pythonista</abstract><description>*(Special note: [Pythonista][1] and [Editorial][2] are designed and created **in Berlin**).*&#13;
&#13;
1. Definition and history of Pythonista&#13;
2. Constraints that Apple's App Store imposes on development environments&#13;
3. Pythonista User Experience and [Community Forum][3]&#13;
4. [iOS-specific modules][4]: contacts, Dropbox, location, notification, photo, scene, sound, speech&#13;
5. Source code demonstrations&#13;
    * GPS: Combine location and requests to deliver local weather in real-time&#13;
    * Image: Use photo and PIL to take a photograph and add annotations&#13;
    * Scene: Draw graphics on the screen that change in relation to the gyroscope&#13;
    * Dropbox: Bidirectional syncing to keep the code on your iPhone and iPad in sync with each other&#13;
6. [Editorial][2] is the sister product which uses Python for Markdown editing and workflow automation&#13;
7. NumPy and matplotlib in Pythonista *(may be available by EuroPython)*&#13;
&#13;
[1]: http://omz-software.com/pythonista&#13;
[2]: http://omz-software.com/editorial&#13;
[3]: http://omz-forums.appspot.com/pythonista&#13;
[4]: http://omz-software.com/pythonista/docs/ios</description><speakers><speaker id="689"><name>Christian Clauss</name><profile>https://ep2014.europython.eu/en/accounts/profile/689/</profile><description>Avid Python developer</description><image>https://ep2014.europython.eu/site_media/avatars/ChristianClauss.jpg</image></speaker></speakers></entry><entry id="4"><category>Talk</category><audience>Novice</audience><topics><topic>Best Practices</topic></topics><start>1100</start><duration>45</duration><room id="4">B09</room><title>The Sorry State of SSL</title><abstract>Those web pages with shiny lock icons boasting that your data is safe because of &#8220;256 bit encryption&#8221;? They are lying. In times of mass surveillance and commercialized Internet crime you should know why that&#8217;s the case. This talk will give you an overview that will help you to assess your personal security more realistically and to make your applications as secure as possible against all odds. </abstract><description>The rule of thumb for people without degrees in cryptography on securing data on the Internet is &#8220;GPG for data at rest. TLS for data in motion&#8221;. And it&#8217;s actually a very good rule everyone should follow.&#13;
&#13;
The only kicker though is that configuring (and using!) TLS properly is not as simple as it sounds and if you&#8217;re not diligent as a user, developer, and ops engineer, you can easily compromise your data&#8217;s security despite best effort of everyone else.&#13;
&#13;
This talk will be multifaceted; you will learn:&#13;
&#13;
- how SSL and TLS roughly work and why their state is sorry,&#13;
- server- and client-side duties for best possible security,&#13;
- what alternatives you have for using TLS in Python,&#13;
- things to keep in mind when configuring servers,&#13;
- and what perils outside your control still can trip you up.&#13;
&#13;
In other words, the leitmotif is to show you the most common traps you should know about when using and deploying applications relying on TLS for transport layer security and how to avoid them. </description><speakers><speaker id="183"><name>Hynek Schlawack</name><profile>https://ep2014.europython.eu/en/accounts/profile/183/</profile><description>Hynek Schlawack is an infrastructure and software engineer from Berlin/Germany, PSF fellow, and contributor to a wide variety of open source projects including high-profile ones such as Twisted and CPython.&#13;
&#13;
Currently he works at the Potsdam-based Variomedia AG redoing its infrastructure with Python-based solutions, mostly using Twisted and Pyramid.&#13;
&#13;
His main areas of interest are security, networks, and robust software.</description><image>https://ep2014.europython.eu/site_media/avatars/avatar_hs.jpg</image></speaker></speakers></entry><entry id="10"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1145</start><duration>45</duration><room id="2">B05/B06</room><title>The Cython Compiler for Python</title><abstract>The Cython compiler is the most widely used static compiler for Python. It is used to speed up Python code and to extend CPython with fast native extension modules that process huge amounts of data all around the world. This talk by one of the core developers gives an intro to using the compiler and an overview of its major features. </abstract><description>The Cython compiler is the most widely used static compiler for Python. The code it generates is used in countless critical applications that process huge amounts of data world wide. Cython has two major use cases: to compile Python code into fast native extension modules, and to connect native code to the CPython runtime. The main goal of the Cython project is to make it easy for users to manually optimise their Python code to make it run at C speed. This talk by one of the core developers will give an intro to using the compiler and an overview of its major features.&#13;
&#13;
Outline will be more or less as follows:&#13;
&#13;
*   Cython: intro to the project and the compiler (4 min.)&#13;
*   compiling Python code&#13;
    -   how to do it and what you get (3 min.)&#13;
    -   a tiny bit of distutils (2 min.)&#13;
*   static typing and Cython extensions to the Python language&#13;
    -   static typing in Cython language syntax (3 min.)&#13;
    -   static typing in pure Python syntax (2 min.)&#13;
    -   why Cython's type system is cool and what users need to know about it (8 min.)&#13;
    -   Cython for optimising Python code (5 min.)&#13;
*   quick intro: talking to native C/C++ code in Cython&#13;
    -   using external C APIs (4 min.)&#13;
    -   using external C++ APIs (3 min.)&#13;
    -   how to build and link in distutils (2 min.)&#13;
    -   notes on ways to wrap large C-APIs (1 min.)&#13;
*   quick overview: special features for high-performance code&#13;
    -   NumPy integration and memory views, fused types, parallel loops in all brevity (3 min.)&#13;
</description><speakers><speaker id="240"><name>Stefan Behnel</name><profile>https://ep2014.europython.eu/en/accounts/profile/240/</profile><description>Stefan is an active member of the German speaking Python community and a major core developer of the widely used Open Source Python tools lxml and Cython. He works for the European ebook flatrate service Skoobe, and as a freelance Python trainer and consultant.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/portrait-20110429_schick.jpg</image></speaker></speakers></entry><entry id="59"><category>Talk</category><audience>Novice</audience><topics><topic>Best Practices</topic></topics><start>1145</start><duration>45</duration><room id="1">C01</room><title>Traversing Mazes the pythonic way and other Algorithmic Adventures</title><abstract>**Graphs** define a powerful mental (and mathematical) model of structure, &#13;
representing the building blocks of formulations and/or solutions &#13;
for many *hard problems*. In this talk, graphs and (*some of the*) main &#13;
graph-related algorithms will be analysed from a **very pythonic** angle:&#13;
the [Zen of Python][1] (e.g., *beautiful is better than ugly*, &#13;
*simple is better than complex*, *readability counts*).&#13;
&#13;
[1]: http://www.python.org/dev/peps/pep-0020/ "PEP20: The Zen of Python"</abstract><description>Programming isn't just about software architectures and object-oriented design;&#13;
it is also about solving algorithmic problems *efficiently*, some of which &#13;
are really *hard* [[Hetland, 2010]][0].&#13;
&#13;
The way we decide to *represent* and to *solve* our problems &#13;
(i.e., the *data structure* and the *algorithm* we use, respectively)&#13;
has a great impact on the overall *complexity* of our solution.&#13;
&#13;
In this scenario, **graphs** define a powerful mental (and mathematical)&#13;
model to deal with many algorithmic problems: "if we can formulate a problem as &#13;
one dealing with graphs, even if it doesn't *look* like a graph problem, we &#13;
are probably one step closer to solving it." [[Hetland, 2010]][0].&#13;
&#13;
Indeed, graphs constitute the building blocks for many (*hard*) problems. &#13;
Thus, mastering graphs and graph algorithms (e.g., graph traversals) provides a &#13;
jump start to deal with many other problems, such as *The Traveling Salesman* problem &#13;
(a.k.a. `TSP`), or *finding the shortest path to get out from a dungeon in a `D&amp;D` &#13;
story* [^1].	&#13;
&#13;
With particular considerations to the authoritative books on this subject (such &#13;
as the classics by *T. Cormen* and *R. Sedgewick*) for the theoretical &#13;
part (actually intended to be very limited and mostly referenced), this talk &#13;
aims at providing an overview of graphs and main graph-based algorithms for &#13;
Python programmers.&#13;
&#13;
The general outline of the talk will cover the following topics:&#13;
&#13;
*    Implementing Graphs and Trees;&#13;
*    "DRY" Algorithms&#13;
    *    "Memoization" and "Dynamic Programming"&#13;
*    "Mazes" Traversals and Search&#13;
    *    Graph Traversals&#13;
    *    Shortest Path Algorithms&#13;
*    "Hard" Graph Problems&#13;
    *    TSP&#13;
    *    Graph Colouring and Vertex Cover&#13;
&#13;
The main goal of the talk is to analyse how one of the most fundamental (data)&#13;
structure of "ADS" university classes, may be handled (and implemented) in a &#13;
**very pythonic way**, in accordance with the [Zen of Python][1] (e.g., &#13;
*beautiful is better than ugly*, *simple is better than complex*, *readability counts*).&#13;
&#13;
Moreover, since the Python ecosystem now offers several libraries and tools to deal&#13;
with graph representations and manipulations, e.g., [`networkx`](http://networkx.github.io)&#13;
or [`PADS`](http://www.ics.uci.edu/~eppstein/PADS/), references and comparisons with existing &#13;
implementations will be provided in order to analyse and compare existing solutions, while&#13;
*avoiding re-inventing the wheel*.&#13;
&#13;
To this end, code examples and case studies will be presented during the talk&#13;
to encourage the discussion and to stimulate the attendees to come up with &#13;
different solutions.&#13;
&#13;
Very basic math skills are required, together with familiarity with programming&#13;
in general and with Python in particular.&#13;
&#13;
[0]: http://goo.gl/ZeuDNc "Hetland, M. L., Python Algorithms, Mastering the Basic Algorithms in the Python Language, Apress 2010"&#13;
[1]: http://www.python.org/dev/peps/pep-0020/ "PEP20: The Zen of Python"&#13;
&#13;
[^1]: "Please replace D&amp;D with your favourite RPG. D&amp;D may sound old fashioned :)"</description><speakers><speaker id="250"><name>Valerio Maggio</name><profile>https://ep2014.europython.eu/en/accounts/profile/250/</profile><description>Valerio Maggio is a Postdoc Researcher at the University of Salerno. &#13;
His research interests are mainly focused on Machine Learning and &#13;
Software Engineering, recently combined with Semantic Web technologies &#13;
for (big) linked data analysis.&#8232;&#13;
Currently he uses Python as the mainstream language for his machine &#13;
learning code, making an intensive use of Scikit-learn and Matplotlib to &#13;
crunch, munge, and analyse experimental data.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/me_kyoto_3.jpg</image></speaker></speakers></entry><entry id="111"><category>Talk</category><audience>Advanced</audience><topics><topic>Web</topic></topics><start>1145</start><duration>45</duration><room id="5">A08</room><title>Designing NRT(NearRealTime) stream processing systems : Using python with Storm and Kafka.</title><abstract>The essence of near-real-time stream processing is to compute huge volumes of data as it is received. This talk will focus on creating a pipeline for collecting huge volumes of data using Kafka and processing for near-real time computations using Storm. </abstract><description>Kafka is a distributed, persistent, replicated publish-subscribe system which can be used for variety of use cases like activity stream processing, log collection etc. The design philosophy of Kafka is such that it enables real-time processing.&#13;
&#13;
Storm is a high-volume, continuous, reliable stream processing system developed at BackType and open-sourced by Twitter. Storm is being widely used in lot of organizations and has variety of uses-cases like:&#13;
&#13;
* Realtime analytics&#13;
* Distributed RPC&#13;
* ETL etc.&#13;
	&#13;
During the course of 45 minutes using an example of Real-time Wikipedia edit log stream we will try and understand:&#13;
&#13;
* Basic concepts of stream-processing.&#13;
    * Moving components involved from collection to processing layer.&#13;
* High level understanding of components involved in Kafka and Storm.&#13;
    * Kakfa:&#13;
        * Anatomy of a topic.&#13;
        * Notation of producer and consumer in Kafka.&#13;
        * Producer for Kafka in python which to push the real-time edit feed from Wikipedia.   &#13;
        * How Kafka will absorb the feed in terms of brokers and partitions.&#13;
    * Storm:&#13;
        * Architecture of storm.&#13;
            * Streams, Topologies, Bolts.&#13;
        * Need of storm like system a.k.a Hadoop != Storm&#13;
        * Writing storm topologies in python to consume feed and process real-time metrics like:    &#13;
            * Number of articles edited.&#13;
            * Category wise count of articles being edited.&#13;
            * Distinct people editing the articles&#13;
            * GeoLocation counters etc.&#13;
* Technological challenges revolving around near-real time stream processing systems:&#13;
    * Achieve low latency for processing as compared to batch processing.&#13;
	* State-management in workers to maintain aggregated counts like counting edits for same category of articles.&#13;
	* Handling failures and crashes.&#13;
		&#13;
Although Kafka is written in Scala and Storm in Java but we will discuss how we can embrace both the systems using Python.</description><speakers><speaker id="99"><name>Konark Modi</name><profile>https://ep2014.europython.eu/en/accounts/profile/99/</profile><description>Konark Modi works as a Senior Engineer with the DataPlatformTeam at MakeMyTrip.com(India&#8217;s leading online travel company). At MakeMyTrip.com he has handled multiple roles related to DevOps and DataPlatforms.&#13;
&#13;
Python comes as a default language for him for tasks of any length and breadth be it DevOps, Automation, Distributed task processing,Data Pipelines, Analysis for any Variety, Velocity  &amp; Volume of Data.&#13;
&#13;
As an activity member of the community, he loves contributing and getting involved at various fronts. Currently he is one of the organizers for PyCon India,the premier conference in India on using and developing the Python programming language.</description><image>https://ep2014.europython.eu/site_media/avatars/profile_pic-resized.jpg</image></speaker></speakers></entry><entry id="20"><category>Talk</category><audience>Novice</audience><topics><topic>Web</topic></topics><start>1145</start><duration>45</duration><room id="4">B09</room><title>Web Scraping in Python 101</title><abstract>This talk is about web scraping in Python, why web scraping is useful and what Python libraries are available to help you. I will also look into proprietary alternatives and will discuss how they work and why they are not useful. I will show you different libraries used in web scraping and some example code so that you can choose your own personal favourite. I will also tell why writing your own scrapper in scrapy allows you to have more control over the scraping process.</abstract><description>Who am I ?&#13;
=========&#13;
* a programmer&#13;
* a high school student&#13;
* a blogger&#13;
* Pythonista&#13;
* and tea lover&#13;
- Creator of freepythontips.wordpress.com&#13;
- I made soundcloud-dl.appspot.com&#13;
- I am a main contributor of youtube-dl.&#13;
- I teach programming at my school to my friends.&#13;
- It's my first programming  related conference.&#13;
- The life of a python programmer in Pakistan&#13;
&#13;
What this talk is about ?&#13;
==================&#13;
- What is Web Scraping  and its usefulness&#13;
- Which libraries are available for the job&#13;
- Open Source vs proprietary alternatives&#13;
- Whaich library is best for which job&#13;
- When and when not to use Scrapy&#13;
&#13;
What is Web Scraping ?&#13;
==================&#13;
Web scraping (web harvesting or web data extraction) is a &#13;
computer software technique of extracting information from &#13;
websites.  - Wikipedia&#13;
&#13;
###In simple words :&#13;
It is a method to extract data from a website that does not &#13;
have an API or we want to extract a LOT of data which we &#13;
can not do through an API due to rate limiting.&#13;
&#13;
We can extract any data through web scraping which we can &#13;
see while browsing the web.&#13;
&#13;
Usage of web scraping in real life.&#13;
============================&#13;
- to extract product information&#13;
- to extract job postings and internships&#13;
- extract offers and discounts from deal-of-the-day websites&#13;
- Crawl forums and social websites&#13;
- Extract data to make a search engine&#13;
- Gathering weather data etc&#13;
&#13;
Advantages of Web scraping over using an API &#13;
========================&#13;
- Web Scraping is not rate limited&#13;
- Anonymously access the website and gather data&#13;
- Some websites do not have an API&#13;
- Some data is not accessible through an API etc&#13;
&#13;
Which libraries are available for the job ?&#13;
================================&#13;
There are numerous libraries available for web scraping in &#13;
python. Each library has its own weaknesses and plus points.&#13;
&#13;
Some of the most widely known libraries used for web scraping are:&#13;
&#13;
- BeautifulSoup&#13;
- html5lib&#13;
- lxml&#13;
- re ( not really for web scraping, I will explain later )&#13;
- scrapy ( a complete framework )&#13;
&#13;
A comparison between these libraries&#13;
==============================&#13;
- speed&#13;
- ease of use&#13;
- what do i prefer&#13;
- which library is best for which purpose&#13;
&#13;
Proprietary alternatives&#13;
==================&#13;
- a list of proprietary scrapers&#13;
- their price&#13;
- are they really useful for you ?&#13;
&#13;
Working of proprietary alternatives&#13;
===========================&#13;
- how they work (render javascript)&#13;
- why they are not suitable for you&#13;
- how custom scrapers beat proprietary alternatives&#13;
&#13;
Scrapy&#13;
=======&#13;
- what is it&#13;
- why is it useful&#13;
- asynchronous support&#13;
- an example scraper&#13;
&#13;
Question&#13;
=======&#13;
- Questions from the viewers</description><speakers><speaker id="293"><name>Muhammad Yasoob Ullah Khalid</name><profile>https://ep2014.europython.eu/en/accounts/profile/293/</profile><description>Muhammad Yasoob Ullah Khalid is a Python programmer from Pakistan. He is currently doing his High school and is one of the youngest speakers at the conference. He runs a blog which is very popular among Pythonistas and also does a lot of open source work through GitHub. He is very keen of meeting new people and if you happen to bump into him then do not forget to say "hi".</description><image>https://ep2014.europython.eu/site_media/avatars/Untitled.jpg</image></speaker></speakers></entry><entry id="113"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1145</start><duration>45</duration><room id="3">B07/B08</room><title>Message-passing concurrency for Python</title><abstract>Concurrency and parallelism in Python are always hot topics. This talk will look the variety of forms of concurrency and parallelism. In particular this talk will give an overview of various forms of message-passing concurrency which have become popular in languages like Scala and Go. A Python library called python-csp which implements similar ideas in a Pythonic way will be introduced and we will look at how this style of programming can be used to avoid deadlocks, race hazards and "callback hell".</abstract><description>&#13;
&#13;
Concurrency and parallelism in Python are always hot topics. Early Python versions had a threading library to perform concurrency over operating system threads, Python version 2.6 introduced the multiprocessing library and Python 3.2 has introduced a futures library for asynchronous tasks. In addition to the modules in the standard library a number of packages such as gevent exist on PyPI to implement concurrency with "green threads". &#13;
&#13;
This talk will look the variety of forms of concurrency and parallelism. When are the different libraries useful and how does their performance compare? Why do programmers want to "remove the GIL" and why is it so hard to do? In particular this talk will give an overview of various forms of message-passing concurrency which have become popular in languages like Scala and Go. A Python library called python-csp which implements similar ideas in a Pythonic way will be introduced and we will look at how this style of programming can be used to avoid deadlocks, race hazards and "callback hell".</description><speakers><speaker id="213"><name>Sarah Mount</name><profile>https://ep2014.europython.eu/en/accounts/profile/213/</profile><description>Sarah Mount is a Senior Lecturer in Computer Science at the University of Wolverhampton, with particular interests in concurrency, parallelism and dynamic languages.</description><image>https://ep2014.europython.eu/site_media/avatars/selfc_large.jpg</image></speaker></speakers></entry><entry id="7"><category></category><audience></audience><topics></topics><start>1230</start><duration>90</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Lunch</title><description></description><speakers></speakers></entry><entry id="22"><category>Talk</category><audience>Novice</audience><topics><topic>System Administration</topic></topics><start>1400</start><duration>30</duration><room id="1">C01</room><title>Statistics 101 for System Administrators</title><abstract>Python allows every sysadmin to run  (and learn) basic statistics on system data, replacing sed, awk, bc and gnuplot with an unique, reusable and interactive framework.&#13;
&#13;
The talk is a case study where python allowed us to highlight some network performance points in minutes using itertools, scipy and matplotlib.&#13;
&#13;
The presentation includes code snippets and a brief plot discussion.&#13;
</abstract><description>#Statistics 101 for System Administrators&#13;
&#13;
## Agenda&#13;
 * A latency issue&#13;
 * Data distribution&#13;
 * 30 seconds correlation with pearsonr&#13;
 * Combinating data&#13;
 * Plotting and the power of color&#13;
&#13;
## An use case &#13;
 - Network latency issues&#13;
 - Correlate latency with other events &#13;
    &#13;
## First statistics &#13;
 - we created our parsing library &#13;
 - [using various recipes](http://chimera.labs.oreilly.com/books/1230000000393/ch06.html)&#13;
 - Having the data in a dict like&#13;
&#13;
        &gt; table = {&#13;
        &gt;   'time': [ 1,2,3, ..],&#13;
        &gt;   'elapsed': [ 0.12, 12.43, ..],&#13;
        &gt;   'error': [ 2, 0, ..],&#13;
        &gt;   'size': [123,3223, ..],&#13;
        &gt;   'peers': [2313, 2303, ..],&#13;
&#13;
 - It's easy to get max, min and standard deviation&#13;
&#13;
        &gt; print [k, max(v), min(v), stats.mean(v) ] for k,v in table.items() ]&#13;
&#13;
## Distribution &#13;
 - A distribution shows event frequency &#13;
&#13;
        &gt; from matplotlib import pyplot&#13;
        &gt; pyplot.hist(table['elapsed'])&#13;
&#13;
 - Time and Size distributions&#13;
&#13;
## (Linear) Correlation &#13;
 - What's correlation&#13;
 - What's not correlation&#13;
 - pearsonr and probability&#13;
 - catch for linear correlation&#13;
&#13;
        &gt; from scipy.stats.stats import pearsonr&#13;
        &gt; a, b = range(0,10), range(0,20, 2)&#13;
        &gt; c = [randint(0,10) for x in a]&#13;
        &gt; pearsonr(a, b), pearsonr(a,c)&#13;
        &gt; (1.0, 0.0), (0.43, 0.2)&#13;
&#13;
## Combinations &#13;
 - using itertools.combinations&#13;
 - netfishing correlation&#13;
&#13;
        &gt;from itertools import combination&#13;
        &gt;for f1, f2 in combinations(table, 2):&#13;
        &gt;        r, p_value = pearsonr(table[f1], table[f2])&#13;
        &gt;        print("the correlation between %s and %s is: %s" % (f1, f2, r))&#13;
        &gt;        print("the probability of a given distribution (see manual) is: %s" % p_value)&#13;
&#13;
## Plot always &#13;
&#13;
 - pearsonr finds *only* linear correlation&#13;
 - our eyes work better :P&#13;
 - so...plot always!&#13;
 - color is the 3d dimension of a plot!&#13;
&#13;
        &gt; from pyplot import scatter, title, xlabel, ylabel, legend&#13;
        &gt; from pyplot import savefig, close as closefig&#13;
        &gt;&#13;
        &gt; for f1, f2 in combinations(table, 2):&#13;
        &gt;    scatter(table[f1], table[2], label="%s_%s" % (f1,f2))&#13;
        &gt;    # add legend and other labels&#13;
        &gt;    r, p = pearsonr(table[f1], table[f2])&#13;
        &gt;    title("Correlation: %s v %s, %s" % (f1, f2, r))&#13;
        &gt;    xlabel(f1), ylabel(f2)&#13;
        &gt;    legend(loc='upper left') # show the legend in a suitable corner&#13;
        &gt;    savefig(f1 + "_" + f2 + ".png")&#13;
        &gt;    closefig()&#13;
&#13;
 &#13;
## Wrap Up! &#13;
 - do not use pearsonr to *exclude* relation between events&#13;
 - plots may serve better&#13;
 - scatter plot can show a system thruput and exclude correlation between fields A and fields B&#13;
 - continue collecting results&#13;
 &#13;
&#13;
</description><speakers><speaker id="248"><name>Roberto Polli</name><profile>https://ep2014.europython.eu/en/accounts/profile/248/</profile><description>Roberto works at Babel, migrating big mail infrastructures to open solutions. Develops in Python, C and Java to foster communities around various FLOSS, trying to bring both social and IT innovation.&#13;
&#13;
He's a Red Hat Certified Engineer and Virtualization Administrator, but loves maintaining free software, including the caldav java library: caldav4j.&#13;
&#13;
A life ago he took a Math degree, and he's really proud of it.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/rpolli_400.jpg</image></speaker></speakers></entry><entry id="35"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1400</start><duration>30</duration><room id="4">B09</room><title>Jigna: a seamless Python-JS bridge to create rich HTML UIs for Python apps</title><abstract>Jigna aims to provide an easy way to create rich user interfaces for Python applications using web technologies like HTML, CSS and Javascript, as opposed to widget based toolkits like Qt/wx or native toolkits. It provides a seamless two-way data binding between the Python model and the HTML view by creating a Python-JS communication bridge. This ensures that the view is always live as it can automatically update itself when the model changes, and update the model when user actions take place on the UI. The Jigna view can be rendered in an in-process Qt widget or over the web in a browser.</abstract><description>[Jigna][7] is an HTML based solution to create rich user interfaces for standalone Python applications. The HTML view for your Python model is rendered via Qt's [QtWebkit][3] browser widget where Jigna creates automatic two-way data binding between the underlying Python model and the view so that the view is always in sync with the model and can interact with it.&#13;
&#13;
Let us say we have a nice model written in Python (specifically, in [Traits][1]):&#13;
&#13;
    from traits.api import HasTraits, Str, on_trait_change&#13;
    &#13;
    class Model(HasTraits):&#13;
        name = Str&#13;
        greeting = Str&#13;
    &#13;
        @on_trait_change('name')&#13;
        def update_greeting(self):&#13;
            self.greeting = "Hello " + self.name&#13;
&#13;
        def clear(self):&#13;
            self.name = ""&#13;
    &#13;
    model = Model(name='Fred')&#13;
&#13;
We would like to write simple HTML to visualize this and have the model and view &#13;
be fully connected. Here is a sample HTML (an [AngularJS][2] template):&#13;
&#13;
    body_html = """&#13;
        Name: &lt;input ng-model="model.name"&gt; &lt;br&gt;&#13;
        Greeting:&#13;
        &lt;h1&gt;{{model.greeting}}&lt;/h1&gt; &lt;br&gt;&#13;
&#13;
        &lt;button ng-click="model.clear()"&gt;Clear&lt;/button&gt;&#13;
    """&#13;
&#13;
Notice how the HTML is directly referencing Python model attributes via `model.name` &#13;
and `model.greeting`, and calling its method via `model.clear()`. We bind this declarative view to the model and create a Qt based UI:&#13;
&#13;
    from jigna.api import View&#13;
    view = View(body_html=body_html)&#13;
    &#13;
    from PySide import QtGui&#13;
    app = QtGui.QApplication([])&#13;
    view.show(model=model)&#13;
    app.exec_()&#13;
&#13;
This produces an HTML UI which responds automatically to any changes in the &#13;
model and vice-versa. It can optionally be styled with CSS and made interactive &#13;
with Javascript. Clearly the above example is a toy example, but this shows a &#13;
nice way of easily building rich, live user interfaces for Python apps. &#13;
&#13;
This is nice for several reasons:&#13;
&#13;
* The view code is declarative and hence easy to read.&#13;
* The binding between the model and the view is automatic.&#13;
* HTML/CSS/JS today is very powerful &#13;
    * there are many JS libraries for a variety of tasks.&#13;
    * it is much easier to find people who know HTML/CSS/JS than Qt or a native &#13;
    toolkit.&#13;
    * your development team doesn't have to worry about creating widgets or the &#13;
    limitations in the toolkit's widget set as there are thousands of developers &#13;
    worldwide creating awesome CSS/JS widgets for you.&#13;
* There is a complete separation of view from the model and this allows us to &#13;
hand off the entire UI to an HTML/CSS/JS guru.&#13;
&#13;
And if this were not enough, the view can also be easily served on a regular web browser &#13;
if we just did the following:&#13;
&#13;
    view.serve(model=model)&#13;
&#13;
This starts up a web server to which one can connect multiple browsers to see &#13;
and interact with the model.&#13;
&#13;
You can check out the source code for Jigna [here][7].&#13;
&#13;
### How is this different from existing options?&#13;
&#13;
For a simple Python desktop application, it is relatively easy to create an HTML &#13;
view using a webkit browser widget.  However, the connection between the model &#13;
and the HTML UI can be tricky resulting in fairly complicated code.  Most web &#13;
frameworks provide this functionality but are web-centric, and are centered &#13;
around building web applications, not desktop applications. One of the implications of this is that the template is usually static and does not respond to changes on the server side immediately.&#13;
&#13;
Our goal is to be able to build a desktop UI completely in HTML where the HTML &#13;
template always remains live by referring directly to Python object attributes &#13;
and methods. Changes on the Python side should update the UI and user inputs on &#13;
the UI should be able to update the model.&#13;
&#13;
### How does it work?&#13;
&#13;
It turns out that Qt's [QtWebkit][3] browser has support for in-process &#13;
communication between its Javascript engine and the running Python application. &#13;
We use this communication channel to create lazily loaded Javascript proxies for Python &#13;
models.&#13;
&#13;
The other nice piece in this story is [AngularJS][2], which provides good model-view &#13;
separation between its HTML template and the corresponding Javascript model. &#13;
AngularJS has great support for two-way data binding between the template and &#13;
the model, which keeps the template expressions always in sync with the JS &#13;
model. This makes sure that the HTML you need to write is terse and simple.&#13;
&#13;
We combine these two pieces to create a lightweight Python-JS bridge which &#13;
provides us the two-way data binding we needed between the Python model and the &#13;
HTML view. We use [Traits][1] to write models in Python. Traits lets us define &#13;
attributes of an object statically, and supports notifications when the &#13;
attributes change. Jigna integrates well with traits so that these notifications automatically &#13;
update the UI. Similarly, user inputs on the UI change model attributes, call &#13;
public methods on the model as well.&#13;
&#13;
Note however that you don&#8217;t need traits to &#13;
use Jigna as you can bind it to your plain old Python objects too - you would &#13;
just need to add your own events *if* you want your models to be updated outside &#13;
of the UI.&#13;
&#13;
### More about the presentation&#13;
&#13;
In the presentation, I will talk about the basic philosophy of Jigna and then &#13;
move on to show some interesting demos. The demos will most likely include the &#13;
following:&#13;
&#13;
* Simple data binding between HTML and traits model&#13;
* A dummy app store UI created using Jigna - It demonstrates multiple &#13;
capabilities of Jigna like: templating lists and objects, calling methods on the &#13;
model, catching events fired on the Python side over in JS side etc.&#13;
* Embedding Qt widgets inside Jigna HTML - we embed [Chaco][4] and [Mayavi][5] &#13;
widgets (Chaco and Mayavi are 2D and 3D visualization libraries respectively) &#13;
which update live as we move HTML sliders.&#13;
* A demo of the web version of Jigna, in which you can view the HTML UI on a web &#13;
browser and execute public methods of the model remotely.&#13;
* WebGL backend working with Jigna (embedding Mayavi in the web version via &#13;
webgl)&#13;
* Embedding Jigna in an [IPython notebook][6] to have interactive plots in &#13;
IPython notebooks.&#13;
&#13;
[1]: http://code.enthought.com/projects/traits/ "Traits"&#13;
[2]: http://angularjs.org/ "AngularJS"&#13;
[3]: http://qt-project.org/wiki/QtWebKit "QtWebkit"&#13;
[4]: http://code.enthought.com/chaco/ "Chaco"&#13;
[5]: http://code.enthought.com/projects/mayavi/ "Mayavi"&#13;
[6]: http://ipython.org/notebook.html "IPython notebook"&#13;
[7]: https://github.com/enthought/jigna "Jigna"</description><speakers><speaker id="215"><name>Prashant Agrawal</name><profile>https://ep2014.europython.eu/en/accounts/profile/215/</profile><description>Prashant works as a software developer at Enthought India in Mumbai. He has been working on providing a nice way for creating rich user interfaces for Enthought's desktop and web applications. &#13;
&#13;
Prior to this, he had graduated from the Indian Institute of Technology Bombay majoring in Aerospace Engineering where his interest in software development grew more than in aerospace.</description><image>https://ep2014.europython.eu/site_media/avatars/prashant1.jpg</image></speaker></speakers></entry><entry id="39"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1400</start><duration>30</duration><room id="5">A08</room><title>Documenting your project with MkDocs.</title><abstract>[MkDocs](http://www.mkdocs.org) is a new tool for creating documentation from Markdown.&#13;
&#13;
The talk will cover:&#13;
&#13;
* How to write, theme and publish your documentation.&#13;
* The background and motivation for MkDocs.&#13;
* Choosing between MkDocs or Sphinx.</abstract><description>This talk will be a practical introduction to MkDocs, a new tool for creating documentation from Markdown:&#13;
&#13;
* The background behind MkDocs and the motivation for creating a new documentation tool.&#13;
* Comparing against Sphinx - what benefits each tool provides.&#13;
* Getting starting with MkDocs - how to write, theme and publish your documentation.&#13;
* Under the covers - how MkDocs works, and some asides on a couple of the neat Python libraries that it uses.&#13;
&#13;
</description><speakers><speaker id="189"><name>Tom Christie</name><profile>https://ep2014.europython.eu/en/accounts/profile/189/</profile><description>Web &amp; API engineer.&#13;
Author of Django REST framework.</description><image>https://ep2014.europython.eu/site_media/avatars/Photo_29-10-2013_11_46_31.jpg</image></speaker></speakers></entry><entry id="95"><category>Talk</category><audience>Novice</audience><topics><topic>Education</topic></topics><start>1400</start><duration>30</duration><room id="2">B05/B06</room><title>Teaching Python</title><abstract>Using Python in bringing people closer to programming has been popular for a while. But what are the most effective ways to do so?  The OpenTechSchool reports.</abstract><description>Python has been used in educational programmes ever since.  With a bandwidth that large, navigating the landscape of Python tutorials is hard indeed.&#13;
&#13;
This talk will look at successful Python teaching material. From the numerous iterations our material has gone through, we draw conclusions on what's crucial in teaching Python.  It will introduce how the OpenTechSchool is teaching Python and what measures it found most effective in spreading programming in general and Python in particular.  Among these are rapid feedback, supervised learning, localization, and knowing your target audience.&#13;
&#13;
The author is a member of the OpenTechSchool, a free community initiative which offers Python workshop on a number of topics.  Some of the workshops have been running for more than two years now.  He has written the first versions of "Python for beginners," a workshop which has been used in many cities to teach Python to programming novices.</description><speakers><speaker id="391"><name>Robert Lehmann</name><profile>https://ep2014.europython.eu/en/accounts/profile/391/</profile><description>Robert is a Berlin native and currently finishing his Master&#8217;s.  He had his fair share of first-hand education experience as a teaching assistant at the University of Potsdam and the OpenTechSchool.  He has co-authored one of the OTS' premier materials, Python for beginners.  In what is left of his spare time, he contributes to the Sphinx documentation generator.</description><image>https://ep2014.europython.eu/site_media/avatars/gravatar400.png</image></speaker></speakers></entry><entry id="126"><category>Training</category><audience>Novice</audience><topics></topics><start>1400</start><duration>180</duration><room id="7">A05/A06</room><title>Software Testing in Python</title><abstract>**"Software that is not tested is broken by default."**&#13;
&#13;
### Overview&#13;
In this training you will learn to  write well-structured tests for your software projects using the **unittest** and **nose** module. After an overview of test frameworks in Python you will implement several **test cases**, calculate **test coverage** and learn about the role of tests during **refactoring** and **Test-Driven-Development**.  After the training, you will be able to write your own tests to build better software in less time.&#13;
&#13;
### Objectives&#13;
1. You will implement a Unit Test, an Acceptance Test and an Integration test (including mock objects &amp; testing in isolation)&#13;
2. You will implement a new feature by writing a test first.&#13;
3. You will improve test coverage and refactor the tested code.&#13;
&#13;
### Target Audience&#13;
This training session is suited for Python developers with little or no prior experience with automated testing.&#13;
&#13;
### Training Methodology&#13;
The training consists of three rounds of alternating theory and exercises. The theory part includes gamified exercises that help to remember the content, e.g. puzzles and **&#8216;Who wants to be a Millionaire&#8217;** questions. During the practical exercises, you will work on a program mining data in Melvilles **&#8216;Moby Dick&#8217;**. The training is supplemented by a reference PDF including resources for further reading.&#13;
&#13;
</abstract><description>## Training Structure&#13;
### Warm-up (10')&#13;
* Icebreaker activity (5&#8217;)&#13;
* Overview: Objectives of the training (5&#8217;)&#13;
&#13;
### Part 1: Writing automatic tests in Python (45&#8217;)&#13;
* Warm-up exercise: methods in the unittest module (5&#8217;)&#13;
* Presentation: Unit Tests, Integration Tests, and Acceptance Tests (15&#8217;)&#13;
* Exercise: Write one test of each kind (20&#8217;)&#13;
* Q &amp; A (5&#8217;)&#13;
&#13;
### Part 2: Test-Driven-Development (45&#8217;)&#13;
* Warm-up exercise: quiz on test strategies (10&#8217;)&#13;
* Presentation on Test-Driven-Development (10&#8217;)&#13;
* Exercise: Write a test first, then implement (20&#8217;)&#13;
* Q &amp; A (5&#8217;)&#13;
&#13;
### break (10&#8217;)&#13;
&#13;
### Part 3: Tests during refactoring (45&#8217;)&#13;
* Presentation on refactoring strategies (10&#8217;)&#13;
* Text puzzle: How to calculate test coverage with figleaf (5&#8217;)&#13;
* Exercise: Combining multiple test modules to a test suite (10&#8217;)&#13;
* Exercise: Improving test coverage and refactor (15&#8217;)&#13;
* Q &amp; A (5&#8217;)&#13;
&#13;
### Summary: Benefits of testing (25&#8217;)&#13;
* 3-4 Groups discuss a question on benefits of testing (10&#8217;)&#13;
* Groups present their results (10&#8217;)&#13;
* Summary &amp; Wrap-up (5&#8217;)&#13;
&#13;
## Software required&#13;
Please install prior to the training&#13;
&#13;
* Python 3.3&#13;
*  [nose](https://nose.readthedocs.org/en/latest/)&#13;
* [coverage 3.7+](https://pypi.python.org/pypi/coverage)&#13;
&#13;
Integration and Acceptance testing will be done for Python command-line applications using standard modules, so no extra installation is required.</description><speakers><speaker id="723"><name>Kristian Rother</name><profile>https://ep2014.europython.eu/en/accounts/profile/723/</profile><description>Kristian Rother is a Python trainer with a background in scientific programming. He has published the book "Managing Your Biological Data with Python". Kristian is passionate about interactive teaching methods. He is certified Scrum Master and Toastmasters Advanced Communicator Bronze. </description><image>https://ep2014.europython.eu/site_media/avatars/Kristian.jpg</image></speaker><speaker id="353"><name>Magdalena Rother</name><profile>https://ep2014.europython.eu/en/accounts/profile/353/</profile><description>Magdalena Rother during her PhD developed a software on 3D RNA modeling (www.genesilico.pl/moderna/) that resulted in 7 published articles. She is coauthor on a paper on bioinformatic software development. Currently she actively develops a system biology software in Python at the Humboldt University Berlin (www.rxncon.org).</description><image>https://ep2014.europython.eu/site_media/avatars/MRother_photo_2.png</image></speaker></speakers></entry><entry id="87"><category>Training</category><audience>Novice</audience><topics></topics><start>1400</start><duration>180</duration><room id="6">A03/A04</room><title>Einf&#252;hrung in Sphinx</title><abstract>* Erstellung und Konfiguration einer neuen Dokumentation (20min)&#13;
* Einf&#252;hrung in reStructuredText (20min)&#13;
* Aufbau und Gliederung einer Dokumentation (20min)&#13;
* Kurze Pause (5min)&#13;
* Dokumentation von Python, C, C++, Javascript (40min)&#13;
* Automatische Dokumentation (20min)&#13;
* Kurze Pause (5min)&#13;
* Tabellen, Abbildungen, Formeln (20min)&#13;
* Glossar, Index, Referenzen (20min)&#13;
* &#220;berblick &#252;ber Erweiterungen (10min)</abstract><description>Sphinx ist ein leistungsf&#228;higes Werkzeug zur Dokumentation von Software, das reStructuredText-Dateien in eine Reihe von Zielformaten wie HTML, PDF und ePub konvertiert. Damit ist Sphinx auch eine interessante L&#246;sung f&#252;r das Multi-Channel-Publishing. Sphinx hat herausragende Funktionen um Python-Code zu dokumentieren und es unterst&#252;tzt auch einige andere Sprachen. Sphinx integriert sich gut in den Entwicklungsprozess von Software und *bringt Programmierer dazu, Dokumentation schreiben zu wollen*. So jedenfalls wird ein Benutzer auf der Homepage von Sphinx zitiert. &#13;
&#13;
Das Tutorial ist eine Einf&#252;hrung in Sphinx und deckt die Hauptfunktionen sowie einige n&#252;tzliche Erweiterungen ab. Die Teilnehmer sollten Sphinx im Vorfeld bereits installiert haben. Die Installation der Software ist nicht Teil des Tutorials, da es sehr zeitaufw&#228;ndig ist, mehrere Betriebssysteme abzudecken.</description><speakers><speaker id="180"><name>Jan Ulrich Hasecke</name><profile>https://ep2014.europython.eu/en/accounts/profile/180/</profile><description>Jan Ulrich Hasecke is a professional writer. He works as an advertising consultant for small and medium enterprises. He has written a book about Sphinx.&#13;
&#13;
Jan Ulrich Hasecke is founding member of the Python Software Verband e.V.. He produced a bunch of German marketing materials for Python, Python web frameworks and the Python content management system Plone. He is member of the Plone foundation, translated the Plone UI into German and has written the German User Guide for Plone with Sphinx. &#13;
&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/Jan-Ulrich-Hasecke-600px.png</image></speaker></speakers></entry><entry id="96"><category>Talk</category><audience>Novice</audience><topics><topic>Education</topic></topics><start>1430</start><duration>30</duration><room id="2">B05/B06</room><title>pymove3D - Python moves the world - Attractive programming for young people.</title><abstract>The second time a [contest](  http://pymove3d.pysv.org/)  for schoolar students is organized by the Python Software Verband e.V.. It is about to write a Python program that is executable in Blender using its 3D capabilities.&#13;
The talk overall gives an overview what experience we got by these ideas and how we want to continue.&#13;
</abstract><description>A new concept based on learning programming using the Python API of Blender makes&#13;
it very easy to get visible objects created. [Learning](http://pymove3d.pysv.org/python_course/stations/blender-basics/b_find_information/ba_search_api.html) of object oriented programming &#13;
is much easier that way. Objects you have created are visualized. &#13;
By methods you can interact with them and you get in time results shown.&#13;
Backing to the contest we provide [course material](http://pymove3d.pysv.org/coursematerial). &#13;
The talk overall gives an overview what experience we got by these ideas and how we want to continue.&#13;
</description><speakers><speaker id="5"><name>Reimar Bauer</name><profile>https://ep2014.europython.eu/en/accounts/profile/5/</profile><description>&#13;
&#13;
Reimar Bauer is a long-term MoinMoin Wiki developer.&#13;
&#13;
He likes FOSS projects and is a member of the pyCologne (http://pycologne.de) Usergroup. Since five years he organizes Python Barcamps (http://pythoncamp.de) in Cologne. Since 2012-11-01 he is a board member of the Python Software Verband e.V. (http://pysv.org) and become elected as PSF Fellow in 2013.&#13;
&#13;
Reimar Bauer (PySV) is responsible for the competition (http://pymove3d.pysv.org): Python moves the world - Attractive programming for young people . A short summary at speakerdeck.&#13;
&#13;
For living he works at the Forschungszentrum J&#252;lich GmbH, IEK. His fields of work/research development of data acquisition and analysis software, and system administration.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/bild_reimar_1.jpg</image></speaker></speakers></entry><entry id="16"><category>Talk</category><audience>Novice</audience><topics><topic>Education</topic></topics><start>1430</start><duration>30</duration><room id="5">A08</room><title>VPython goes to School</title><abstract>Using VPython in high school is an interesting way to introduce students to get in touch with computer programming concepts and to link computer science with other disciplines like Math, Geometry, Physics, Chemistry</abstract><description>My presentation is focused mainly on my teaching experience in a high school using VPython. I've posed some problems to my students to solve with VPython: from basic static building representations like castle to more complex dynamic models like bouncing balls.&#13;
This approach seems a good way to get in touch with computer programming concepts and to link computer science with other disciplines like Math, Geometry, Physics, Chemistry</description><speakers><speaker id="259"><name>Maurizio Boscaini</name><profile>https://ep2014.europython.eu/en/accounts/profile/259/</profile><description>Maurizio Boscaini loves programming and to learn and teach computer science. He's a teacher in a high school, adjunct professor at the University of Verona and teaches Scratch in the primary school and Robotics in the middle school.</description><image>https://ep2014.europython.eu/site_media/avatars/mauri_in_madeira_2013.jpg</image></speaker></speakers></entry><entry id="81"><category>Talk</category><audience>Novice</audience><topics><topic>Web</topic></topics><start>1430</start><duration>30</duration><room id="1">C01</room><title>How to make a full fledged REST API with Django OAuth Toolkit</title><abstract>World is going mobile and the need of a backend talking with your apps is getting more and more important. What if I told you writing REST APIs in Python is so easy you don&#8217;t need to be a backend expert? Take generous tablespoons of Django, mix thoroughly with Django REST Framework and dust with Django OAuth Toolkit to bake the perfect API in minutes.</abstract><description>The talk aims to explain how to create a RESTful API protected with OAuth2. The tools used are the popular web framework Django, Django Rest Framework app to create the REST enpoints and Django OAuth Toolkit, an app powered by the most known oauthlib that provides the OAuth2 authorization flow, token exchange and endpoint protection.</description><speakers><speaker id="110"><name>Federico Frenguelli</name><profile>https://ep2014.europython.eu/en/accounts/profile/110/</profile><description>None is better than Null</description><image>https://ep2014.europython.eu/site_media/avatars/gravatar_1.jpeg</image></speaker></speakers></entry><entry id="47"><category>Talk</category><audience>Advanced</audience><topics><topic>Web</topic></topics><start>1430</start><duration>30</duration><room id="4">B09</room><title>log everything with logstash and elasticsearch</title><abstract>When your application grows beyond one machine you need a central space to log, monitor and analyze what is going on. Logstash and elasticsearch let you store your logs in a structured way. Kibana is a web fronted to search and aggregate your logs.</abstract><description>The talk will give an overview on how to add centralized, structured logging to a python application running on multiple servers. &#13;
&#13;
It will focus on useful patterns and show the benefits from structured logging. &#13;
</description><speakers><speaker id="722"><name>Peter Hoffmann</name><profile>https://ep2014.europython.eu/en/accounts/profile/722/</profile><description>I'm a Software Developer from Karlsruhe, Germany. I have studied Software Engineering at the TU Berlin.   I'm working  as a Senior Web Developer at Blue Yonder. &#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/peter-hoffmann.jpg</image></speaker></speakers></entry><entry id="97"><category>Talk</category><audience>Novice</audience><topics><topic>Education</topic></topics><start>1500</start><duration>30</duration><room id="2">B05/B06</room><title>Teaching Python: To infinity and beyond</title><abstract>Dgplug summer training is a free online IRC based course which aims to teach FOSS ideas and programming in general using Python to new programmers/stduents. In this talk we share our experiences, lesson learned, hoping that people will be able to replicate this in other parts of the world. </abstract><description>Abstract&#13;
--------&#13;
Back in 2004, when I founded "Durgapur Linux Users Group", I chose a motto in Bengali, "Learn yourself and teach others".&#13;
We are following the same rules today and one major program which helped to keep it going is the summer training.&#13;
&#13;
Just before summer 2008, with help from Shakthi Kannan (well known FOSS developer and mentor from India), we sent a mail&#13;
to the various lists announcing an online summer training over IRC. The same training is now going on for the sixth year.&#13;
Every year we see an increase of interest in the students and we started getting students from other countries too. The duration the training&#13;
is around 3 months on #dgplug channel in irc.freenode.net &#13;
&#13;
This [presentation][1] was the primary announcement this year, opensource.com also covered the [story][2]. In 2013 around 20+ students are working on various&#13;
projects (upstream and ideas from scratch), half of the students are girls and we had a very good diversity in last years too. &#13;
Among the students this year, we have engineering college students, new hires in different IT companies, primary school English language teacher, a musician who loves to play his piano, system administrators from far corners of world.&#13;
&#13;
[1]: http://dgplug.org/summertraining/&#13;
[2]: http://opensource.com/life/13/6/learning-program-open-source-way&#13;
&#13;
Course Outline&#13;
---------------&#13;
- Soft skill training (online communications)&#13;
- Tools and basic command line training for using the computer in a simpler way&#13;
- Making sure that people use a search engine as the first place to ask a question.&#13;
- Teaching how to Read The Fine Manual nicely.&#13;
- Teaching text editors&#13;
- Git&#13;
- How to do documentation and why it is important.&#13;
- Introduction to programming / Python.&#13;
- Solving more and more complex real life problems using Python&#13;
- Becoming a contributor to another upstream project&#13;
- Become the community&#13;
  &#13;
Anyone with a decent Internet connection and any latest Linux distribution can join in this training. It is a free course, open to all.&#13;
&#13;
Another very special part of the training is sessions by upstream contributors. Students get a chance to meet and listen to many&#13;
upstream contributors. They share their stories, how they started contributors and many technical talks too.&#13;
&#13;
&#13;
Talk Outline&#13;
--------------&#13;
&#13;
- Introducing the Summer training&#13;
- History behind the training     &#13;
- Massive online + offline campaign , talked with each college student we knew and asked them to come online for a day and see how it goes.&#13;
&#13;
^^ 5 minutes&#13;
&#13;
- How we got the diversity? Short answer: It takes time. Long answer: We always had good number of girls participating but as time went on, we found successful participants and asked them to talk about their life story in the local colleges and to friends. Which surely showed in the way everyone participated. 2013 at the beginning we had more number girls than boys in the program. One more major point, the work never ends with the summer training ending. We keep in touch with the students years after years, even after they started working. It is the part of becoming the community rather than few days talking over IRC.&#13;
- Course details&#13;
&#13;
^^ 5 minutes&#13;
&#13;
- Old session logs are very important. Old session logs always help the students while revising or quickly looking into some particular matter.&#13;
- Why starting from zero knowledge is important? A session should be based on its slowest students, not the opposite way. Identifying the target audience for the sessions is very important, you should choose the pace of your training program based on that, but you should also be able to change the pace as required.&#13;
- Tips on how to manage 40+ newbies on a IRC channel when everyone wants to ask questions.&#13;
- Most common problems beginners have with Python? Indentation, we solved this by teaching how to use a good text editor at the beginning of the session.&#13;
- Why solving real life problems which is part of the students' life is important? They can see the changes reflecting in someway in their life. Like a student this year wrote a subtitle finder command line tool, one student previously wrote a desktop application using Qt which managed his movie collection and fetches all required information from IMDB. One person wrote system monitoring tool which his friends started adopting very fast.&#13;
- Giving them hope, giving them heros. Showcasing how the interaction with upstream developers encourage and motivate students. Try to get speakers from different background. We had awesome inspirational talks from core python developers and also purely technical guest sessions. Other topics included from writing docs to creative common licenses to It is also very important to keep in mind that changes will not come in day, you have to repeat the actions with an honest feedback system.&#13;
- Use of the home task submission system (written purely  in python). Keeping the solutions public help the students to make an habit of reading. &#13;
- Outcome: How Python changed so many lives. People started contributed different upstream projects like Fedora, Transifex. Many got placed in the startups or old companies like Yahoo!, Red Hat. College final year projects suddenly started changing from Railways reservation system to submitting patches to upstream projects. One more personal example: my wife, a lawyer by profession (who never liked computer much), now using Vim and Sphinx to create all kinds of reports/documents for her work and started poking into Python :)&#13;
&#13;
^^ 15 minutes&#13;
&#13;
Quick recap points&#13;
------------------&#13;
&#13;
- Keep in touch with your students.&#13;
- Do guest lectures outside from primary course.&#13;
- Try to do project work where they can see the output fast. Build up from small projects to bigger ones.&#13;
 &#13;
 ^^ 1 minute</description><speakers><speaker id="711"><name>Kushal Das</name><profile>https://ep2014.europython.eu/en/accounts/profile/711/</profile><description>Python Core developer. Working as Community Gardener in Eucalyptus.</description><image>https://ep2014.europython.eu/site_media/avatars/me2.jpg</image></speaker></speakers></entry><entry id="52"><category>Talk</category><audience>Novice</audience><topics><topic>Python Core</topic></topics><start>1500</start><duration>30</duration><room id="5">A08</room><title>PyPy status talk (a.k.a.: no no, PyPy is not dead)</title><abstract>The current status of PyPy, with a particular focus on what happened in the last two years, since the last EuroPython PyPy talk.  We will give a brief overview of the current speed and the on-going development efforts on the JIT, the GC, NumPy, Python 3 compatibility, CFFI, STM...</abstract><description>In this talk we will present the current status of PyPy, with a particular focus on what happened in the last two years, since the last EuroPython PyPy talk.  We will give an overview of the current speed and the on-going development efforts, including but not limited to:&#13;
&#13;
- the status of the Just-in-Time Compiler (JIT) and PyPy performance in general;&#13;
- the improvements on the Garbage Collector (GC);&#13;
- the status of the NumPy and Python 3 compatibility subprojects;&#13;
- CFFI, which aims to be a general C interface mechanism for both CPython and PyPy;&#13;
- a quick overview of the STM (Software Transactional Memory) research project, which aims at solving the GIL problem.&#13;
&#13;
This is the "general PyPy status talk" that we give every year at EuroPython (except last year; hence the "no no, PyPy is not dead" part of the title of this talk).</description><speakers><speaker id="119"><name>Armin Rigo</name><profile>https://ep2014.europython.eu/en/accounts/profile/119/</profile><description>Armin Rigo is one of the founders and lead developers of the PyPy project, which began in 2003. He has taken part in all areas, from the Python language definition to the RPython translation framework, including the garbage collector, the tracing just-in-time compiler, and now the Software Transactional Memory part.</description><image>https://ep2014.europython.eu/site_media/avatars/arigo.639x400.png</image></speaker></speakers></entry><entry id="41"><category>Talk</category><audience>Novice</audience><topics><topic>Web</topic></topics><start>1500</start><duration>30</duration><room id="1">C01</room><title>Full Stack Python</title><abstract>There has been a lot of noise about being a "full stack developer" recently. What does the full web stack look like for Python and how do you go about learning each piece?&#13;
&#13;
This talk will guide you up the layers from the server that handles the web request through the JavaScript that executes on a user's browser. </abstract><description>This talk distills information from the open source guide [Full Stack Python](http://www.fullstackpython.com/) I wrote into a 30 minute talk on web stack layers. An approximate timeline for this talk would be:&#13;
&#13;
* 5 min: intro story&#13;
* 5 min: what the web developers need to know about virtual servers, web servers, and WSGI servers&#13;
* 5 min: what do web frameworks provide?&#13;
* 5 min: what are the most important parts of your web application to analyze and monitor?&#13;
* 5 min: static files and execution on the user's browser&#13;
* 5 min: concluding story and resources to learn more&#13;
&#13;
This is a high level overview intended for developers who are new to Python web development and need to understand what the web stack layers are and how they fit together.</description><speakers><speaker id="671"><name>Matt Makai</name><profile>https://ep2014.europython.eu/en/accounts/profile/671/</profile><description>Matt Makai is a Python web developer based in Washington, D.C. He was a DjangoCon 2013 speaker on "Making Django Play Nicely with Third Party Services" as well as a speaker throughout the past year at San Francisco Django, Memphis Python, Omaha Python, Django Boston, DC Python, DC Continuous Integration, and Django District. Matt's been working with Django since 0.96 and writes Full Stack Python (http://www.fullstackpython.com/) to help new developers understand how to deploy their Python-powered web applications. </description><image>https://ep2014.europython.eu/site_media/avatars/matt-makai.jpg</image></speaker></speakers></entry><entry id="53"><category>Talk</category><audience>Advanced</audience><topics><topic>Embedded Devices</topic></topics><start>1500</start><duration>30</duration><room id="4">B09</room><title>GNU/Linux Hardware Emulation with Python</title><abstract>With the kernel [inotify](http://en.wikipedia.org/wiki/Inotify "inotify") feature, the [D-Bus mocker library](https://launchpad.net/python-dbusmock "D-Bus mocker library") and the [udev monitoring](http://pyudev.readthedocs.org/en/latest/api/pyudev.html#pyudev.Monitor "udev monitoring") we try to detect the different events that occours when you're using a specific set of connected devices.&#13;
&#13;
Then we try to mimic these devices investigating also the kernel drivers if necessary.&#13;
&#13;
At the end we're ready to connect the simulation routines to our testing procedure.</abstract><description>Do want to test the connection code to a wifi/gsm network, but you haven't any dongle?&#13;
&#13;
Do you want to check your software notification when the battery is low, but you're testing your application on your desktop?&#13;
&#13;
Do you want to manipulate the data coming from a device, but you've lend it to someone else?&#13;
&#13;
*No problem, you can emulate all these hardware with Python!*</description><speakers><speaker id="702"><name>Stefano Cotta Ramusino</name><profile>https://ep2014.europython.eu/en/accounts/profile/702/</profile><description>Software Engineer with several years of experience in embedded software solutions, hw/sw integration and hardware monitor systems. &#13;
&#13;
Always interested in the Open Source world, Stefano is one of main GNU/Linux developer for the [openmamba](http://www.openmamba.org "openmamba") distribution and he leads from the beginning the laboratories for the [GNU/Linux course](http://netstudent.polito.it/wiki/index.php/Corso "GNU/Linux course") at the Polytechnic University of Turin.</description><image>https://ep2014.europython.eu/site_media/avatars/stefano_cotta_ramusino.jpg</image></speaker></speakers></entry><entry id="14"><category></category><audience></audience><topics></topics><start>1530</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Coffee Break</title><description></description><speakers></speakers></entry><entry id="24"><category></category><audience></audience><topics></topics><start>1600</start><duration>90</duration><room id="1">C01</room><title>Lightning Talks</title><description></description><speakers></speakers></entry></day><day date="2014-07-23"><entry id="122"><category>Keynote</category><audience>Novice</audience><topics></topics><start>0900</start><duration>45</duration><room id="1">C01</room><title>Our decentralized future</title><abstract>Pieter will talk about the urgent push towards a decentralized future.  As founder of the ZeroMQ community, he will explain the vision, design and reality of distributed software systems. He&#8217;ll explain his view on the community itself, also a highly decentralized &#8220;Living System&#8221;, as Hintjens calls it. Finally he&#8217;ll talk about edgenet, a model for a decentralized Internet. </abstract><description>Pieter will talk about the urgent push towards a decentralized future.  As founder of the ZeroMQ community, he will explain the vision, design and reality of distributed software systems. He&#8217;ll explain his view on the community itself, also a highly decentralized &#8220;Living System&#8221;, as Hintjens calls it. Finally he&#8217;ll talk about edgenet, a model for a decentralized Internet. </description><speakers><speaker id="1329"><name>Pieter Hintjens</name><profile>https://ep2014.europython.eu/en/accounts/profile/1329/</profile><description>Pieter Hintjens is a writer, programmer and thinker who has spent decades building large software systems and on-line communities, which he describes as "Living Systems". He is an expert in distributed computing, having written many protocols and distributed software systems. He founded the ZeroMQ free software project in 2007, and in 2013 launched the edgenet project to build a fully secure, anonymous peer-to-peer Internet. He is the author of "ZeroMQ - Messaging for Many Applications" (O'Reilly), "Code Connected", and "Culture and Empire: Digital Revolution". His blog is at hintjens.com.</description><image>https://ep2014.europython.eu/site_media/avatars/pieter-hintjens.jpg</image></speaker></speakers></entry><entry id="130"><category>Talk</category><audience>Advanced</audience><topics><topic>Web</topic></topics><start>1000</start><duration>30</duration><room id="5">A08</room><title>Using Django to serve 20 million users</title><abstract>Nowadays, it's kinda difficult to find a step-by-step on creating performative web sites. We both have experienced this problem when developing our applications and, after more than 8 years building software, we believe we can help other developers. We also present the approach taken in Cartola FC, a 100% dynamic application built with nginx, tornado, memcached, mongodb and beanstalkd.</abstract><description>In this talk, we will give technical details of how to use Python (Django, Tornado) to build sites like globoesporte.com, sportv.com and combate.globo.com. We will show the problems faced and how they were solved. We will talk about gunicorn, memcached, semantics (virtuoso) and nginx and how these technologies fit in the development of the largest sports portal in Latin America.  </description><speakers><speaker id="260"><name>Victor Pantoja</name><profile>https://ep2014.europython.eu/en/accounts/profile/260/</profile><description>Electronic and Computing Engineer by UFRJ and master in computer science by PUC-Rio, I'm a senior web developer with 9 years of experience building large, consumer-focused content sites at globo.com, one of the top-rated portals of news, sports and entertainment throughout Latin America. With tens of millions of hits per day, globoesporte.com is the largest portal of sports throughout Latin America and the offical one for FIFA Brazil World Cup 2014.&#13;
&#13;
I have particular interest in building large systems and in implementing new ways to scale them to achieve our performance goal and to let our million daily users well-informed and satisfied.</description><image>https://ep2014.europython.eu/site_media/avatars/perfil.jpg</image></speaker><speaker id="261"><name>R&#244;mulo de Barros Correia Jales</name><profile>https://ep2014.europython.eu/en/accounts/profile/261/</profile><description>Computer Engineer, currently working in globo.com as a software engineer at globoesporte.com.</description><image></image></speaker></speakers></entry><entry id="32"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1000</start><duration>30</duration><room id="1">C01</room><title>Embedding Python: Charming the Snake with C++</title><abstract>At the example of our in-house distributed scheduling system, we discuss the challenges of embedding the Python interpreter in a C++ program. Besides the actual integration of the interpreter, efficient data exchange between both languages is discussed. In addition, this presentation demonstrates how higher-level abstractions further diminish the language barrier.</abstract><description>Python with its huge standard library and sophisticated packages developed by its thriving community has become an incredibly useful tool for data scientists. At Blue Yonder, we value Python for the ease with which we can access and combine machine learning algorithms to build accurate prediction models.&#13;
&#13;
To get the most business value out of the use of Python, we strive to rid our model developers from all burdens outside their core expertise, i.e., developing statistical models. To leverage our existing infrastructure, essentially a distributed scheduling system written in C++, we decided to embed a Python interpreter in our application. The goal was to let developers use the language best suited for their problem, and to let them incorporate code created by others even if it is not written in the same language.&#13;
&#13;
In this presentation, I will talk about a few obstacles which we had to overcome in integrating the (C)Python interpreter in our C++ program, e.g., clean resource management, error handling, and broken features in the interpreter's API. I will show how we employed features from the Boost Python C++ library [1] not only for simple data exchange, but also for more powerful concepts such as data sources. Finally, I will demonstrate how C++ objects can be used to seamlessly interact with Python, for example to use Python's logging package as usual while the actual logging is handled by our C++ application.&#13;
&#13;
With this combination of both worlds, we achieved a desirable mix of virtues: safe, reliable operations; good run-time performance; fast development; and highly expressive, unit testable core domain logic.&#13;
&#13;
[1]: See http://www.boost.org/doc/libs/1_55_0/libs/python/</description><speakers><speaker id="410"><name>Michael K&#246;nig</name><profile>https://ep2014.europython.eu/en/accounts/profile/410/</profile><description>Michael studied physics at the Karlsruhe Institute of Technology. In 2011, he got a PhD for his work on computational methods for the simulation of nanophotonic systems.&#13;
&#13;
Since 2011 he works at Blue Yonder GmbH as a software developer, mainly programming in C++ and Python. At http://clean-cpp.org, he also maintains a blog on clean software development in C++.</description><image>https://ep2014.europython.eu/site_media/avatars/20130424_BlueYonder_151.jpg</image></speaker></speakers></entry><entry id="100"><category>Talk</category><audience>Novice</audience><topics><topic>Testing</topic></topics><start>1000</start><duration>30</duration><room id="4">B09</room><title>Introduction to pytest</title><abstract>pytest is a full featured testing tool that makes it possible to write &#8220;pythonic&#8221; tests. This talk will introduce pytest and some of its unique and innovative features. It will help you get started with pytest for new or existing projects, by showing basic usage and configuration.</abstract><description>This talk will show introduce pytest and show some unique and innovative features. It will show how to get started using it and some of the most important features.&#13;
&#13;
One of these features is the ability to write tests in a more &#8220;pythonic&#8221; way by using the assert statement for assertions. Another feature in pytest is fixtures &#8211; a way to handle test dependencies in a structured way. This talk will introduce the concept of fixtures and show how they can be used.&#13;
&#13;
No previous knowledge of pytest is required &#8211; this talk is for people who are new to testing or has experience with other Python testing tools such as unittest or Nose.</description><speakers><speaker id="757"><name>Andreas Pelme</name><profile>https://ep2014.europython.eu/en/accounts/profile/757/</profile><description>Andreas is a software engineer from Sweden. He is the co-founder and lead developer at Personalkollen, making time tracking and salary management easy.&#13;
&#13;
Andreas likes to contribute to open source projects and is the maintainer of pytest-django.</description><image>https://ep2014.europython.eu/site_media/avatars/andreaspelme.png</image></speaker></speakers></entry><entry id="99"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1000</start><duration>30</duration><room id="3">B07/B08</room><title>Writing multi-language documentation using Sphinx</title><abstract>How to write multi-language documentation? What tools can you use? What mistakes should you avoid? This talk is based on the experiences I gathered while working on several multi-language documentation projects using [Sphinx](http://sphinx-doc.org/).</abstract><description>Internationalized documentation is a fairly new topic. And there are different approaches to do this. I will talk about how Sphinx internationalization support works, which tools and services I use and how to organize the translation workflow in an Open Source project. Finally I will have a look at what the future of internationalization in Sphinx might bring.</description><speakers><speaker id="572"><name>Markus Zapke-Gr&#252;ndemann</name><profile>https://ep2014.europython.eu/en/accounts/profile/572/</profile><description>[Markus Zapke-Gr&#252;ndemann](http://www.keimlink.de/) looks back on over 13 years of experience in software development and works for more than six years as self-employed software developer, consultant and trainer. His focus is on developing web applications with Django and integration with Mercurial. He is the owner of [transcode](http://www.transcode.de/), a company offering Python and Django software development and training.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/Portrat_2009_550x550_1.jpg</image></speaker></speakers></entry><entry id="43"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1000</start><duration>30</duration><room id="2">B05/B06</room><title>Tweaking libraries as a step towards secure programming</title><abstract>We will explore how to modify or rewrite some of Python core libraries to introduce monitoring and security functions, that can be adapted to work with existing code, to allow greater control over low level operations by ensuring proper separation between python and system objects.</abstract><description>During the talk we will describe techniques and architectural approaches to better control and monitor the security of a Python application handling traffic from any kind of data sources and how to restructure the code to better handle the unexpected. &#13;
&#13;
During the talk we will focus on how python libraries are working in LINUX systems.&#13;
For interactions between python and the OS we will focus on libraries:&#13;
&#13;
-   os&#13;
-   sys&#13;
-   multiprocessing&#13;
&#13;
For interactions between python and the network we will focus on libraries:&#13;
&#13;
-   socket&#13;
-   ftplib&#13;
-   httplib / urllib / pycurl&#13;
&#13;
For data handling we will cover how to improve security of operations like:&#13;
&#13;
-   input/output sanitisation (files, strings, arguments)&#13;
-   writing to files or file descriptors&#13;
-   implicit and explicit object control using both "whitelist" and "blacklist" logics&#13;
-   exception handling by using meta-classes and decorators&#13;
&#13;
For each library we will proceed as follows:&#13;
&#13;
-   Review of library internal logic and data flow&#13;
-   Analysis of possible weaknesses in library code or logic&#13;
-   Introduction of a modified library logic able to cope with unexpected data&#13;
-   Description of modified functions to allow security checks and data validation &#13;
-   Examples of real problems and possible improvements to mitigate them&#13;
&#13;
We will explore how to make code able to react to improper imports, misuse of variables, insecure calls to functions by briefly covering some ways of using metaclasses, descriptors and decorators, method wrappers, traceback inspection and builtins. &#13;
&#13;
Then we will explore the use of metaclasses and class decorators to intercept reads/writes and internal operations, implement automatic type checking over object attributes and how to use iterators and generators to respond to maliciously formatted strings or data streams.&#13;
</description><speakers><speaker id="848"><name>Enrico Branca</name><profile>https://ep2014.europython.eu/en/accounts/profile/848/</profile><description>Enrico Branca is an experienced researcher with specialist knowledge in Cyber security. He has been working in information security for over a decade with experience in software security, information security management, and cyber security R&amp;D. He has been trained and worked in various roles during his career, including Senior Security Engineer, Security Architect, Disaster Recovery Specialist, Microsoft Security Specialist and others, and his current role as Independent Researcher in Cyber Intelligence.</description><image>https://ep2014.europython.eu/site_media/avatars/Enrico_Branca_EuroPy14.png</image></speaker></speakers></entry><entry id="88"><category>Training</category><audience>Expert</audience><topics></topics><start>1000</start><duration>180</duration><room id="7">A05/A06</room><title>An introduction to Machine learning with Scikit-learn</title><abstract>This tutorial will introduce the basics of machine learning, and how these learning tasks can be accomplished using Scikit-Learn. By the end of the tutorials, participants will be poised to take advantage of Scikit-learn's wide variety of machine learning algorithms to explore their own data sets.&#13;
</abstract><description>Tutorial objective&#13;
===============&#13;
Machine Learning develops algorithms which can learn from previously-seen data in order to make predictions about future data. It undergoes fast progress and is the focus of many startup creation, leveraging the accumulation of user-centric data via Internet services.&#13;
&#13;
Scikit-learn is a Python module that builds upon the scientific-Python tools such as numpy and scipy to deliver machine learning tools for the non-specialist.&#13;
&#13;
Tutorial outline&#13;
=============&#13;
&#13;
* Basics of numpy and matplotlib for manipulating and visualizing data.&#13;
* Basic concepts of machine learning&#13;
* Simple classification examples&#13;
* Simple regression examples&#13;
* Measuring model performance: cross-validation&#13;
* Extracting features from text&#13;
* Linear Models&#13;
* Random forests and boosted trees&#13;
* On-line learning to tackle big data&#13;
* Dimensionality reduction: clustering and projections&#13;
&#13;
&#13;
Teaching method&#13;
===============&#13;
&#13;
This is a hands-on course. Students are strongly encouraged to work along with the trainer at the interactive prompt. There will be exercises the students need to do on their own. Experience shows that this active involvement is essential for an effective learning.&#13;
&#13;
Software used&#13;
====================&#13;
&#13;
Please bring your laptop with the operating system of your choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7 or 3.X we need:&#13;
&#13;
* IPython (for interactive work with scientific plotting)&#13;
* Matplotlib&#13;
* scikit-learn and its dependencies (numpy, scipy)&#13;
&#13;
If installing all these requirements, that have compiled dependencies, is&#13;
difficult, consider using anaconda http://continuum.io/downloads or&#13;
Canopy https://www.enthought.com/products/canopy/&#13;
&#13;
&#13;
Intended Audience&#13;
================&#13;
&#13;
Python programmers who would like build predictive engines from data.&#13;
&#13;
Audience level&#13;
=============&#13;
&#13;
Programmers with good Python knowledge. No prior knowledge of machine learning, scikit-learn or scientific programming is needed.</description><speakers><speaker id="853"><name>Ga&#235;l Varoquaux</name><profile>https://ep2014.europython.eu/en/accounts/profile/853/</profile><description>Ga&#235;l Varoquaux is an INRIA faculty researcher working on computational science for brain imaging in the Neurospin brain research institute (Paris, France). His research focuses on modeling and mining brain activity in relation to cognition. Years before the NSA, he was hoping to make bleeding-edge data processing available across new fields, and he has been working on a mastermind plan building easy-to-use open-source software in Python. He is a core developer of scikit-learn, joblib, and Mayavi, a nominated member of the PSF, and often teaches scientific computing with Python using http://scipy-lectures.github.com.</description><image>https://ep2014.europython.eu/site_media/avatars/gael.png</image></speaker></speakers></entry><entry id="17"><category>Training</category><audience>Novice</audience><topics></topics><start>1000</start><duration>180</duration><room id="6">A03/A04</room><title>PySide - Develop System GUI</title><abstract>Program Structure&#13;
===============&#13;
The outline of the course would be as follows:&#13;
&#13;
1. Introduction - 30 Minutes&#13;
-------------------------------&#13;
* Getting Started with PySide&#13;
* Setting Up PySide&#13;
* Importing PySide Objects &#13;
* First PySide Application &#13;
&#13;
2. Windowed Application Creation - 30 Minutes&#13;
----------------------------------------------------&#13;
* Creating a Sample Window&#13;
* Application Icon &#13;
* Showing tooltip &#13;
* Closing a Window -Close Button and Quit &#13;
* Centering the Window&#13;
* About and License Box&#13;
&#13;
3. Menus, Toolbar and Layout Management - 30 Minutes&#13;
-------------------------------------------------&#13;
&#13;
* Status, Menu and Tool bar creation&#13;
* Layout Policies and Management &#13;
* Absolute Positioning &#13;
* Layout Containers &#13;
* SDI and MDI &#13;
* Creation of a Simple text editor &#13;
&#13;
4. Events and Signals - 30 Minutes&#13;
---------------------------------------&#13;
* Event Management &#13;
* Signals and Slots&#13;
&#13;
5. Miscellaneous - 30 Minutes&#13;
---------------------------------&#13;
* Dialogs and Widgets&#13;
* Database connectivity &#13;
&#13;
Break and General Interaction - 30 Minutes&#13;
------------------------------------------------&#13;
&#13;
Prerequisites&#13;
=============&#13;
&#13;
The users would have to install/build PySide. It is better if you have already built PySide on your system. &#13;
&#13;
For building PySide please refer to the following:&#13;
&#13;
* [Mac OS](http://qt-project.org/wiki/Building_PySide_on_Mac_OS_X)&#13;
* [Linux / Unix](http://qt-project.org/wiki/Building_PySide_on_Linux)&#13;
* [Windows](http://qt-project.org/wiki/Building_PySide_on_Windows)&#13;
&#13;
Alternatively, you can read my book on PySide if you like to know what would be covered in the session.&#13;
&#13;
[PySide GUI Application Development](http://www.packtpub.com/pyside-gui-application-development/book)&#13;
--------------------------------------------&#13;
&#13;
If you have some difficulties in installing please feel free to contact me anytime.&#13;
&#13;
* [My Web Page](http://venkateshwaranloganathan.com)&#13;
* [My FB Page](http://www.packtpub.com/pyside-gui-application-development/book)&#13;
* [My Twitter Profile](https://twitter.com/anandvenkat4)&#13;
####Looking forward to connect with you all, See you at the conference.</abstract><description>So, You have decided to learn PySide. Before getting into the technical details let us explore what is PySide?&#13;
&#13;
Well, when it comes to GUI programming, it is always considered to be hectic at least for the early language developers like C, C++.  Its because of the 100 lines of code that you end up writing to just create a button object. There comes a rescue for this, the GUI programming is made a little easier with the introduction of tool kits such as Tcl/Tk, Qt, wxwidgets etc. These libraries made our life a lot simpler by providing the wrapper framework in the native language.&#13;
 &#13;
One such framework developed for Python by Qt is PySide. It is a cross-platform UI framework, meaning that you can run the same code in almost any operating systems, say, for example, Linux, Unix, Windows, Macintosh etc with no or little changes to the code. The best part of PySide is its licensing. PySide has been published as a response to the lack of suitably licensed Qt bindings for Python. PySide is licensed under the LGPL version 2.1 license, allowing both Free/Open source software and proprietary software development. The python wiki page gives more info about the various other GUI frameworks used by python segregated by their capabilities.</description><speakers><speaker id="271"><name>Venkateshwaran Loganathan</name><profile>https://ep2014.europython.eu/en/accounts/profile/271/</profile><description>Working as a Software Developer in an MNC. Have authored a book on PySide by the name "PySide GUI Application Development" by Packt Publishers. More of me at http://venkateshwaranloganathan.com&#13;
&#13;
Have involved myself in the development of projects in the open source page. Worked on  C, Python and Node.js extensively.</description><image>https://ep2014.europython.eu/site_media/avatars/Swimming_Pic.jpg</image></speaker></speakers></entry><entry id="3"><category></category><audience></audience><topics></topics><start>1030</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Breakfast</title><description></description><speakers></speakers></entry><entry id="128"><category>Talk</category><audience>Advanced</audience><topics><topic>System Administration</topic></topics><start>1100</start><duration>45</duration><room id="5">A08</room><title>Scaling with Ansible</title><abstract>Ansible is a powerful DevOps swiss-army knife tool, very easy to configure and with many extensions built-in.&#13;
&#13;
This talk will quickly introduce the basics of Ansible, then some real-life experience tips on how to use this tool, from setting up dev VMs to multi-server setups.</abstract><description>Infrastructure/Scaling is a topic really close to me, I'd like to have the chance to talk about how we set this up in the company I work for. Our infrastructure is around 10-15 servers,  provisioned on different cloud providers, so a good size infrastructure.&#13;
&#13;
Presentation is going to be divided in 3 parts, first part is going to be focused on comparing sysadmin and devops, then there will be an introduction to the basic concepts of Ansible. I want to spend most on the last part, which is going to give some tips based on our experience with it.&#13;
&#13;
Many ideas will come from this presentation https://speakerdeck.com/fmarani/devops-with-ansible which i gave at DJUGL in London, with a longer session I will have more chances to delve into more detail, especially on how we use it, from vagrant boxes setup to AWS and DigitalOcean boxes, network configuration, software configurations, etc... &#13;
&#13;
I want to offer as many real-life tips as possible, without going too much offtopic as far as Ansible is concerned</description><speakers><speaker id="583"><name>Federico Marani</name><profile>https://ep2014.europython.eu/en/accounts/profile/583/</profile><description></description><image>https://ep2014.europython.eu/site_media/avatars/me_10.jpg</image></speaker></speakers></entry><entry id="110"><category>Talk</category><audience>Novice</audience><topics><topic>Web</topic></topics><start>1100</start><duration>45</duration><room id="1">C01</room><title>Design considerations while Evaluating, Developing, Deploying a distributed task processing system</title><abstract>With the growing world of web, there are numerous use-cases which require tasks to be executed in an asynchronous manner and in a distributed fashion. &#13;
Celery is one of the most robust, scalable, extendable and easy-to-implement frameworks available for distributed task processing. While developing applications using Celery, I have had considerable experience in terms of what design choices one should be aware of while evaluating an existing system or developing one's own system from scratch.</abstract><description>Most of us have our own set of application which require tasks to happen in a distributed fashion or in an asynchronous manner.This talk is going to focus on key aspects of a distributed task processing system, the functionalities, the command and control centre is should offer.&#13;
Every design consideration that I am planning to discuss, will follow with how it is done in Celery.&#13;
&#13;
Along with What Celery is and it's architecture few design choices I am looking forward to discuss are as following :&#13;
&#13;
* Celery and It's architecture.&#13;
	* What is celery ?.&#13;
	* Ridiculously simple to get started with.&#13;
	* Configuration and Extensible.&#13;
	* Everything is message passing.&#13;
* Few use-cases.&#13;
* Task Management:&#13;
	* Routing of tasks:&#13;
		* Based on priority of execution&#13;
		* Based on OS&#13;
		* Based on hardware-capabilities&#13;
	* Conflict Management&#13;
	* Retries:&#13;
		* Exception handling and Expiration&#13;
	* Tracking state of task:&#13;
		* Sent / Received / Started / Succeeded / Failed / Revoked / Retired&#13;
	* Controlling tasks:&#13;
		* Pause / Kill /Delete&#13;
	* Retrying tasks&#13;
	* Exception handling&#13;
		&#13;
* Scheduling capabilities:&#13;
	* Scheduling not just based on time but nature of task too.&#13;
	* Cronbased or Humanized form of entries&#13;
	* Interval based&#13;
	* Immediate execution&#13;
	* Countdown Based&#13;
&#13;
* Worker Management: &#13;
	* Basic functionality in terms of start / shutdown&#13;
	* Inspection of workers&#13;
	* Time-Limits&#13;
	* Auto Scale-up and Scale-Out and also shrink to normal]&#13;
	* Fanout workload to multiple systems&#13;
	* Broadcast message to workers&#13;
&#13;
* Admin and Reporting&#13;
* Monitoring and performance trends of workers&#13;
* Canvas : Designing work flows in Celery&#13;
	* Chains&#13;
	* Groups&#13;
	* Chord&#13;
	* Chunks&#13;
	* Task - Trees&#13;
&#13;
We will also evaluate few other alternatives to understand few missing features that are not yet present in Celery, systems like:&#13;
* ReTask&#13;
* DagoBah </description><speakers><speaker id="99"><name>Konark Modi</name><profile>https://ep2014.europython.eu/en/accounts/profile/99/</profile><description>Konark Modi works as a Senior Engineer with the DataPlatformTeam at MakeMyTrip.com(India&#8217;s leading online travel company). At MakeMyTrip.com he has handled multiple roles related to DevOps and DataPlatforms.&#13;
&#13;
Python comes as a default language for him for tasks of any length and breadth be it DevOps, Automation, Distributed task processing,Data Pipelines, Analysis for any Variety, Velocity  &amp; Volume of Data.&#13;
&#13;
As an activity member of the community, he loves contributing and getting involved at various fronts. Currently he is one of the organizers for PyCon India,the premier conference in India on using and developing the Python programming language.</description><image>https://ep2014.europython.eu/site_media/avatars/profile_pic-resized.jpg</image></speaker></speakers></entry><entry id="2"><category>Talk</category><audience>Advanced</audience><topics><topic>Testing</topic></topics><start>1100</start><duration>45</duration><room id="4">B09</room><title>Don't fear our new robot overlords!</title><abstract>This talk will show you GoldenEye. A setup of a robot, image recognition and Python. What could be better?&#13;
&#13;
GoldenEye uses computer vision to detect icons on an attached mobile device and then tells a robot to tap them. All off these tests are written in python's unittest module and the API is as easy as possible to make writing complex tests an ease.</abstract><description>GoldenEye is our solution for mobile front end tests. Testing on mobile devices can be quite devastating: On iOS you can write front test in JavaScript in Instruments but it is quite impossible to connect Instruments to you CI solution of choice. On Android the situation isn't much better.&#13;
Other front end test frameworks can work with mobile devices (or simulators) but they lack the ability to see. Of course you can check if a color is set correctly, if a frame has the right x and y coordinates but in a world of different screen sizes writing these tests can be quite challenging as well.&#13;
In the end you will always need to look on your screen again and again trying to spot any issues. &#13;
&#13;
GoldenEye takes a different approach. It does not need to run on your development computer, you don't need a Mac for running tests on iOS devices and you can have real touches on your controls. This is archived by using openCV and it's python bindings, Pythons's unittest module and the Tapsterbot, an OpenSource delta robot made with 3D printing and an Arduino controller. To write a test you just take some screenshots on your device, cut out the icons you need to tap or inspect and write a very simple unit test using a high-level API that takes away the hard parts.&#13;
&#13;
WARNING: This talk features a real robot. In case of machine world-domination: RUN!</description><speakers><speaker id="165"><name>Philip Brechler</name><profile>https://ep2014.europython.eu/en/accounts/profile/165/</profile><description>Philip Brechler works as an iOS professional in Berlin since 2011. When he got the chance he used Python with Django for his backends and web projects. In 2011 he created OwnTube, a video CMS based on Django and in in 2012 he created covr.li a website for pretty notebooks, also based on Django.</description><image>https://ep2014.europython.eu/site_media/avatars/_MG_2056_-_Arbeitskopie_2.jpg</image></speaker></speakers></entry><entry id="125"><category>Talk</category><audience>Advanced</audience><topics><topic>Web</topic></topics><start>1100</start><duration>45</duration><room id="2">B05/B06</room><title>gevent: asynchronous I/O made easy</title><abstract>gevent provides highly scalable asynchronous I/O without becoming a nest of callbacks, or even needing code changes.&#13;
&#13;
Daniel will explain how to get started with gevent, discuss patterns for its use and describe the differences with Twisted, Tornado and Tulip/asyncio.</abstract><description>It has been claimed "Callbacks are the new GOTO". Most asynchronous IO libraries use callbacks extensively.&#13;
&#13;
gevent (http://www.gevent.org) uses coroutines to provide highly scalable asynchronous I/O with a synchronous programming model that doesn't need code changes and callbacks. By elegantly monkey patching the Python standard library, both your code and all pure Python libraries become asynchronous too, making a separate collection of protocol implementations (in the style of Twisted) unnecessary.&#13;
&#13;
Code written like this is easier to understand, particularly for more junior developers. Crucially, IO errors can be raised at the right places.&#13;
&#13;
I will be introducing gevent's programming model, why it's easier, walk through simple code samples, and discuss experiences and metaphors for programming with it.&#13;
</description><speakers><speaker id="144"><name>Daniel Pope</name><profile>https://ep2014.europython.eu/en/accounts/profile/144/</profile><description></description><image></image></speaker></speakers></entry><entry id="51"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1100</start><duration>45</duration><room id="3">B07/B08</room><title>Using All These Cores: Transactional Memory in PyPy</title><abstract>PyPy, the Python implementation written in Python, experimentally supports Transactional Memory (TM). The strength of TM is to enable a novel use of multithreading, inheritently safe, and not limited to special use cases like other approaches. This talk will focus on how it works under the hood.</abstract><description>PyPy is a fast alternative Python implementation.  Software Transactional Memory (STM) is a current academic research topic.  Put the two together --brew for a couple of years-- and we get a version of PyPy that runs on multiple cores, without the infamous Global Interpreter Lock (GIL).&#13;
&#13;
The current research is based on a recent new insight that promises to give really good performance.  The speed of STM is generally measured by two factors: the ability to scale with the number of CPUs, and the amount of overhead when compared with other approaches in a single CPU (in this case, with the regular PyPy with the GIL).  Scaling is not really a problem here, but single-CPU performance is --or used to be. This new approach gives a single-threaded overhead that should be very low, maybe 20%, which would definitely be news for STM systems.  Right now (February 2014) we are still implementing it, so we cannot give final numbers yet, but early results on a small interpreter for a custom language are around 15%.  This looks like a deal-changer for STM.&#13;
&#13;
In the talk, I will describe our progress, hopefully along with real numbers and demos.  I will then dive under the hood of PyPy to give an idea about how it works.  I will conclude with a picture of how the future of multi-threaded programming might looks like, for high-level languages like Python.  I will also mention CPython: how hard (or not) it would be to change the CPython source code to use the same approach.</description><speakers><speaker id="119"><name>Armin Rigo</name><profile>https://ep2014.europython.eu/en/accounts/profile/119/</profile><description>Armin Rigo is one of the founders and lead developers of the PyPy project, which began in 2003. He has taken part in all areas, from the Python language definition to the RPython translation framework, including the garbage collector, the tracing just-in-time compiler, and now the Software Transactional Memory part.</description><image>https://ep2014.europython.eu/site_media/avatars/arigo.639x400.png</image></speaker></speakers></entry><entry id="64"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1145</start><duration>45</duration><room id="2">B05/B06</room><title>Performance Python for Numerical Algorithms</title><abstract>This talk is about several approaches to implement high performing numerical algorithms and applications in Python. It introduces into approaches like vectorization, multi-threading, parallelization (CPU/GPU), dynamic compiling, high throughput IO operations.&#13;
&#13;
The approach is a practical one in that every approach is illustrated by specific Python examples.</abstract><description>This talk is about several approaches to implement high performing numerical algorithms and applications in Python. It introduces into approaches like multi-threading, parallelization (CPU/GPU), dynamic compiling, high throughput IO operations.&#13;
&#13;
The approach is a practical one in that every approach is illustrated by specific Python examples.&#13;
&#13;
The talk uses, among others, the following libraries:&#13;
&#13;
* NumPy&#13;
* numexpr&#13;
* IPython.Parallel&#13;
* Numba&#13;
* NumbaPro&#13;
* PyTables</description><speakers><speaker id="730"><name>Dr. Yves J. Hilpisch</name><profile>https://ep2014.europython.eu/en/accounts/profile/730/</profile><description>Dr. Yves J. Hilpisch is the founder and managing partner of The Python Quants GmbH, a privately owned analytics software provider and financial engineering boutique. The Python Quants offer, among others, the "Python Quant Platform" (http://quant-platform.com). Yves is also Lecturer for Mathematical Finance at Saarland University and author of the O'Reilly book "Python for Finance"  as well as of the book "Derivatives Analytics with Python". In addition, Yves organizes the meetups "Python for Quant Finance" (London) and "Python Big Data Analytics" (Berlin). See http://hilpisch.com for further information and links.</description><image>https://ep2014.europython.eu/site_media/avatars/yves.png</image></speaker></speakers></entry><entry id="114"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1145</start><duration>45</duration><room id="3">B07/B08</room><title>Stackless: Recent advancements and future goals</title><abstract>Stackless (formerly known as Stackless-Python) is an enhanced variant of the Python-language. Stackless is best &#13;
known for its lightweight microthreads. But that's not all. In this talk Stackless core developers demonstrate&#13;
recent advancements regarding multi-threading, custom-scheduling, debugging with Stackless and explain future &#13;
plans for Stackless. </abstract><description>Stackless: Recent advancements and future goals&#13;
-------------------------------------------------------&#13;
&#13;
Since Python release 1.5 Stackless Python is an enhanced variant of C-Python.&#13;
Stackless is best known for its addition of lightweight microthreads (tasklets) and &#13;
channels.&#13;
&#13;
Less known are the recent enhancements that became available with Stackless 2.7.6. &#13;
In this talk core Stackless developers demonstrate&#13;
&#13;
 * The improved multi-threading support&#13;
 * How to build custom scheduling primitives based on atomic tasklet operations&#13;
 * The much improved debugger support&#13;
 * ...&#13;
 &#13;
Stackless recently switched the new master repository from hg.python.org/stackless to bitbucket to &#13;
allow for a more open development process. We'll summarise our experience and discuss our&#13;
plans for the future development of Stackless.&#13;
&#13;
The talk will be help by Anselm Kruis and Christian Tismer.&#13;
If we are lucky, we will also welcome Kristj&#225;n Valur J&#243;nsson from Iceland.&#13;
</description><speakers><speaker id="656"><name>Christian Tismer</name><profile>https://ep2014.europython.eu/en/accounts/profile/656/</profile><description>Christian stumbled over Python back in 1996.&#13;
This changed his life:&#13;
&#13;
He&#13;
- created the Starship Python in 1997 (because he had nothing else to share)&#13;
- learned C and C++ in order to&#13;
- became a core developer&#13;
&#13;
He invented Stackless Python in 1998 and tried to change the world a bit.&#13;
Co-founded PyPy in 2003 and worked full-time on it during EU funding.&#13;
&#13;
Currently, his main focus is again on Stackless, while working&#13;
on improving PySide.</description><image>https://ep2014.europython.eu/site_media/avatars/Christian_Tismer_EP2014_small.jpg</image></speaker><speaker id="252"><name>Anselm Kruis</name><profile>https://ep2014.europython.eu/en/accounts/profile/252/</profile><description>Anselm Kruis works as a Senior Solution Architect for science + computing ag, a Bull subsidiary. He started software development 25 years ago and enjoys the simplicity of Python since over 10 years, mostly using Jython and nowadays Stackless Python. If allowed by professional constraints, he is happy to utilise and contribute to open software projects.</description><image>https://ep2014.europython.eu/site_media/avatars/kruis-gr.jpg</image></speaker><speaker id="777"><name>Kristj&#225;n Valur J&#243;nsson</name><profile>https://ep2014.europython.eu/en/accounts/profile/777/</profile><description>Software Architect at CCP Games, and core contributor to Stackless</description><image>https://ep2014.europython.eu/site_media/avatars/KV2_Portrait.jpg</image></speaker></speakers></entry><entry id="44"><category>Talk</category><audience>Expert</audience><topics><topic>Best Practices</topic></topics><start>1145</start><duration>45</duration><room id="4">B09</room><title>DevOps Risk Mitigation: Test Driven Infrastructure</title><abstract>The (perceived) risk of the DevOps is that too many people get the right to "break" the platform.&#13;
&#13;
Test Driven Infrastructure is about adapting proven ideas from our developer colleagues to the development and operations of Infrastructure services like virtualization, OS provisioning, postfix configuration, httpd configuration, ssh tuning, SAN LUN mounting and others.&#13;
&#13;
This talk shows how ImmobilienScout24 utilizes more and more test driven development in IT operations to increase quality and to mitigate the risk of opening up the infrastructure developmen to all developers.</abstract><description>Common wisdom has it that the test effort should be related to the risk of a change. However, the reality is different: Developers build elaborate automated test chains to test every single commit of their application. Admins regularly &#8220;test&#8221; changes on the live platform in production. But which change carries a higher risk of taking the live platform down?&#13;
&#13;
What about the software that runs at the &#8220;lower levels&#8221; of your platform, e.g. systems automation, provisioning, proxy configuration, mail server configuration, database systems etc. An outage of any of those systems can have a financial impact that is as severe as a bug in the &#8220;main&#8221; software!&#13;
One of the biggest learnings that any Ops person can learn from a Dev person is Test Driven Development. Easy to say - difficult to apply is my personal experience with the TDD challenge.&#13;
&#13;
This talk throws some light on recent developments at ImmobilienScout24 that help us to develop the core of our infrastructure services with a test driven approach:&#13;
&#13;
* How to do unit tests, integration tests and systems tests for infrastructure services?&#13;
* How to automatically verify Proxy, DNS, Postfix configurations before deploying them on live servers?&#13;
* How to test &#8220;dangerous&#8221; services like our PXE boot environment or the automated SAN mounting scripts?&#13;
* How to add a little bit of test coverage to everything we do.&#13;
* Test Driven: First write a failing test and then the code that fixes it.&#13;
&#13;
The tools that we use are Bash, Python, Unit Test frameworks and Teamcity for build and test automation.&#13;
&#13;
See http://blog.schlomo.schapiro.org/2013/12/test-driven-infrastructure.html for more about this topic.&#13;
</description><speakers><speaker id="696"><name>Schlomo Schapiro</name><profile>https://ep2014.europython.eu/en/accounts/profile/696/</profile><description>Schlomo Schapiro works as a Systems Architect and Open Source Evangelist at ImmobilienScout24, the leading German real estate market place. Core areas of interest are open source solutions and web operations.&#13;
&#13;
The ImmobilienScout24 web platform is based on Linux, Apache, Tomcat and open standards. We are currently creating a new deployment and management solution for our data center based on RPM packages. The solution is written in Python and Bash and published at http://yadt-project.org.&#13;
&#13;
Schlomo maintains several successful open source projects and is a regular speaker at various conferences. Schlomo is a strong DevOps and web operations advocate and writes regularly for German IT magazines and his BLOG (http://blog.schlomo.schapiro.org). See the homepage on http://www.schapiro.org/schlomo or the profile on http://go.schapiro.org/schlomo for more information.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/Schlomo_Schapiro_Large.jpg</image></speaker></speakers></entry><entry id="7"><category>Talk</category><audience>Novice</audience><topics><topic>Gaming</topic></topics><start>1145</start><duration>45</duration><room id="1">C01</room><title>Brain Waves for Hackers</title><abstract>A new class of cheap consumer EEG devices allows ordinary hackers and even high school students a glimpse into the human brain.&#13;
&#13;
Using the Neurosky Mindwave headset we can read brain waves via bluetooth. In this talk I will present ways to interface with this device and to analyze their data, mostly from the perspective of a Python hacker, and not so much from the perspective of academic research or the development of production-ready software. &#13;
&#13;
I will convey the basic scientific and technical background, keeping in mind the non-medical audience, and touch on several practical applications, especially Neurofeedback and its use for personal mental training and potential therapeutic uses.&#13;
&#13;
The Audience can expect to walk away with a basic knowledge of EEG analysis, Neurofeedback and how to start experimenting with these devices on their own.</abstract><description>This talk will present how to use the "Neurosky Mindwave" headset with python software, and lay out the basic scientific and technical background.&#13;
&#13;
The Mindwave Mobile is a device that can be easily talked to using bluetooth, and it talks a binary protocol which is specifically designed to be useful without  much computing power in the receiving device or advanced knowledge of signal processing. In fact, an Arduino with a few lines of code is perfectly capable of parsing some of the byte stream and reacting to the mental state of the user, while fully-featured python software can do advanced analysis using PyEEG and Pandas.&#13;
&#13;
The same hardware module and protocol is used in the Nekomimi headset (mind-controlled cat ears for cosplay) and some Boardgames (MindFlex).&#13;
&#13;
A python library for interfacing with the headset is presented and will be demonstrated on stage. Mostly kivy applications will be used.&#13;
&#13;
Also I will present some data analysis you can perform with pandas and scipy.&#13;
&#13;
Neurofeedback is a type of mental exercise where a computer uses the EEG data to direct the user towards certain mental states. In the easiest configuration a program would display a bar with the "concentration" level, and the user would learn how to tilt this bar upwards. In more complicated setups a game could react favorably towards states like relaxation or concentration. Using Gamification, Neurofeedback can provide a more engaging experience for children or adults, than other techniques with similar goals, like mindfulness meditation, and the more immediate feedback should enhance the effectiveness of mental training, though that has not been investigated scientifically yet.&#13;
&#13;
Neurofeedback has been shown to be effective (albeit not recommended as sole treatment) in Patients with Attention Deficit Hyperactivity Disorder (ADHD), Epilepsy and Dementia. Some background about these conditions and applications of Neurofeedback to them will be given. The first use of Neurofeedback was done in Cats, during early experiments with EEG electrodes in the 60ies. Cats where conditioned to exhibit certain wave patterns, and later, due to a coincidence, the researchers noticed that the conditioned cats where more resistant to epilepsy-inducing medications. The effect has since been reproduced in humans, in cases where medications did not work sufficiently.&#13;
&#13;
Ample hints on not to treat any of this information as medical advice will be provided.&#13;
&#13;
The goal of this talk is to promote Neurofeedback as a useful mental training and to encourage development of applications around Neurofeedback and the analysis of EEG data, from the perspective of a python hacker.&#13;
&#13;
I gave a similar talk at PyConDe 2013 in Cologne. The new talk will be in English, show some improvements on the software, and more advanced demonstrations.</description><speakers><speaker id="225"><name>Andreas Klostermann</name><profile>https://ep2014.europython.eu/en/accounts/profile/225/</profile><description>I'm a freelance programmer, mostly web application development and student of veterinary medicine.&#13;
&#13;
My main "computing" interests are in data analysis, genomics, bayesian statistics and web development.&#13;
&#13;
My main "medical" interest are small animal medicine and "all animal" genetics.&#13;
&#13;
As a self-help junkie I took an interest to mindfulness based meditation and general mental training. I also developed a guide to memory techniques and mnemonics for use in practical situations.</description><image></image></speaker></speakers></entry><entry id="48"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1145</start><duration>45</duration><room id="5">A08</room><title>Compress Me, Stupid!</title><abstract>Compression is a general technique for reducing the size of datasets that normally lie on disk or that should be sent remotely.  But time has come to use it as a means to accelerate applications that uses in-memory data too.&#13;
&#13;
[Blosc](http://www.blosc.org) is a high-performance meta-compressor that is meant to do that.</abstract><description>Compression is a technique to reduce the number of bits needed to&#13;
represent a given dataset. A very common use-case in the distributed&#13;
digital age is to reduce the size of files in order to reduce the time&#13;
and bandwidth requirements of sending a file from one location to&#13;
another.&#13;
&#13;
There are a large variety of different algorithms and implementations of&#13;
so called "codecs" - a term is derived from the fact that programs that&#13;
implement a compression algorithm commonly constitute of both a&#13;
compressor and a corresponding decompressor. There are many different&#13;
special purpose compressors that exploit specifics in the structure of the&#13;
input data, for example: MP3, Ogg and FLAC for audio data such as music,&#13;
GIF, JPEG and PNG for images and  MPEG for encoding video. Also, there&#13;
are many general purpose codecs that make no assumptions about the&#13;
structure of the data, for example: Zlib(DEFLATE), Bzip2(BWT) and LZMA.&#13;
&#13;
However, and due to the ever growing divide between memory access latency and CPU clock&#13;
speed a new use-case beyond faster file transfers and more efficient use&#13;
of disk-space has emerged: "in-memory compression".&#13;
&#13;
&#13;
Keeping data in RAM that is compressed also means that the CPU has to&#13;
do more work in order to make use of it.  However, if the compressor&#13;
is fast enough, this decompression overhead could pay off, and&#13;
applications could work with compressed data transparently, and so not&#13;
even noticing the slowdown due to the extra effort for&#13;
compression/decompression.&#13;
&#13;
This technique can be very beneficial in a variety of scenarios where&#13;
RAM availability is critical.  For example, in-memory caching systems&#13;
like Memcached or Redis could store more data using the same resources&#13;
thereby optimizing resource usage.  Another use case is to use&#13;
compression for in-memory data containers, &#224; la NumPy's ndarray or&#13;
Pandas' DataFrame, allowing for improved memory usage and potentially&#13;
allow for accelerated computations.&#13;
&#13;
In our talk, we will explain first why we are in a moment of computer&#13;
history that [in-memory compression can be beneficial for modern&#13;
applications] [1].&#13;
&#13;
Then, we will introduce [Blosc] [2], a high speed&#13;
meta-compressor, allowing other existing compressors (BloscLZ, LZ4,&#13;
Snappy or even Zlib) to leverage the SIMD and multithreading framework&#13;
that it provides and help achieving extremely fast operation&#13;
(frequently faster than a plain memcpy() system call).&#13;
&#13;
Finally, we will show some existing data handling libraries ([Bloscpack] [3], [PyTables] [4], [BLZ] [5]) -- all written in Python -- that&#13;
already use Blosc today for fulfilling the promise of faster operations by&#13;
doing in-memory compressing.&#13;
&#13;
[1]: http://www.pytables.org/docs/CISE-12-2-ScientificPro.pdf&#13;
[2]: http://www.blosc.org&#13;
[3]: https://github.com/Blosc/bloscpack&#13;
[4]: http://www.pytables.org&#13;
[5]: http://continuum.io/blog/blz-format</description><speakers><speaker id="575"><name>Valentin Haenel</name><profile>https://ep2014.europython.eu/en/accounts/profile/575/</profile><description> I am a software engineer interested in the architectures of high-performance number crunching with Python. Specifically, I am interested in low-level aspects such interfacing Python with C code, strategies for efficient memory allocation, avoiding redundant memory copies and exploiting the memory hierarchy for accelerated computation. Occasionally, I flirt with machine-learning. In the past I have worked on psychophysics data analysis, large scale brain simulations, analytical engines for business intelligence and large-scale data-center monitoring. I wrote a book about using the Git version control system and have contributed to a diverse selection of over 50 open source projects. I currently reside in Berlin and work as a freelance software engineer and consultant. </description><image>https://ep2014.europython.eu/site_media/avatars/esc.png</image></speaker></speakers></entry><entry id="8"><category></category><audience></audience><topics></topics><start>1230</start><duration>90</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Lunch</title><description></description><speakers></speakers></entry><entry id="75"><category>Talk</category><audience>Advanced</audience><topics><topic>Best Practices</topic></topics><start>1400</start><duration>30</duration><room id="5">A08</room><title>Automatic code reviews</title><abstract>A lot of great Python tools exist to analyse and report on your codebase, but they can require a lot of  initial set up to be useful. Done right, they can be like an automatic code review. This talk will explain how to set up and get the best out of these tools, especially for an existing, mature codebase.</abstract><description>Static analysis tools are a great idea in theory, but are not often really used in practice. These tools usually require quite a lot of initial effort to get set up in a way which produces meaningful output for you or your organisation's particular coding style and values. As a result, it's common to see initial enthusiasm replaced by ignoring the tools.&#13;
&#13;
Such tools can be incredibly beneficial however, and even go so far as to provide an automatic code review, and this talk will explain what kind of benefits you can get from the tools, as well as explain what you can and cannot expect. &#13;
&#13;
This talk is aimed at experienced developers who are interested in improving their coding practices but who have either never tried static analysis tools, or who have not seen the upsides. It will hopefully also be useful to people who do use the tools, perhaps introducing them to new tools or concepts they were not aware of yet.</description><speakers><speaker id="402"><name>Carl Crowder</name><profile>https://ep2014.europython.eu/en/accounts/profile/402/</profile><description>After starting as a Java developer working on web software for Jagex, makers of Runscape, Carl moved to Taptu, a mobile-phone focused search engine. Finally seeing the light by learning Python, and after a year of travelling and freelancing, he worked at a German startup in Munich for two years. Currently, he works as a sysadmin-developer hybrid at Akvo.org while working on https://landscape.io as a side project</description><image>https://ep2014.europython.eu/site_media/avatars/IMG_0112_c.png</image></speaker></speakers></entry><entry id="11"><category>Talk</category><audience>Advanced</audience><topics><topic>Testing</topic></topics><start>1400</start><duration>30</duration><room id="4">B09</room><title>Design Your Tests</title><abstract>While getting started testing often provides noticeable immediate improvement for any developer, it's often not until the realization that tests are things that need *design* to provide maximal benefit that developers begin to appreciate or even *enjoy* them.&#13;
&#13;
We'll investigate how building shallow, transparent layers for your tests makes for better failures, clearer tests, and quicker diagnoses.</abstract><description>* Life span of a test&#13;
    * 5 minute - why does this fail?&#13;
    * 5 day - what is this missing?&#13;
    * 5 week - do I have coverage for this?&#13;
    * 5 month - what's *not* causing this bug?&#13;
&#13;
* Transparent simplicity&#13;
    * one or two "iceberg" layers for meaning&#13;
        * Higher-order assertions - build collections of state that have meaning for the domain in the tests&#13;
        * bulk of the details are in the code itself&#13;
&#13;
        * show an example&#13;
&#13;
    * grouping for organization&#13;
        * Mixins&#13;
&#13;
        * show an example&#13;
&#13;
* unittest issues&#13;
    * assertion/mixin clutter&#13;
    * setUp/tearDown tie grouping to the class layer or to inheritance via super&#13;
        * addCleanup&#13;
    * weak association / lookup-ability between code and its tests&#13;
        * package layout&#13;
        * other conventions&#13;
&#13;
* Alternative approaches&#13;
    * testtools' matchers&#13;
    * py.test `assert` magic</description><speakers><speaker id="204"><name>Julian Berman</name><profile>https://ep2014.europython.eu/en/accounts/profile/204/</profile><description>Julian is the lead developer of the media platform at Magnetic (http://www.magnetic.com/), a frequent contributor to the NYC Python Meetup group and a testing lover.&#13;
&#13;
He can also be found most hours of the day as tos9 on Freenode in more channels than he can count, including #python.</description><image>https://ep2014.europython.eu/site_media/avatars/DSC00083.jpg</image></speaker></speakers></entry><entry id="57"><category>Talk</category><audience>Novice</audience><topics><topic>Gaming</topic></topics><start>1400</start><duration>30</duration><room id="2">B05/B06</room><title>3D sensors and Python: A space odyssey</title><abstract>This talk will show how to build a simple open source based NUI (Natural User Interface)  game with 3D Sensors, incorporating PyOpenNI with PyGame and WebGL.&#13;
OpenNI allows you operate several 3D sensors, enabling hardware independent game development (supported 3D sensors are Microsoft Kinect, PrimeSense Carmine or Asus XTion). It also runs on Linux, Mac OS X and Windows.</abstract><description>This talk will start with a brief introduction to 3D Sensors and OpenNI. Then we&#8217;ll surf into PyOpenNI,  features such as the skeleton, hand and gesture tracking, RGB and depth video. Every topic will be presented with practical demos. The talk will end with a demo integrating WebGL (THREE.JS), 3D sensors, Flask and ZMQ to produce a simple fully open source based NUI game.&#13;
&#13;
Some simple demos of PyOpenNI and PyGame can be found at [1](http://www.youtube.com/watch?v=wI2ktioiPY8) and [2](http://youtu.be/3e8jibGUQ2Q)&#13;
&#13;
Attendees will not only learn about game related technologies but also about innovative ways of doing domotics, cinema &amp; art, Interactive visualization, scientific research, educations, etc.&#13;
&#13;
3D Sensors will be available for testing during the event - you can get yours for about 80 to 140 Euros (depending on the brand). Slides and demo code will be available at Github.&#13;
&#13;
Talk structure:&#13;
&#13;
* Introduction: hardware and OpenNI goodies and a tale of PCL (5&#8217;)&#13;
* Hands On PyOpenNI&#13;
    * Normal and Depth camera - basics concepts and small demo (5&#8217;)&#13;
    * Skeleton - basics concepts and small demo. (5&#8217;)&#13;
	* Hand &amp; gesture - basics concepts and small demo. (5&#8217;)&#13;
* Final Demo&#13;
	* What we&#8217;re going to use? Flask, ZMQ, THREE.JS, PyOpenNI. (6&#8217;)&#13;
* Q&amp;A. (4&#8217;)</description><speakers><speaker id="55"><name>Celia Cintas</name><profile>https://ep2014.europython.eu/en/accounts/profile/55/</profile><description>Celia Cintas is a PhD student in Computer Science working at CENPAT on "Human Evolutionary Biology" research group. Focused on 2 and 3D landmarking, reconstruction and visualization.&#13;
Co organizer of SciPyCon Argentina 2013 and 2014.&#13;
Free software advocate.&#13;
Assistant Professor at UNPSJB in Fundamentals of Computer Science and Business Intelligence.</description><image>https://ep2014.europython.eu/site_media/avatars/avatar_.png</image></speaker></speakers></entry><entry id="131"><category>Talk</category><audience>Novice</audience><topics><topic>Web</topic></topics><start>1400</start><duration>30</duration><room id="3">B07/B08</room><title>An HTTP request's journey through a platform-as-a-service</title><abstract>PythonAnywhere hosts tens of thousands of Python web applications, with traffic ranging from a couple of hits a week to dozens of hits a second.  Hosting this many sites reliably at a reasonable cost requires a well-designed infrastructure, but it uses the same standard components as many other Python-based websites.  We've built our stack on GNU/Linux, nginx, uWSGI, Redis, and Lua -- all managed with Python.  In this talk we'll give a high-level overview of how it all works, by tracing how a request goes from the browser to the Python application and its response goes back again.  As well as showing how a fairly large deployment works, we'll give tips on scaling and share a few insights that may help people running smaller sites discover how they can speed things up.</abstract><description>PythonAnywhere hosts tens of thousands of Python web applications, with traffic ranging from a couple of hits a week to dozens of hits a second.  Hosting this many sites reliably at a reasonable cost requires a well-designed infrastructure, but it uses the same standard components as many other Python-based websites.  We've built our stack on GNU/Linux, nginx, uWSGI, Redis, and Lua -- all managed with Python.  In this talk we'll give a high-level overview of how it all works, by tracing how a request goes from the browser to the Python application and its response goes back again.  As well as showing how a fairly large deployment works, we'll give tips on scaling and share a few insights that may help people running smaller sites discover how they can speed things up.</description><speakers><speaker id="376"><name>Giles Thomas</name><profile>https://ep2014.europython.eu/en/accounts/profile/376/</profile><description></description><image></image></speaker></speakers></entry><entry id="36"><category>Talk</category><audience>Novice</audience><topics><topic>Best Practices</topic></topics><start>1400</start><duration>30</duration><room id="1">C01</room><title>How to Setup a new Python Project</title><abstract>Setting up a new Python project from scratch can be quite hard. How to structure your files and directories. Where should my packages, modules, documentation and unit tests go? How do I configure setup.py, Sphinx and so on? We provide proven answers!</abstract><description>Whenever a Python beginner starts with its own project he or she is confronted with the same technical questions. Questions about a well thought out directory structure to hold all the files. How setup.py needs to be configured and even what it is capable of like specifying entry_points and other goodies. We show from the experience of our yearslong work with Python how to structure your Python project in terms of folders, files, modules and packages. How to configure setup.py to specify your requirements, to use it with nosetests, with Sphinx and so on. We also elaborate on the usage of Git and Versioneer (https://github.com/warner/python-versioneer) to help you version your package.</description><speakers><speaker id="430"><name>Felix Wick</name><profile>https://ep2014.europython.eu/en/accounts/profile/430/</profile><description>Felix Wick did his diploma and PhD in physics at the Karlsruhe Institute of Technology. The topic of his research was experimental particle physics with focus on statistical data analysis. Then he changed to economy and joined the company Blue Yonder in 2011 to work as a Data Scientist.</description><image>https://ep2014.europython.eu/site_media/avatars/felix1.jpg</image></speaker><speaker id="375"><name>Florian Wilhelm</name><profile>https://ep2014.europython.eu/en/accounts/profile/375/</profile><description>Data Scientist with a mathematical background. PhD from the Karlsruher Institute of Technology in Applied Mathematics. &#13;
Focus on mathematical modelling and machine learning as well as business analytics. Years of experience in several customer projects at Blue Yonder.</description><image>https://ep2014.europython.eu/site_media/avatars/Foto_400dpi.jpg</image></speaker></speakers></entry><entry id="67"><category>Training</category><audience>Novice</audience><topics></topics><start>1400</start><duration>180</duration><room id="6">A03/A04</room><title>Learn Test-Driven-Development and Django by building a simple web application from scratch.</title><abstract>## Part 1 -- Getting Django set up using a Functional Test&#13;
&#13;
We start by writing a minimal functional test using Selenium, and using it to test that we've got Django installed, and its dev server up and running on our local PC.&#13;
&#13;
We make our initial commit with the Django project and its functional test file. The Testing Goat is introduced.&#13;
&#13;
## Part 2 -- Switching to unittest&#13;
&#13;
We convert our FT to using the unittest module, including setUp, tearDown and some of the unittest assertion helper functions.&#13;
&#13;
## Part 3 -- Unit tests for a simple front page&#13;
&#13;
Next we start building the front page of our site. We learn how to use the Django test runner, and how to write a unit test which tests a Django view.&#13;
We do some intitial config in Django's settings.py, and then learn about urls.py and views.py.&#13;
We learn the feel of the unit test - code cycle, where we write code with small, incremental changes, re-running the tests each time.&#13;
&#13;
## Part 4 -- Switch to templates, refactoring, and discuss TDD philosophy&#13;
&#13;
A moment's reflection on what we test and why -- what functional tests are for, how they differ from unit tests, what we should and shouldn't test, and discuss the merits of testing trivial functions.&#13;
&#13;
We then switch our home page view from building HTML out of strings to using a template.&#13;
We learn how Django templates work, and what "proper" refactoring is. Refactoring Cat is introduced&#13;
&#13;
## Part 5 -- Processing user input using forms, POST and database models&#13;
&#13;
We learn how to use Selenium to simulate user input to our site.&#13;
We start to build up a simple solution to process user submissions using an HTML form, a POST request. We take a few wrong turns along the way, and see how TDD guides us towards the right answer.&#13;
&#13;
## Part 6 -- Better design using related models and multiple views.&#13;
&#13;
We fix our broken implementation from the previous section, using incremental, step-by-step changes to the code.&#13;
We learn how to make changes to the code in such a way that we always go from working state to working state.&#13;
&#13;
We also learn about foreign key relationships, and a simple REST-ish URL structure, with several simple views each doing one job well.&#13;
&#13;
Further topics, if time permits:&#13;
&#13;
- layout and styling using Bootstrap CSS framework&#13;
- mocks&#13;
- continuous integration (Jenkins introduction)&#13;
- deployment!&#13;
</abstract><description>We'll cover unit testing, Django models, views and templates, as well as using Selenium to open up a real web browser for functional tests.&#13;
This talk is intended for audiences new to TDD, new to Django, and even new to Python!&#13;
&#13;
The aim is to cover the basics of setting up a simple Django site, but using full, rigorous TDD at every step along the way.&#13;
The material covered in this training is all available online as part of Harry Percival's great book ["Obey the testing goat"](http://chimera.labs.oreilly.com/books/1234000000754)&#13;
&#13;
&#13;
We'll learn how to set up functional tests with Selenium, how to set up Django, how to run Django unit tests, how TDD actually works in practice, the unit test / code cycle where we re-run the tests after each tiny, incremental change to the code, as well as all the basics of Django.&#13;
We'll talk about what to test, what not to test, what the point of all this testing is anyway, and I promise to make it all at least moderately entertaining.&#13;
&#13;
Plus it's all in Python 3!&#13;
&#13;
It is absolutely vital that you come with the required software pre-installed on your PC.&#13;
&#13;
So, make sure you have the following installed on your Mac/Linux machine:&#13;
&#13;
- Python  3.3&#13;
- Git&#13;
- Firefox&#13;
- Selenium&#13;
- Django &gt;= 1.6&#13;
&#13;
Have a look at the section of the book for the [required software installations](http://chimera.labs.oreilly.com/books/1234000000754/pr02.html#_required_software_installations) for more detailed instructions.&#13;
</description><speakers><speaker id="251"><name>Andrea Crotti</name><profile>https://ep2014.europython.eu/en/accounts/profile/251/</profile><description>I'm currently working as Python/Django developer in London after other Python experiences in the aerospace and hardware industries.&#13;
&#13;
I started to use Python 7 years ago and it still does not stop to amaze me how much I can get done with so little elegant code.&#13;
&#13;
I've been attending Python conferences in the last few years and enjoyed giving talks about various topics, from decorators to TDD.</description><image>https://ep2014.europython.eu/site_media/avatars/andrea_face_1.jpg</image></speaker></speakers></entry><entry id="134"><category>Training</category><audience>Advanced</audience><topics></topics><start>1400</start><duration>180</duration><room id="7">A05/A06</room><title>Test driven development of a horizontal scaling REST-Service with Pyramids,  Crate and SQLAlchemy</title><abstract>"In this workshop we will build a fully shared nothing web service from scratch with the following tools:&#13;
- Buildout software build system&#13;
- Pyramids web framework&#13;
- Crate data store&#13;
- SQLAlchemy the ORM&#13;
- Gevent network library&#13;
- NGINX web server&#13;
&#13;
We will learn about how a simple application can be developed and tested in a sandboxed environment and then deployed to a multi-node&#13;
cluster leaveraging a shared nothing data store. Our goal is to make any computer in the room part of the cluster to provide compute and&#13;
storage power to our service.&#13;
&#13;
Prerequesits:&#13;
- Mac or Linux Operating System would be best&#13;
- Python 3.4 and Java 7 installed&#13;
- A user on GitHub for sharing our code&#13;
- Basic Python and Web knowledge&#13;
&#13;
Agenda:&#13;
- Introduction about the planned application&#13;
- Creating the full-stack development sandbox.&#13;
- Setup Integration Tests using the full software stack.&#13;
- Programming the service endpoints&#13;
- Build one cluster with all computers in the room."</abstract><description>"In this workshop we will build a fully shared nothing web service from scratch with the following tools:&#13;
- Buildout software build system&#13;
- Pyramids web framework&#13;
- Crate data store&#13;
- SQLAlchemy the ORM&#13;
- Gevent network library&#13;
- NGINX web server&#13;
&#13;
We will learn about how a simple application can be developed and tested in a sandboxed environment and then deployed to a multi-node&#13;
cluster leaveraging a shared nothing data store. Our goal is to make any computer in the room part of the cluster to provide compute and&#13;
storage power to our service.&#13;
&#13;
Prerequesits:&#13;
- Mac or Linux Operating System would be best&#13;
- Python 3.4 and Java 7 installed&#13;
- A user on GitHub for sharing our code&#13;
- Basic Python and Web knowledge&#13;
&#13;
Agenda:&#13;
- Introduction about the planned application&#13;
- Creating the full-stack development sandbox.&#13;
- Setup Integration Tests using the full software stack.&#13;
- Programming the service endpoints&#13;
- Build one cluster with all computers in the room."</description><speakers><speaker id="1583"><name>To Be Announced</name><profile>https://ep2014.europython.eu/en/accounts/profile/1583/</profile><description>The speaker for this talk will be announced later.</description><image></image></speaker></speakers></entry><entry id="132"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1430</start><duration>30</duration><room id="3">B07/B08</room><title>Managing the Cloud with a Few Lines of Python</title><abstract>One of the advantages of cloud computing is that resources can be enabled or disabled dynamically. &#13;
E. g. is an distributed application short on compute power one can easily add more. But who wants to do that by hand? Python is a perfect fit to control the cloud. &#13;
The talk introduces the package Boto [0] which offers an easy API to manage most of the Amazon Web Services (AWS) as well as a number of command line tools. &#13;
First some usage examples are shown to introduce the concepts behind Boto. &#13;
For that a few virtual instances with different configurations are launched, and the use of the storage service S3 is briefly introduced. &#13;
Based on that a scalable continuous integration system controlled by Boto is developed to show how easy all the required services can be used from Python. &#13;
Most of the examples will be demonstrated during the talk. They should be easily adoptable for similar use cases or serve as an starting point for more different ones.</abstract><description>"One of the advantages of cloud computing is that resources can be enabled or disabled dynamically. &#13;
E. g. is an distributed application short on compute power one can easily add more. But who wants to do that by hand? Python is a perfect fit to control the cloud. &#13;
The talk introduces the package Boto [0] which offers an easy API to manage most of the Amazon Web Services (AWS) as well as a number of command line tools. &#13;
First some usage examples are shown to introduce the concepts behind Boto. &#13;
For that a few virtual instances with different configurations are launched, and the use of the storage service S3 is briefly introduced. &#13;
Based on that a scalable continuous integration system controlled by Boto is developed to show how easy all the required services can be used from Python. &#13;
Most of the examples will be demonstrated during the talk. They should be easily adoptable for similar use cases or serve as an starting point for more different ones."</description><speakers><speaker id="1228"><name>Frank Becker</name><profile>https://ep2014.europython.eu/en/accounts/profile/1228/</profile><description></description><image></image></speaker></speakers></entry><entry id="83"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1430</start><duration>30</duration><room id="4">B09</room><title>Identifying Bugs Before Runtime With Jedi</title><abstract>Finding bugs before runtime has been an incredibly tedious task in Python. [Jedi][1] is an autocompletion library with interesting capabilities: It understands a lot of the dynamic features of Python. I will show you how we can use the force of (the) Jedi to identify bugs in your Python code. It's not just another pylint. It's way better.&#13;
&#13;
[1]: https://github.com/davidhalter/jedi</abstract><description>Jedi ([https://github.com/davidhalter/jedi][1]) is an autocompletion library for Python that has gained quite a following over the last year. There are a couple of plugins for the most popular editors (VIM, Sublime, Emacs, etc.) and mainstream IDEs like Spyder are switching to Jedi.&#13;
&#13;
Jedi basically tries to redefine the boundaries of autocompletion in dynamic languages. Most people still think that there's no hope for decent autocompletion in Python. This talk will try to argue the opposite, that decent autocompletion is very close.&#13;
&#13;
While the first part will be about Jedi, the second part of this talk will discuss the future of dynamic analysis. Dynamic Analysis is what I call the parts that static analysis doesn't cover. The hope is to generate a kind of "compiler" that doesn't execute code but reports additional bugs in your code (AttributeErrors and the like). &#13;
&#13;
I still have to work out the details of the presentation. I also have to add that Jedi I'm currently working full-time on Jedi and that there's going to be some major improvements until the conference. Autocompletion and static/dynamic analysis as well as refactoring are hugely important tools for a dynamic language IMHO, because they can improve the only big disadvantage compared to static languages: Finding bugs before running your tool.&#13;
&#13;
BTW: I could also do a long talk if requested, to also discuss static analysis and refactoring in depth.&#13;
&#13;
[1]: https://github.com/davidhalter/jedi</description><speakers><speaker id="746"><name>David Halter</name><profile>https://ep2014.europython.eu/en/accounts/profile/746/</profile><description>Dave Halter is currently working as a full time Python Open Source engineer. He has started the Jedi library two years ago. Jedi improves the state of autocompletion for the Python ecosystem. He's also a heavy VIM user, maintains the jedi-vim library and contributes to a few other Python projects.</description><image>https://ep2014.europython.eu/site_media/avatars/2Z0B2344.jpg</image></speaker></speakers></entry><entry id="30"><category>Talk</category><audience>Novice</audience><topics><topic>System Administration</topic></topics><start>1430</start><duration>30</duration><room id="2">B05/B06</room><title>Supercharge your development environment using Docker</title><abstract>These days applications are getting more and more complex. It's becoming&#13;
quite difficult to keep track of all the different components an application&#13;
needs to function (a database, an AMQP, a web server, a document store...). It keeps getting harder and harder to setup new development environments and to bring new developers into the team. Stuff works on one dev machine but doesn't on others? Code breaks often when deployed to production even though all tests were passing and it worked on the dev machine?&#13;
&#13;
The idea of this talk is to convey how important it is that we have our development environment as close to production as possible. That means setting up all those various services on your laptop/workstation.&#13;
&#13;
In this talk I am going to show how to utilize light weight lxc containers&#13;
using docker, and make your development process much more straightforward. How to share container images among your development team and be sure that everyone is running the exact same stack. Do all this without hogging too many resources, without the need for complex provisioning scripts and management systems. And above all else, how to do it fast!</abstract><description>Rough Guidelines:&#13;
&#13;
1. Describe what is LXC  (Linux containers)&#13;
2. Benefits of using containers instead of traditional VM's&#13;
2. Explain where Docker comes in&#13;
3. Show how to build simple containers using Dockefile syntax&#13;
4. What are container images and how to share them&#13;
5. How to share private container images&#13;
6. Tips and tricks on how to automate </description><speakers><speaker id="429"><name>Deni Bertovic</name><profile>https://ep2014.europython.eu/en/accounts/profile/429/</profile><description>Deni is a Software Engineer from Zagreb/Croatia, currently focusing mainly on Python, but enjoys learning about Clojure, Haskell and FP languages in general. Deni likes to do Sysadmin stuff with special interest in virtualization, continuous deployment and automating  everything he can. &#13;
When he's not hacking on open source, he spends most of his time happily coding away at GoodCode.io.</description><image>https://ep2014.europython.eu/site_media/avatars/me_2.jpg</image></speaker></speakers></entry><entry id="26"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1430</start><duration>30</duration><room id="5">A08</room><title>Python refactoring with Rope and Traad</title><abstract>Rope is a powerful Python refactoring library. Traad (Norwegian for &#8220;thread&#8221;) is a tool which makes it simpler to integrate rope into IDEs via a simple HTTP API. In this session we&#8217;ll look at how traad and rope work together and how traad integrates with at least one popular editor.&#13;
</abstract><description>Python is a modern, dynamic language which is growing in popularity, but tool support for it is sometime lacking or only available in specific environments. For refactoring and other common IDE functions, however, the powerful open-source rope library provides a set of tools which are designed to be integrated into almost any programming environment. Rope supports most common refactorings, such as renaming and method extraction, but also more Python-specific refactorings, such as import organization. Rope&#8217;s underlying code analysis engine also allows it to do things like locating method definitions and generating auto-completion suggestions.&#13;
&#13;
While rope is designed to be used from many environments, it&#8217;s not always easy or ideal to integrate rope directly into other programs. Traad  (Norwegian for &#8220;thread&#8221;) is another open-source project that addresses this problem by wrapping rope into a simple client-server model so that client programs (IDEs, editors, etc.) can perform refactorings without needing to embed rope directly. This simplifies dependencies, makes clients more robust in the face of errors, eases traad client development, and even allows clients to do things like switch between Python 2 and 3 refactoring in the same session.&#13;
&#13;
In this session we&#8217;ll look at how rope operates, and we&#8217;ll see how traad wraps it to provide an easier integration interface. The audience will get enough information to start using rope themselves, either directly or via traad, and they&#8217;ll see how to use traad for integrating rope into their own environments. More generally, we&#8217;ll look at why client-server refactoring tools might be preferable to the more standard approach of direct embedding. &#13;
</description><speakers><speaker id="382"><name>Austin Bingham</name><profile>https://ep2014.europython.eu/en/accounts/profile/382/</profile><description>Austin is a founding director of Sixty North, a software consulting, training, and application development company. A native of Texas, in 2008 Austin moved to Stavanger, Norway where he helped develop industry-leading oil reservoir modeling software in C++ and Python. Prior to that he worked at National Instruments developing LabVIEW, at Applied Research Labs (Univ. of Texas at Austin) developing sonar systems for the U.S. Navy, and at a number of telecommunications companies. He is an experienced presenter and teacher, having spoken at numerous conferences, software groups, and internal corporate venues. Austin is also an active member of the open source community, contributing regularly to various Python and Emacs projects, and he&#8217;s the founder of Stavanger Software Developers, one of the largest and most active social software groups in Stavanger. Austin holds a Master of Science in Computer Engineering from the University of Texas at Austin.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/austin_800x1100.jpg</image></speaker></speakers></entry><entry id="98"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1430</start><duration>30</duration><room id="1">C01</room><title>Getting involved in Open Source: A Beginner&#8217;s Perspective</title><abstract>Two beginner open source developers discuss how they got started, what are the obstacles that new developers face while getting started, what can maintainers do to get more newcomers involved in their open source projects.</abstract><description>The last summer that is in 2013 both of us had a hefty summer filled with lots of code throughout. This talk is about our experience and how it helped model our perspective on open source Projects.&#13;
&#13;
Who are we?&#13;
==========&#13;
A-bit-geeky team of two undergrads in their Junior Year at College, pursuing a major in Computer Science and Engineering for the love of it, having a crush on open source.&#13;
The two of us successfully completed the 3-month long Summer Of Code (Sponsored by Google) with MoinMoin Wiki and OpenHatch, respectively and have been a part of the active contributor community ever since.&#13;
&#13;
How did we get started with open source?&#13;
=======================================&#13;
We'll discuss &#13;
&#13;
- How did we make our first open source contribution?&#13;
- What difficulties did we face?&#13;
- How was the overall experience? &#13;
- What did we learn?&#13;
&#13;
&#13;
A Discussion on the obstacles faced by people new to open source&#13;
================================================================&#13;
We'll discuss&#13;
&#13;
- About the lack of knowledge about how a open source project actually works.&#13;
- About the lack of awareness about the ROI (Return of investment) on being involved with an open source organization.&#13;
- About the lack of communication and/or friendliness in certain open source communities.&#13;
- About the steep learning curve some people face. &#13;
&#13;
&#13;
What can maintainers do to help new contributors get started?&#13;
=============================================================&#13;
We'll discuss&#13;
&#13;
- On virtues of a not-so-sucky documentation. It might often involve asking for reviews from young contributors / asking yourself, "could I have understood this before i became a ninja?"&#13;
- Our views on the mystery behind office hours for an open source organization.&#13;
- About increasing participation in mailing lists and the IRC.&#13;
- About making new contributors feel welcome. &#13;
- Use of blogging as a platform to promote your unique ideas.&#13;
</description><speakers><speaker id="400"><name>Rishabh Raj</name><profile>https://ep2014.europython.eu/en/accounts/profile/400/</profile><description></description><image>https://ep2014.europython.eu/site_media/avatars/propic.jpg</image></speaker><speaker id="31"><name>Tarashish Mishra</name><profile>https://ep2014.europython.eu/en/accounts/profile/31/</profile><description>Tarashish Mishra is a web developer in making based in Bhubaneswar, India. He is studying computer science as an undergraduate student. He loves making web application and scraping web pages with Python. He tinkers with arduino and helps people learn to code in free time. </description><image>https://ep2014.europython.eu/site_media/avatars/pic.jpg</image></speaker></speakers></entry><entry id="1"><category>Talk</category><audience>Advanced</audience><topics><topic>Best Practices</topic></topics><start>1500</start><duration>30</duration><room id="5">A08</room><title>Growing Open Source Seeds</title><abstract>An in-depth review of the stages that most open source projects go though, and the decisions their maintainers face. Requests will be used as an example &#8212; lessons learned and best practices will be covered. </abstract><description>In addition to the abstract above,  here's the full slide deck:&#13;
https://speakerdeck.com/kennethreitz/growing-open-source-seeds&#13;
&#13;
This talk is also based on a blog post, which should give you a great idea of what the talk is about:&#13;
&#13;
http://kennethreitz.org/growing-open-source-seeds/</description><speakers><speaker id="179"><name>Kenneth Reitz</name><profile>https://ep2014.europython.eu/en/accounts/profile/179/</profile><description>Software Engineer, Photographer, and Artist. Author of Python Requests.  </description><image>https://ep2014.europython.eu/site_media/avatars/kr.png</image></speaker></speakers></entry><entry id="135"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1500</start><duration>30</duration><room id="3">B07/B08</room><title>How to become an Agile company - case study</title><abstract>The STX Next story has the classic arc of &#8220;zero to hero.&#8221; During the last 9 years, STX Next has grown from a small business with a handful of developers, to one of the biggest Python companies in Europe, and a leading proponent of agile and scrum methodologies. We feel that now is the best moment to share our experiences in implementing effective, agile development processes in a company of nearly 100 developers. Maciej Dziergwa will be discussing how he&#8217;s grown his business, what challenges there are today in python development, and how he plans to take his company to the next level. Especially we want to spread our ideas of building de-localized teams/frequently changing teams/teams with young members that learn rapidly making synergy effect. Join us during our Business Day on 23th July 2014! Remember that 2+2 can be much more than 4...</abstract><description>The STX Next story has the classic arc of &#8220;zero to hero.&#8221; During the last 9 years, STX Next has grown from a small business with a handful of developers, to one of the biggest Python companies in Europe, and a leading proponent of agile and scrum methodologies. We feel that now is the best moment to share our experiences in implementing effective, agile development processes in a company of nearly 100 developers. Maciej Dziergwa will be discussing how he&#8217;s grown his business, what challenges there are today in python development, and how he plans to take his company to the next level. Especially we want to spread our ideas of building de-localized teams/frequently changing teams/teams with young members that learn rapidly making synergy effect. Join us during our Business Day on 23th July 2014! Remember that 2+2 can be much more than 4...</description><speakers><speaker id="1583"><name>To Be Announced</name><profile>https://ep2014.europython.eu/en/accounts/profile/1583/</profile><description>The speaker for this talk will be announced later.</description><image></image></speaker></speakers></entry><entry id="5"><category>Talk</category><audience>Novice</audience><topics><topic>System Administration</topic></topics><start>1500</start><duration>30</duration><room id="2">B05/B06</room><title>For lack of a better name(server): DNS Explained</title><abstract>You've deployed! But your friends can't see it - what's wrong? I'm betting DNS. Maybe you've fixed a couple of entries, point some records to hostnames, waited patiently for new domains to resolve only to notice your nameservers are incorrect. But what actually goes on with DNS? Come to this talk to find out how DNS works, and how to interact and create a DNS with Python. </abstract><description>Following instructions of what entries to create where is easy enough when using a PaaS.&#13;
&#13;
But DNS is hard &#8211; deployment issues always seem to come down to DNS.&#13;
&#13;
A solid understanding of DNS will not only help with deploying your applications, but will also give a greater understanding of how the internet works, and more generally, distributed systems.&#13;
&#13;
In this talk, you will learn what DNS is, how it works and how to communicate with it, and how Python can make both interacting and spinning up your own DNS server simple (I swear!).  &#13;
&#13;
Outline:&#13;
&#13;
* Intro (1-2m)&#13;
* What DNS is (5 min)&#13;
    * URL -&gt; IP addr, e.g. "phonebook" lookup (obligatory pun: Call me, Maybe?)&#13;
    * hierarchical system &amp; resolution sequence (local DNS cache/resolver, ISP resolver, recursive DNS search)&#13;
    * popular types (primary, secondary/slave, forwarding, authoritative only, etc)&#13;
    * System components: what makes a DNS?&#13;
* How to communicate with DNS (3 min)&#13;
    * Protocol: UDP&#13;
    * Operations: CRUD&#13;
    * Resource records (A, AAAA, CNAME, SOA, SRV, etc)&#13;
    * tools: dig/nsupdate/nslookup&#13;
* Security overview (3min) (disclaimer: NOT a DNS security expert, not planning to get into the details here)&#13;
    * Server-Server, DynDNS: TSIG/GSS-TSIG&#13;
    * Server-Client: DNSSEC&#13;
* Python + DNS (10 min)&#13;
    * plain UDP query in Python (no 3rd-party libraries/no magic)&#13;
    * Interacting with a DNS w/ Python (dnspython.py)&#13;
    * Sample DNS server with Twisted&#13;
    * "fake" demo (either local or pre-recorded screen cast) of querying/updating/etc of the Twisted DNS&#13;
* Wrap up - resources page, github links, etc (1min)&#13;
* Q&amp;A - ~5 min </description><speakers><speaker id="212"><name>Lynn Root</name><profile>https://ep2014.europython.eu/en/accounts/profile/212/</profile><description>I am a backend engineer for Spotify, located in San Francisco, California. I am also the founder/leader of PyLadies SF, a Python Software Foundation board member, Django Software Foundation member, and a caffeine &amp; bacon addict.</description><image>https://ep2014.europython.eu/site_media/avatars/me_1.jpeg</image></speaker></speakers></entry><entry id="12"><category>Talk</category><audience>Novice</audience><topics><topic>Testing</topic></topics><start>1500</start><duration>30</duration><room id="4">B09</room><title>Python in system testing</title><abstract>When you think about Python+testing, you usually think about testing your code - unittests, mostly. But it is not the only case! When you have a big system, you need to test it on much higher level - if only to check if all the components are wired in the right way. You may do it manually, but it is tedious and time-consuming - so you want to automate it. And here comes Python - the language of choice in many QA departments.</abstract><description>When you think about Python+testing, you usually think about testing your code - unittests, mostly. But it is not the only case! When you have a big system, you need to test it on much higher level - if only to check if all the components are wired in the right way. You may do it manually, but it is tedious and time-consuming - so you want to automate it. And here comes Python - the language of choice in many QA departments.&#13;
&#13;
I will tell about differences between unittesting and system testing which result in totally different requirements on test management/running systems. I will tell how we use Python (and a little why) to automate our work. Finally, I will tell a little about my "idee fixe" - a framework for system testing written in Python.</description><speakers><speaker id="314"><name>Katarzyna Jachim</name><profile>https://ep2014.europython.eu/en/accounts/profile/314/</profile><description>Quality Engineer by choice, Python fanboy, coding style freak.&#13;
&#13;
Katarzyna graduated from maths &amp; computer science from University of Warsaw. She was a PhD student in maths for a while, then wandered around in different companies and different IT-related jobs until she ended in a QA team and understood that this is the right job for her.&#13;
&#13;
Katarzyna has been using Python for 5 years, all this time for writing automated system/integration tests. First, for 9LivesData (NEC contractor), now, for 1.5 year, for Red Hat, where she is in RHEVM QE team.</description><image>https://ep2014.europython.eu/site_media/avatars/kasiazt_640x427_1.jpg</image></speaker></speakers></entry><entry id="33"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1500</start><duration>30</duration><room id="1">C01</room><title>I want to help! How to make your first contribution to open-source.</title><abstract>Do you like open-source? Would you like to give back somehow but are not sure what to do or where to start? Together we will look at the usual workflow for making any kind of contribution, using a real patch as an example.</abstract><description>This talk aims to show at a high-level what is the process for contributing to most open-source projects. We will go from discovering a project to how to find the contributor guidelines, prepare your contribution for submission and what happens next. The general principles will be illustrated with an example from the speaker's first contribution to OpenStack.&#13;
&#13;
The target audience for the talk is people who have never contributed to open-source, though they would like to. Although the example will be a code contribution, the process as described applies to all kinds of contributions.</description><speakers><speaker id="377"><name>Julie Pichon</name><profile>https://ep2014.europython.eu/en/accounts/profile/377/</profile><description>Julie is a software engineer at Red Hat and works on Horizon, the web dashboard for OpenStack. A big open-source supporter, she likes to get involved in projects aiming to help newcomers get started contributing to open-source. </description><image>https://ep2014.europython.eu/site_media/avatars/julie_pichon.JPG</image></speaker></speakers></entry><entry id="15"><category></category><audience></audience><topics></topics><start>1530</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Coffee Break</title><description></description><speakers></speakers></entry><entry id="25"><category></category><audience></audience><topics></topics><start>1600</start><duration>90</duration><room id="2">B05/B06</room><title>Lightning Talks</title><description></description><speakers></speakers></entry><entry id="63"><category></category><audience></audience><topics></topics><start>1900</start><duration>30</duration><room>ALL</room><title>Conference Dinner</title><description></description><speakers></speakers></entry></day><day date="2014-07-24"><entry id="25"><category>Talk</category><audience>Novice</audience><topics><topic>Web</topic></topics><start>1000</start><duration>30</duration><room id="4">B09</room><title>Eve - REST APIs for Humans&#8482;</title><abstract>Powered by Flask, Redis, MongoDB and good intentions the [Eve REST API framework](http://python-eve.org) allows to effortlessly build and deploy highly customizable, fully featured RESTful Web Services. The talk will introduce the project and its community, recount why and how it's being developed, and show the road ahead.</abstract><description>Nowadays everyone has data stored somewhere and needs to expose it through a Web API, possibly a RESTful one. [Eve](http://python-eve.org) is the BSD-licensed, Flask-powered RESTful application and framework that allows to effortlessly build and deploy highly customizable, fully freatured RESTful Web Services. Eve features a robust, feature rich, REST-centered API implementation. MongoDB support comes out of the box and community-driven efforts to deliver ElasticSearch and SQLAlchemy data layers are ongoing. Eve approach is such that you only need to configure your API settings and behaviour, plug in your datasource, and you&#8217;re good to go. Features such as Pagination, Sorting, Conditional Requests, Concurrency Control, Validation, HATEOAS, JSON and XML rendering, Projections, Customisable Endpoints, Rate Limiting are all included. Advanced features such as custom Authentication and Authorisation, Custom Validation, Embedded Resource Serialisation are also easily available. In my talk I will introduce the project and its community, recount why and how it's being developed, show the source code, illustrate key concepts and show the road ahead.</description><speakers><speaker id="123"><name>Nicola Iarocci</name><profile>https://ep2014.europython.eu/en/accounts/profile/123/</profile><description>Nicola is a passionate Python and C# developer based in Ravenna, Italy. He is the co-founder of C2K where leads the development of Amica 10, an accounting software solution for italian small business. He is creator and maintainer of a few open source projects, a MongoDB Master, and occasional Speaker.</description><image>https://ep2014.europython.eu/site_media/avatars/nicola.jpg</image></speaker></speakers></entry><entry id="40"><category>Talk</category><audience>Novice</audience><topics><topic>Science</topic></topics><start>1000</start><duration>30</duration><room id="3">B07/B08</room><title>RISCy Business: Development of a RNAi design and off-target prediction software</title><abstract>RNA interference (RNAi) is a biological mechanism for targeted inhibition of gene expression. It has also been used routinely to discover genes involved in the interaction of plants with pathogenic fungi. To minimize the miss-targeting of unrelated genes and to maximize the RNAi efficiency, we have developed a PyQt based cross- platform software tool called &#8220;si-Fi&#8221;. Our aim of the talk is to show that also hobby programmers can use Python in a very useful way.</abstract><description>RISCy Business: Development of a RNAi design and off-target prediction software&#13;
&#13;
Authors: Stefanie Lueck, Tino Kreszies, Patrick Schweizer and Dimitar Douchkov&#13;
&#13;
RNA interference (RNAi) is a sequence similarity-based biological mechanism for inhibiting gene expression. It is initiated by double stranded RNA (dsRNA), which is unusual for eukaryotic cells and normally related to viruses and transposable elements. Generally, if long dsRNA appears in a living cell it will be cut down to short double stranded RNA with a specific size (~20 bp) called small interfering RNA (siRNA). One of the siRNA strands is taken into an enzyme complex named RISC (RNA Induced Silencing Complex), which functions to search and destroy any mRNA that contains sequence complementarity to the siRNA, and thus to inhibit the expression of the gene for the particular mRNA. RNAi has become a valuable research tool for strong and selective suppression of specific genes of interest. However, the application of the technology raises two main questions: 1. Since the recognition of target mRNA is based on sequence similarity, what is the probability of hitting non-targeted genes because they carry stretches of a sequence with high similarity to the siRNA?; 2. What is the optimal design for RNAi constructs? To answer these questions we have created a PyQt-based tool called &#8220;si-Fi&#8221; (si-RNA Finder). Unlike most of the available tools that focus on the siRNA, &#8220;si-Fi&#8221; is specifically designed for long double stranded RNAi constructs that are widely used in non-mammalian systems. The software offers creation of custom sequence databases, flexible search parameters, and provides easy to interpret graphical and tabular outputs. Choosing the PyQt over other GUI toolkits greatly facilitated the development process and made the designing of a reliable and attractive looking cross-platform software accessible for non-professional programmers.</description><speakers><speaker id="63"><name>Stefanie L&#252;ck</name><profile>https://ep2014.europython.eu/en/accounts/profile/63/</profile><description>Stefanie L&#252;ck was born in Halberstadt, Germany. After finishing school, she moved to Braunschweig to start an apprenticeship as a biological technical assistant, which she successfully passed in 2002. Since October 2002, she has been working at the Leibniz Institute of Plant Genetics and Crop Plant Research in Gatersleben, Germany.&#13;
&#13;
Recently Stefanie got interested in learning programming, especially with Python. In the last few years she has developed a couple of software tools mostly for bioinformatic purposes.&#13;
&#13;
In her free time, she enjoys cycling and hiking in the mountains.</description><image>https://ep2014.europython.eu/site_media/avatars/me.jpg</image></speaker></speakers></entry><entry id="79"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1000</start><duration>30</duration><room id="2">B05/B06</room><title>Conversing with people living in poverty</title><abstract>[Vumi](http://vumi.org) is a text messaging system designed to reach out to those in&#13;
poverty on a massive scale via their mobile phones. It's written in&#13;
Python using Twisted. This talk is about how and why we built it and&#13;
how you can join us in making the world a better place.</abstract><description>43% of the world's population live on less than &#8364;1.5 per day.&#13;
&#13;
The United Nations defines poverty as a "lack of basic capacity to&#13;
participate effectively in society".  While we often think of the poor&#13;
as lacking primarily food and shelter, the UN definition highlights&#13;
their isolation. They have the least access to society's knowledge and&#13;
services and the most difficulty making themselves and their needs&#13;
heard in our democracies.&#13;
&#13;
While smart phones and an exploding ability to collect and process&#13;
information are transforming our access to knowledge and the way we&#13;
organize and participate in our societies, those living in poverty&#13;
have largely been left out. This has to change.&#13;
&#13;
Basic mobile phones present an opportunity to effect this change&#13;
[3]. Only three countries in the world have fewer than 65 mobile&#13;
phones per 100 people [4]. The majority of these phones are not&#13;
Android or iPhones, but they do nevertheless provide a means of&#13;
communication -- via voice calls, SMSes [6], USSD [7] and instant&#13;
messaging.&#13;
&#13;
By comparison, 25 countries have less than 5% internet penetration&#13;
[5].&#13;
&#13;
Vumi [1] is an open source text messaging system designed to reach out&#13;
to those in poverty on a massive scale via their mobile phones. It's&#13;
written in Python using Twisted.&#13;
&#13;
Vumi is already used to:&#13;
&#13;
  * provide Wikipedia access over USSD and SMS in Kenya [8].&#13;
  * register a million voters in Libya [10].&#13;
  * deliver health information to mothers in South Africa [9].&#13;
  * prevent election violence in Kenya [11].&#13;
&#13;
This talk will cover:&#13;
&#13;
  * a brief overview of mobile networking and cellphone use in Africa&#13;
  * why we built Vumi&#13;
  * the challenges of operating in unreliable environments&#13;
  * an overview of Vumi's features and architecture&#13;
  * how you can help!&#13;
&#13;
Vumi features some cutting edge design choices:&#13;
&#13;
  * horizontally scalable Twisted processes communicating using RabbitMQ.&#13;
  * declarative data models backed by Riak.&#13;
  * sharing common data models between Django and Twisted.&#13;
  * sandboxing hosted Javascript code from Python.&#13;
&#13;
Overview of challenges Vumi addresses:&#13;
&#13;
*Scalability*: Vumi needs to support both small scale applications (demos, pilot projects, applications tailored for a particular community) and large ones (things that everyone within a country might use). We address this using Twisted workers that exchange messages via RabbitMQ and store data in Riak. Having projects share RabbitMQ and Riak instances significantly reduces the overhead for small projects (e.g. its not cost effective to launch the recommended minimum of 5 Riak servers for a small project).&#13;
&#13;
*Barriers to entry*: Often the people with good ideas don't have access to one of many things needed to run a production system themselves, e.g. capital, time, stable infrastructure. We address this by providing a hosted Vumi instance that runs sandboxed Javascript applications. All the application author needs is their idea, the ability to write Javascript and upload it to our servers. The target audience here is African entrepreneurs at incubator spaces like iHub (Nairobi), kLab (Kigali), BongoHive (Lusaka) and JoziHub (Johannesburg).&#13;
&#13;
*Unreliable third-party systems*: It's one thing for parts of ones own system to go down, it's another for crucial third-party systems to go down. Vumi takes an SMTP-like approach to solving this and uses persistent queues so that messages can back up in the queue while third-party systems are down and be processed when they become available again. We also feedback information on whether third-party messaging systems have accepted or reject messages to the application that initiated them.&#13;
&#13;
Vumi is developed by the Praekelt Foundation [2] (and individual contributors!).&#13;
&#13;
  [1]: &lt;http://vumi.org/&gt; "Vumi"&#13;
  [2]: &lt;http://praekeltfoundation.org/&gt; "Praekelt Foundation"&#13;
  [3]: &lt;http://www.youtube.com/watch?v=0bXjgx4J0C4#t=20&gt; "Spotlight on Africa"&#13;
  [4]: &lt;http://en.wikipedia.org/wiki/List_of_countries_by_number_of_mobile_phones_in_use&gt;&#13;
  [5]: &lt;http://en.wikipedia.org/wiki/List_of_countries_by_number_of_Internet_users&gt;&#13;
  [6]: &lt;http://en.wikipedia.org/wiki/Short_Message_Service&gt;&#13;
  [7]: &lt;http://en.wikipedia.org/wiki/Unstructured_Supplementary_Service_Data&#13;
  [8]: &lt;http://blog.praekeltfoundation.org/post/65981723628/wikipedia-zero-over-text-with-praekelt-foundation&gt;&#13;
  [9]: &lt;http://blog.praekeltfoundation.org/post/65042080515/mama-launches-healthy-family-nutrition-programme&gt;&#13;
  [10]: &lt;http://www.libyaherald.com/2014/01/01/over-one-million-register-for-constitutional-elections-on-final-sms-registration-day/#axzz2sroHcg00&gt;&#13;
  [11]: &lt;http://blog.praekeltfoundation.org/post/51210616848/the-texting-will-never-be-done-peace-messages-in-kenya&gt;</description><speakers><speaker id="754"><name>Simon Cross</name><profile>https://ep2014.europython.eu/en/accounts/profile/754/</profile><description>Simon Cross works at the Praekelt Foundation's Cape Town office on Vumi, an SMS and USSD messaging platform designed to operate at population scale. In his spare time he organizes PyConZA and participates in PyWeek.</description><image>https://ep2014.europython.eu/site_media/avatars/simon.cross.png</image></speaker></speakers></entry><entry id="103"><category>Talk</category><audience>Novice</audience><topics><topic>Science</topic></topics><start>1000</start><duration>30</duration><room id="5">A08</room><title>The Shogun Machine Learning Toolbox</title><abstract>We present the Shogun Machine Learning Toolbox, a framework for Machine Learning, which is the art of finding structure in data, with applications in object recognition, brain-computer interfaces, robotics,  stock-prices prediction, etc. We give a gentle introduction to ML and Shogun's Python interface, focussing on intuition and visualisation.</abstract><description>We present the Shogun Machine Learning Toolbox, a unified framework for Machine Learning  algorithms. Machine Learning (ML) is the art of finding structure in data in an automated way and has given rise to a wide range of applications such as recommendation systems, object recognition, brain-computer interfaces, robotics, predicting stock prices, etc.&#13;
&#13;
Our toolbox offers extensive bindings with other software and computing languages, Python being the major target. The library was initiated in 1999 and remained under heavy development henceforth. In addition to its mature core-framework, Shogun offers state-of-the-art techniques based on latest ML research. This is partly made possible by the 21 Google Summer of Code projects (5+8+8 since 2011) that our students successfully completed. Shogun's codebase has &gt;20k commits made by &gt;100 contributors representing &gt;500k lines of code. While its core is written in C++, a unique of technique for generating interfaces allows usage from a wide range of target languages -- under the same syntax. This includes in particular Python, but also Matlab/Octave, Java, C#, R, ruby, and more. We believe that users should be able to choose their favourite language rather than us dictating this choice. The same applies for supported OS (Linux, Mac, Win). Shogun is part of Debian Linux.&#13;
&#13;
Features of Shogun include most classical ML methods such as classification, regression, dimensionality reduction, clustering, etc, most of them in different flavours. All implemented algorithms in Shogun work on a modular data representation, which allows to easily switch between different sorts of objects as for example strings or matrices. Common ML-tasks and data IO can be carried under a unified interface. This is also true for the various external open-source libraries that are embedded within Shogun.&#13;
&#13;
Code examples are provided for all implemented algorithms. The main and most complete set of examples is in the Python language. In addition, in order to push usage of Shogun in education at universities, we recently started adding more illustrative IPython notebooks. A growing list of statically rendered versions are readily available from our [website](http://www.shogun-toolbox.org/page/documentation/notebook) and implement a cross-over of tutorial-style explanations, code, and visualization examples. We even took this up a notch and started building our own IPython-notebook server with Shogun installed in the cloud at (try cloud button in notebook view) . This allows users to try Shogun without installation via the IPython notebook web interface. All example notebooks can be loaded, interactively modified, and executed. In addition, using the Python Django framework, we built a collection of interactive web-demos where users can play around with basic ML algorithms, [demos](http://www.shogun-toolbox.org/page/documentation/demo)&#13;
&#13;
In the proposed talk, we will give a gentle and general introduction to ML and the core functionality of Shogun, with a focus on its Python interface. This includes solving basic ML tasks such as classification and regression and some of the more recent features, such as last year's GSoC projects and their IPython notebook writeups. ML material will be presented with a focus on intuition and visualisation and no previous familiarity with ML methods is required.&#13;
&#13;
## Key points in the talk&#13;
&#13;
 * What are the goals in ML?&#13;
 * Example problems in ML (classification, regression, clustering)&#13;
 * Some basic algorithm ideas&#13;
 * Focus on Visualisation, not Maths&#13;
&#13;
## Intended Audience&#13;
&#13;
* All people dealing with data (data scientists, big-data hackers) who are looking for tools to deal with it&#13;
 * People with a general interest but no education in Machine Learning&#13;
 * People interested in the technology behind Shogun (swig, cloud notebook server, web-demos)&#13;
 * People from the ML community (scipy-stack)&#13;
 * ML scientists/Statisticians&#13;
&#13;
## Code examples&#13;
&#13;
 * [Classification](https://github.com/shogun-toolbox/shogun/blob/develop/examples/undocumented/python_modular/classifier_libsvm_modular.py)&#13;
 * [Clustering](https://github.com/shogun-toolbox/shogun/blob/develop/examples/undocumented/python_modular/graphical/em_2d_gmm.py)&#13;
 * [Source seperation](https://github.com/shogun-toolbox/shogun/blob/develop/examples/undocumented/python_modular/graphical/converter_jade_bss.py)&#13;
 * [IPython notebook examples](http://www.shogun-toolbox.org/page/documentation/notebook)&#13;
&#13;
### Slide examples&#13;
See our Europython 2010 [slides](https://www.dropbox.com/sh/jvl4ra885usu4ii/WIoJccXA5r/talk.pdf). Although we aim for more pictures and less formulas this year. </description><speakers><speaker id="83"><name>Heiko Strathmann</name><profile>https://ep2014.europython.eu/en/accounts/profile/83/</profile><description>I am a PhD student at the Gatsby Unit, UCL London. My research interests evolve around Machine Learning, Computational Statistics, and Neuroscience. In addition, I am attached to the Open-Source community, for example as my role as a core-developer and president of the Shogun Machine Learning Toolbox e.V.</description><image>https://ep2014.europython.eu/site_media/avatars/Ohne_Titel_022.jpg</image></speaker></speakers></entry><entry id="31"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1000</start><duration>30</duration><room id="1">C01</room><title>Multiplatform binary packaging and distribution of your client apps</title><abstract>Distributing your python app to clients it&#8217;s a common task that can become hard when &#8220;stand alone&#8221; and &#8220;obfuscated code&#8221; come as requirements.&#13;
&#13;
&#13;
Common answers in forums are on the lines of &#8220;Python is not the language you&#8217;re looking for&#8221; or &#8220;What are you trying to hide?&#8221; but another answer is possible.</abstract><description>This talk aims to propose an easy way of packaging python applications that meet to requirements: It&#8217;s stand-alone (no need to install python in the client) and code is obfuscated. &#13;
&#13;
&#13;
Python obfuscation is a recurrent topic in forums and discussion lists. However, answers are, most of the time, on the line of discouraging doing so; either because it violates some ethics principle or because it is said to be hard or non cost-effective.&#13;
&#13;
&#13;
Proposed solution is a fully automated process that goes through following buildbot pipeline:&#13;
&#13;
-  Native python extensions are built with Cython for every platform we&#8217;re distributing for, using clang, MS Visual and gcc as compilers.&#13;
-  These extensions along with external dependencies are packaged with PyInstaller. Dependencies are automatically gathered from requirements.txt files and spec file is created on the fly to include resources such as image or text files.&#13;
-  Platform specific installers are built to distribute the app using pkgbuild and productbuild for MacOS, dpkg-deb for Ubuntu and Raspbian and InnoSetup for Windows.&#13;
-  Installers are uploaded by Buildbot to Amazon S3 to a version specific folder.&#13;
&#13;
&#13;
I will also give a little introduction to used tools such as Cython, Buildbot and Pyinstaller, discuss problems encountered and how they were solved and talk about performance impact.&#13;
</description><speakers><speaker id="35"><name>Julia S.Simon</name><profile>https://ep2014.europython.eu/en/accounts/profile/35/</profile><description>Julia S.Simon is a Software Engineer and Test Automation specialist. Currently part of biicode, a Spanish startup, where she develops whatever is needed: client, server or internal infrastructure. Julia has previously worked on a popular social network and a search engine companies, using Python as well as other languages such as Java or PHP. She is originally from Marbella in southern Spain but now lives in the busy capital, Madrid.</description><image>https://ep2014.europython.eu/site_media/avatars/julia-galicia.jpg</image></speaker><speaker id="405"><name>Diego Rodriguez-Losada</name><profile>https://ep2014.europython.eu/en/accounts/profile/405/</profile><description>B.Sc in Engineering, MsC in Mechanics, PhD in Robotics and tenured track Professor in Automatics, Electronics and Informatics. &#13;
&#13;
Now on a leave, running Biicode.com as CTO, and enjoying his passion for SW developing.</description><image>https://ep2014.europython.eu/site_media/avatars/cara_alegre.jpg</image></speaker></speakers></entry><entry id="72"><category>Training</category><audience>Novice</audience><topics></topics><start>1000</start><duration>180</duration><room id="6">A03/A04</room><title>Einsteigertutorium Python</title><abstract>Das Einsteigertutorium Python wendet sich an Tagungsteilnehmer, die keine oder&#13;
nur sehr wenig Kenntnis der Programmiersprache Python besitzen. Es soll jedoch&#13;
keine Einf&#252;hrung ins Programmieren sein; praktische Erfahrung mit einer&#13;
anderen Programmiersprache wird vorausgesetzt. Am Ende der Veranstaltung&#13;
werden die Teilnehmer die syntaktischen und einige konzeptionelle Merkmale von&#13;
Python kennen und in der Lage sein, selbst&#228;ndig einfache Programme in dieser&#13;
Sprache zu erstellen und auszuf&#252;hren.</abstract><description>Die Teilnehmer des Tutoriums bringen bitte ihren eigenen Rechner mit, auf dem&#13;
eine aktuelle Version von Python (mindestens 3.3) installiert sein mu&#223;. Als&#13;
Entwicklungsumgebung werden wir im Tutorium das mit Python ausgelieferte&#13;
"idle" verwenden, was je nach Betriebssystem m&#246;glicherweise zus&#228;tzliche&#13;
Bibliotheken ben&#246;tigt oder als eigenes Programmpaket installiert werden mu&#223;.&#13;
Teilnehmer, die mit der Kommandozeile und einem einfachen Texteditor vertraut&#13;
sind, k&#246;nnen auch gern diese Arbeitsumgebung verwenden. Im Tutorium wird&#13;
jedoch keine Zeit sein, um auf damit verbundene Probleme einzugehen.&#13;
&#13;
Das Tutorium soll folgende Schritte umfassen, wobei es vom Vorankommen und dem&#13;
gew&#252;nschten Detailgrad abh&#228;ngen wird, wieviel davon in der vorhandenen Zeit zu&#13;
schaffen ist:&#13;
&#13;
- Ausf&#252;hren eines sehr einfachen Programms ("Hello world") auf dem eigenen&#13;
  Rechner, Umgang mit der interaktiven Python-Umgebung (15-30 Minuten)&#13;
&#13;
- Erl&#228;uterung einiger syntaktischer Eigenheiten von Python an einem einfachen&#13;
  Beispiel, ggf. Diskussion der Unterschiede zu anderen Sprachen&#13;
  (30-45 Minuten)&#13;
&#13;
- Vorstellung der grundlegenden Programmkonstrukte (Bedingungen, Schleifen,&#13;
  Funktionen) und Datentypen (Zahlen, Text, Listen, Dictionarys) (60 Minuten)&#13;
&#13;
- Verwendung der Standardbibliothek in einem einfachen Beispiel (30 Minuten)&#13;
&#13;
- bei gen&#252;gend verbleibender Zeit: kurzer Einblick in Pythons Objektsystem:&#13;
  Klassen, Objekte, "Duck-Typing"&#13;
&#13;
- offene Fragerunde (15-45 Minuten)</description><speakers><speaker id="549"><name>Thomas Lotze</name><profile>https://ep2014.europython.eu/en/accounts/profile/549/</profile><description>Thomas Lotze has been working with Python at gocept gmbh &amp; co. kg for more than ten years. Having studies Physics before he turned to programming, he is now interested in building modern web applications in a free-software environment and has done so using Python web technologies (with an emphasis on Zope and friends) extensively. Thomas' other favourite occupation is photography.</description><image>https://ep2014.europython.eu/site_media/avatars/profilbild-norwegen.jpg</image></speaker></speakers></entry><entry id="89"><category>Training</category><audience>Advanced</audience><topics></topics><start>1000</start><duration>180</duration><room id="7">A05/A06</room><title>Iterators, Generators and Decorators</title><abstract>Iterators, generators and decorators are language features of Python that allow to write elegant solutions for certain types of problems. This tutorial provides a hands-on introduction to the underlying concepts. Numerous examples show what you can do with them in your daily programming work. &#13;
&#13;
You will learn how iterators, generators and decorators work and how to write better and more efficient programs with them. If you are new to these topics or tried but got confused about functions that return functions that return functions, this tutorial will help you to understand the how and the why.&#13;
</abstract><description>This tutorial is a systematic introduction to the topics iterators, generators and decorators. It covers all relevant information with a focus on practical applications for common tasks.&#13;
&#13;
You will learn how iterators, generators and decorators work and how to write better and more efficient programs with them. If you are new to these topics or tried but got confused about functions that return functions that return functions, this tutorial will help you to understand the how and the why.&#13;
&#13;
It is a part of the advanced training I've been delivering over the last years in open and in-house courses as well as trainings at EuroPython, PyCon PL, PyCon DE and PyCon IE. The material has been continuously refined owing to participant feedback.  &#13;
&#13;
## Iterators and Generators&#13;
&#13;
* Iterators (15 min)&#13;
* Generator functions (10 min)&#13;
* Generator expressions (10 min)&#13;
* Coroutines (15 min)&#13;
* Chaining (5 min)&#13;
* Itertools (15 min)&#13;
* Exercises (20 min)&#13;
&#13;
## Decorators&#13;
&#13;
* Using decorators (5 min)&#13;
* Writing simple decorators (15 min)&#13;
* Parameterized decorators (10 min)&#13;
* Chaining decorators (5 min)&#13;
* Class decorators (5 min)&#13;
* Best practice (10 min)&#13;
* Application for:&#13;
    * Argument checking (3 min)&#13;
    * Caching (3 min)&#13;
    * Logging (3 min)&#13;
    * Registering (3 min)&#13;
    * Verification (3 min)&#13;
* Exercises (25 min)  &#13;
</description><speakers><speaker id="13"><name>Mike M&#252;ller</name><profile>https://ep2014.europython.eu/en/accounts/profile/13/</profile><description>EuroPython 2014 Chair based on experience charing PyCon DE 2011 and  2012 as well as originator and lead organizer of EuroSciPy 2008 and 2009. Chair Board Python Software Verband e.V. (1. Vorsitzender des Vorstands). Python Trainer and CEO of Python Academy GmbH &amp; Co. KG. I have been teaching Python for about ten years and thus introduced several thousand people to this fine language. Oh, and I like Python ;).</description><image>https://ep2014.europython.eu/site_media/avatars/mmueller.jpg</image></speaker></speakers></entry><entry id="4"><category></category><audience></audience><topics></topics><start>1030</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Breakfast</title><description></description><speakers></speakers></entry><entry id="84"><category>Talk</category><audience>Advanced</audience><topics><topic>Best Practices</topic></topics><start>1100</start><duration>45</duration><room id="5">A08</room><title>Metaprogramming, from decorators to macros</title><abstract>Starting off with the meaning of metaprogramming we quickly dive into the different ways Python allows this.&#13;
&#13;
First we talk about class and functions decorators, when decorators are not enough anymore we'll explore the wonders of metaclasses.&#13;
&#13;
In the last part of the talk we'll talk about macros, first in Lisp and then using the amazing [macropy library](https://github.com/lihaoyi/macropy).</abstract><description>This talk is a journey in the wonderful world of metaprogramming.&#13;
We start off with the meaning of metaprogramming and what it can be used for.&#13;
&#13;
Then we look at what can be done in Python, introducing function and class decorators.&#13;
When decorators are not enough anymore we move to the black magic of metaclasses, showing how we can implemement a simple Django-like model with them.&#13;
&#13;
In the bonus track we'll talk about macros, as the ultimate metaprogramming weapon, showing briefly how Lisp macros work and introducing the amazing [macropy library](https://github.com/lihaoyi/macropy).&#13;
</description><speakers><speaker id="251"><name>Andrea Crotti</name><profile>https://ep2014.europython.eu/en/accounts/profile/251/</profile><description>I'm currently working as Python/Django developer in London after other Python experiences in the aerospace and hardware industries.&#13;
&#13;
I started to use Python 7 years ago and it still does not stop to amaze me how much I can get done with so little elegant code.&#13;
&#13;
I've been attending Python conferences in the last few years and enjoyed giving talks about various topics, from decorators to TDD.</description><image>https://ep2014.europython.eu/site_media/avatars/andrea_face_1.jpg</image></speaker></speakers></entry><entry id="34"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1100</start><duration>45</duration><room id="1">C01</room><title>Writing Awesome Command-Line Programs in Python</title><abstract>Command-Line programs can have a lot to them - usually more than you think, yet often suffer from a lack of thought.&#13;
&#13;
This is a tour through how to structure your code, tools in the standard library and some 3rd party libraries. Take your command-line programs to the next level!</abstract><description>Python is a great language for writing command-line tools - which is why so much of Linux is secretly written in Python these days. Unfortunately, what starts as a simple script can quickly get out of hand as more features are added and more people start using it!&#13;
&#13;
The talk will consist of a tour through various useful libraries and practical code showing how each can be used, and include advice on how to best structure simple and complex command-line tools.&#13;
&#13;
Things to consider when writing command-line apps:&#13;
&#13;
* Single-file vs Multiple-file&#13;
* Standard library only vs. 3rd party requirements&#13;
* Installation - setup.py vs. native packaging&#13;
&#13;
The different parts of a command-line program:&#13;
&#13;
* Option Parsing:&#13;
    * Libraries: getopt, optparse, argparse, docopt&#13;
    * Sub-commands&#13;
* Configuration:&#13;
    * Formats: Ini file, JSON, YAML&#13;
    * Where should it be stored (cross-platform);&#13;
    * Having multiple configuration files, and allowing user config to override global config&#13;
* Output:&#13;
    * Colour - colorama&#13;
    * Formatting output for the user&#13;
    * Formatting output for other programs&#13;
    * How do you know when your output is being piped to another program?&#13;
    * Managing logging and verbosity&#13;
* Managing streamed input&#13;
* Exit values: What are the conventions?&#13;
* Interactive apps - REPL&#13;
* Structuring a bunch of programs/commands around a shared codebase.&#13;
* Command-line frameworks: clint, compago &amp; cliff&#13;
* Testing command-line apps&#13;
* Writing command-line tools in Python 3 vs Python 2</description><speakers><speaker id="423"><name>Mark Smith</name><profile>https://ep2014.europython.eu/en/accounts/profile/423/</profile><description>Mark is a Python developer and trainer working in Edinburgh for FanDuel.com.&#13;
&#13;
He's been a Python developer for 14 years, mostly doing Web development, dev-ops, and hardware testing.&#13;
&#13;
In his spare time he drinks beer, crochets and runs the Edinburgh Python user group - but never all at the same time!</description><image>https://ep2014.europython.eu/site_media/avatars/512.png</image></speaker></speakers></entry><entry id="74"><category>Talk</category><audience>Advanced</audience><topics><topic>Best Practices</topic></topics><start>1100</start><duration>45</duration><room id="4">B09</room><title>Support Python 2 and 3 with the same code</title><abstract>Your library supports only Python 2, - but your users keep nagging you about Python 3 support?&#13;
&#13;
As Python 3 gets adopted more and more, users ask for Python 3 support in existing libraries for Python 2. Although there are several approaches, this talk focuses on using the very same code for a Python 2 and a Python 3 version.&#13;
&#13;
The talk discusses the main problems when supporting Python 3 and best practices to apply for compatibility with Python 2 and 3.</abstract><description>Your library supports only Python 2, - but your users keep nagging you about Python 3 support?&#13;
&#13;
As Python 3 gets adopted more and more, users ask for Python 3 support in existing libraries for Python 2. This talk mentions some approaches for giving users a Python 3 version, but will quickly focus on using the very same code for a Python 2 and a Python 3 version.&#13;
&#13;
This is much easier if you require Python 2.6 and up, and yet a bit easier if you require Python 3.3 as the minimum Python 3 version.&#13;
&#13;
The talk discusses main problems when supporting Python 3 (some are easily solved):&#13;
&#13;
* `print` is a function.&#13;
&#13;
* More Python APIs return iterators that used to return lists.&#13;
&#13;
* There's now a clear distinction between bytes and unicode (text) strings.&#13;
&#13;
* Files are opened as text by default, requiring an encoding to apply on reading and writing.&#13;
&#13;
&#13;
The talk also explains some best practices:&#13;
&#13;
* Start with a good automatic test coverage.&#13;
&#13;
* Deal with many automatic conversions with a one-time 2to3 run.&#13;
&#13;
* Think about how your library should handle bytes and unicode strings. (Rule of thumb: Decode bytes as early as possible; encode unicode text as late as possible.)&#13;
&#13;
* Should you break compatibility with your existing Python 2 API? (Yes, if there's no other way to design a sane API for Python 2 and 3. If you do it, raise the first part of the version number.)&#13;
&#13;
* Try to keep code that's different for Python 2 and 3 minimal. Put code that needs to be different for Python 2 and 3 into a `compat` module. Or use third-party libraries like `six` or `future`.&#13;
&#13;
&#13;
Finally, the talk will mention some helpful resources on the web.</description><speakers><speaker id="673"><name>Stefan Schwarzer</name><profile>https://ep2014.europython.eu/en/accounts/profile/673/</profile><description>Stefan Schwarzer uses Python since 1999. He's written articles and a book on Python and given talks at several Python and Linux conferences. Although Stefan studied chemical engineering and has a doctor's degree in it, he's been working in software development since 2000. Nowadays Stefan is a freelancer in software development [1], mostly with Python. He's also the maintainer of the FTP client library ftputil [2].&#13;
&#13;
[1] http://sschwarzer.com&#13;
[2] http://ftputil.sschwarzer.net</description><image>https://ep2014.europython.eu/site_media/avatars/StefanSchwarzer.jpg</image></speaker></speakers></entry><entry id="27"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1100</start><duration>45</duration><room id="2">B05/B06</room><title>The Return of "The Return of Peer to Peer Computing".</title><abstract>At last year's Europython Holger Krekel gave a keynote called "The Return of Peer to Peer Computing". He described how developers, in light of the Snowden surveillance revelations, ought to learn about and build decentralized peer-to-peer systems with strong cryptography. This talk introduces, describes and demonstrates both concepts and code that a group of Pythonistas have been working on since Holger's keynote. &#13;
&#13;
We asked ourselves two questions: what are the fundamental elements / abstractions of a peer-to-peer application and, given a reasonable answer to the first question, what do we need to build to facilitate the easy creation of peer-to-peer applications?  We will present work done so far, discuss the sorts of application that might be written using such a  framework and explore how peer-to-peer technology could be both attractive and viable from an economic point of view.</abstract><description>This talk introduces, describes and demonstrates concepts and code created during sprints and via online collaboration by a distributed group of Pythonistas under the working title p4p2p (http://p4p2p.net).&#13;
&#13;
We asked ourselves, as frameworks such as Zope/Plone, Django, Pyramid or Flask are to web development what would the equivalent sort of framework look like for peer-to-peer application development?&#13;
&#13;
We've tackled several different technical issues: remote execution of code among peers, distributed hash tables as a mechanism for peer discovery and data storage, various cryptographic requirements and the nuts and bolts of punching holes in firewalls.&#13;
&#13;
Work is ongoing (we have another sprint at the end of March) and the final content of the talk will depend on progress made. However, we expect to touch upon the following (subject to the caveat above):&#13;
&#13;
* What is the problem we're trying to solve?&#13;
* Why P2P?&#13;
* The story of how we ended up asking the questions outlined in the abstract.&#13;
* What we've done to address these questions.&#13;
* An exploration of the sorts of application that could be built using P2P.&#13;
* A call for helpers and collaboration.&#13;
&#13;
Happy to answer any questions!</description><speakers><speaker id="58"><name>Nicholas Tollervey</name><profile>https://ep2014.europython.eu/en/accounts/profile/58/</profile><description>Nicholas is a classically trained musician, philosophy graduate, teacher, writer and software developer. He's just like this biography: concise, honest and full of useful information.</description><image>https://ep2014.europython.eu/site_media/avatars/lookslikeme.JPG</image></speaker><speaker id="275"><name>Holger Krekel</name><profile>https://ep2014.europython.eu/en/accounts/profile/275/</profile><description>Founder of PyPy, main author  of pytest, tox, devpi and execnet projects.  Trainer and conference speaker. Likes playing Go, listening to DnB and Electro Swing and caring for his son. </description><image></image></speaker></speakers></entry><entry id="70"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1100</start><duration>45</duration><room id="1">C01</room><title>Graph Databases, a little connected tour</title><abstract>There are many kinds of NoSQL databases like, document databases, key-value, column databases and graph databases.&#13;
In some scenarios is more convenient to store our data as a graph, because we want to extract and study information relative to these connections. In this scenario, graph databases are the ideal, they are designed and implemented to deal with connected information in a efficient way.</abstract><description>There are many kinds of NoSQL databases like, document databases, key-value, column databases and graph databases.&#13;
In some scenarios is more convenient to store our data as a graph, because we want to extract and study information relative to these connections. In this scenario, graph databases are the ideal, they are designed and implemented to deal with connected information in a efficient way.&#13;
In this talk I'll explain why NoSQL is necessary in some contexts as an alternative to traditional relational databases. How graph databases allow developers model their domains in a natural way without translating these domain models to an relational model with some artificial data like foreign keys and why is more efficient a graph database than a relational one or even a document database in a high connected environment. Then I'll explain specific characteristics of Neo4J as well as how to use Cypher the neo4j query language through python.</description><speakers><speaker id="175"><name>Francisco Fern&#225;ndez Casta&#241;o</name><profile>https://ep2014.europython.eu/en/accounts/profile/175/</profile><description>Francisco Fernandez works as a software engineer at biicode in Madrid. He uses Python as his main programming language but he also program in other languages like Scala, Go, Clojure... His main interests are distributed systems, functional programming and graph databases. </description><image>https://ep2014.europython.eu/site_media/avatars/foto.jpeg</image></speaker></speakers></entry><entry id="60"><category>Talk</category><audience>Advanced</audience><topics><topic>Web</topic></topics><start>1100</start><duration>45</duration><room id="3">B07/B08</room><title>How Disqus is using Django as the basis of our Service Oriented Architecture</title><abstract>#Abstract&#13;
Disqus maintains the largest Django app out there. And we love it! It has, however, grown rather large and unwieldy. In the last year Disqus has had an increasing number of smaller services cropping up based on several different platforms. So this talk will be about how we do continuous deployment with our emerging service-based infrastructure.</abstract><description># The talk!&#13;
## ~10 min: Introduce what a SOA is&#13;
- What is a Service Oriented Arcitecture (SOA)?&#13;
    - Separation of concerns makes deployments faster and smaller.&#13;
    - Doing one thing well is better than doing two things kinda ok.&#13;
    - Development speed&#13;
        - SOA enables us to ship code FAST&#13;
        - Code commit to production is &lt; 2 minutes&#13;
&#13;
    - What are the basic kinds of services?&#13;
        - RPC: function calls over the network&#13;
        - REST: Basic/bulk data access over the network&#13;
        - Evented/Queue: Respond to data broadcasts in realtime&#13;
        - Why I personally think (Evented + REST) &gt; RPC.&#13;
- Why is Disqus moving towards a SOA? (Hint, it is for #webscale)&#13;
&#13;
## ~10 min: breaking up an existing application&#13;
- How Disqus is migrating from a monolithic django app to many smaller django apps.&#13;
    - We wanted to leverage our existing know-how of django&#13;
        - This includes all of our tooling&#13;
        - Products like sentry (https://github.com/getsentry/sentry)&#13;
        - And other monitoring/deployment infrastructure&#13;
    - We didn't plan well for growing, so there are a lot of lessons here)&#13;
    - How will authorization be done in services that can't access the user table?&#13;
&#13;
- How are we still leveraging Django in our services that are not wsgi apps&#13;
    - When we use management commands? (A lot)&#13;
    - When to use celery tasks? (Less than we anticipated)&#13;
&#13;
## ~20 min: Case study of the Disqus Ad Server&#13;
- migrate the functionality to a new service&#13;
    - Broke the Ad Server out from the monolithic app&#13;
    - Broke out the data portion into another service&#13;
    - Code structure of how we use multiple services&#13;
        - wsgi entry points&#13;
        - management commands&#13;
&#13;
- what went wrong&#13;
    - original code was not a well formed stand alone django app&#13;
    - still can't remove old code due to poor separation of concerns&#13;
&#13;
- what went right&#13;
    - average ship time of a feature went from days to hours&#13;
    - leveraged Django so new employees have a super fast learning curve&#13;
&#13;
# bonus material if there is time&#13;
(could possibly a 5-10 minute lightning talk too)&#13;
&#13;
## how we do experimentation to make more $&#8364;&#163;!&#13;
- A/B testing in the Disqus Ad Server&#13;
    - we use switches, but gargoyle wasn't working well&#13;
        - https://github.com/disqus/gargoyle&#13;
    - enter gutter!&#13;
        - https://github.com/disqus/gutter&#13;
    - switches in Django (or flask, or anything!)&#13;
    - zookeeper or redis backed&#13;
    - super fast&#13;
    - how we report decisions to the client, and how we track that data</description><speakers><speaker id="26"><name>Adam Hitchcock</name><profile>https://ep2014.europython.eu/en/accounts/profile/26/</profile><description></description><image>https://ep2014.europython.eu/site_media/avatars/lu8ab0shplqbp5gsz92v.jpeg</image></speaker></speakers></entry><entry id="38"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1145</start><duration>45</duration><room id="3">B07/B08</room><title>Elasticsearch from the bottom up</title><abstract>This talk will teach you about Elasticsearch and Lucene's architecture. You will get tidbits of highly relevant information for the real world without having to plunge into academic information retrieval tomes.  &#13;
&#13;
While Elasticsearch makes Lucene easily available in a distributed setting, it helps to have some knowledge about the underlying algorithms and data structures. Understanding how these data structures are *used* makes implementing search easier. Knowing how the indexes are *built* helps you keep things reliably performant.&#13;
&#13;
The key data structure in search is the powerful and versatile inverted index, which is actually simple and not too hard to understand.  We will start there, then ascend through the abstraction layers until we end up with an overview of how a distributed search cluster processes searches and changes.</abstract><description>## Who I am and motivation&#13;
I work with hosted Elasticsearch and have interacted with lots of developers. We see what many struggle with.&#13;
&#13;
Some relevant theory helps a lot. What follows has already lead to many "Aha!"-moments and developers piecing things together herself.&#13;
&#13;
## The inverted index&#13;
The most important index structure is actually very simple. It is essentially a sorted dictionary of terms, with a list of postings per term.&#13;
&#13;
We show three simple sample documents and the resulting inverted index.&#13;
&#13;
## The index term&#13;
The index term is the "unit of search", and the terms we make decide how we can search.&#13;
&#13;
With the inverted index and its sorted dictionary, we can quickly search for terms given their prefix.&#13;
&#13;
## Importance of text analysis&#13;
Thus, we need to transform our search problems into string prefix problems.&#13;
&#13;
This is done with text analysis, which is the process of making of index terms. It is highly important when implementing search.&#13;
&#13;
## Building indexes&#13;
The way indexes are built must balance how compact an index is, how easily we can search in it, how fast we can index documents - and the time it takes for changes to be visible.&#13;
&#13;
Lucene, and thus Elasticsearch, builds them in segments.&#13;
&#13;
## Index segments&#13;
A Lucene index consists of index segments, i.e. immutable mini-indexes.&#13;
&#13;
A search on an index is done by doing the search on all segments and merging the results.&#13;
&#13;
Segments are immutable:&#13;
&#13;
This enables important compression techniques.&#13;
Deletes are not immediate, just a marker.&#13;
Segments are occasionally merged to larger segments. Then documents are finally deleted.&#13;
New segments are made by buffering changes in memory, and written when flushing happens. Flushes are largely caused by refreshing every second, due to real time needs.&#13;
&#13;
## Caches&#13;
Caches like filter- and field caches are managed per segment. They are essential for performance.&#13;
&#13;
Immutable segments make for simple reasoning about caches. New segments only cause partial cache invalidations.&#13;
&#13;
## Elasticsearch indexes&#13;
Much like a Lucene index is made up of many segments, an Elasticsearch index is made up of many Lucene indexes.&#13;
&#13;
Two Elasticsearch indexes with 1 shard is essentially the same as one Elasticsearch index with 2 shards.&#13;
&#13;
Search all shards and merge. Much like segments, but this time possibly across machines.&#13;
&#13;
Shard / Index routing enables various partitioning strategies. Simpler than it sounds, so one important example:&#13;
&#13;
Essential for time based data, like logs: can efficiently skip searching entire indexes - and roll out old data by deleting the entire index.&#13;
&#13;
## Common pitfalls&#13;
We must design our indexing for how we search - not the searches for how things are indexed. Be careful with wildcards and regexes.&#13;
&#13;
Since segments are immutable, deleting documents is expensive while deleting an entire index is cheap.&#13;
&#13;
Updating documents is essentially a delete and re-index. Heavy updating might cause problems.&#13;
&#13;
Have enough memory and then some. Elasticsearch is very reliant on its caches.&#13;
&#13;
## Summary&#13;
We've seen how index structures are used, and why proper text processing is essential for performant searches.&#13;
&#13;
Also, you now know what index segments are, and how they affect both indexing and searching strategies.&#13;
&#13;
## Questions</description><speakers><speaker id="504"><name>Alex Brasetvik</name><profile>https://ep2014.europython.eu/en/accounts/profile/504/</profile><description>Alex Brasetvik is a founder and senior software engineer at Found AS - a company whose primary product is a hosted Elasticsearch service. Before working for Found, Alex earned his Master in Computer Science at NTNU, with an emphasis on database- and search engines. He has spent the past eight years on problem solving and solutions related to search, focusing on Elasticsearch in the last three years. </description><image>https://ep2014.europython.eu/site_media/avatars/alex_square.png</image></speaker></speakers></entry><entry id="82"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1145</start><duration>45</duration><room id="4">B09</room><title>Scikit-learn to "learn them all"</title><abstract>**Scikit-learn** is a powerful library, providing implementations for &#13;
many of the most popular machine learning algorithms. &#13;
This talk will provide an overview of the "batteries" included in &#13;
Scikit-learn, along with working code examples and internal insights, in order to &#13;
get the best for our machine learning code.</abstract><description>**Machine Learning** is about *using the right features, to build the right &#13;
models, to achieve the right tasks* [[Flach, 2012]][0]&#13;
However, to come up with a definition of what actually means **right** for &#13;
the problem at the hand, it is required to analyse &#13;
huge amounts of data, and to evaluate the performance of different algorithms &#13;
on these data.&#13;
&#13;
However, deriving a working machine learning solution for a given problem &#13;
is far from being a *waterfall* process. &#13;
It is an iterative process where continuous refinements are required for the &#13;
data to be used (i.e., the *right features*), and the algorithms to apply &#13;
(i.e., the *right models*).&#13;
&#13;
In this scenario, Python has been found very useful for practitioners and &#13;
researchers: its high-level nature, in combination with available tools and &#13;
libraries, allows to rapidly implement working machine learning code &#13;
without *reinventing the wheel*.&#13;
&#13;
[**Scikit-learn**](http://scikit-learn.org/stable/) is an actively &#13;
developing Python library, built on top of the solid `numpy` and `scipy` &#13;
packages.&#13;
&#13;
Scikit-learn (`sklearn`) is an *all-in-one* software solution, providing &#13;
implementations for several machine learning methods, along with datasets and &#13;
(performance) evaluation algorithms.&#13;
&#13;
These "batteries" included in the library, in combination with a nice and intuitive&#13;
software API, have made scikit-learn to become one of the most popular Python &#13;
package to write machine learning code.&#13;
&#13;
In this talk, a general overview of scikit-learn will be presented, along with &#13;
brief explanations of the techniques provided out-of-the-box by the library.&#13;
&#13;
These explanations will be supported by working code examples, and insights on &#13;
algorithms' implementations aimed at providing hints on &#13;
how to extend the library code.&#13;
&#13;
Moreover, advantages and limitations of the `sklearn` package will be discussed &#13;
according to other existing machine learning Python libraries&#13;
(e.g., [`shogun`](http://shogun-toolbox.org "Shogun Toolbox"), &#13;
[`pyML`](http://pyml.sourceforge.net "PyML"), &#13;
[`mlpy`](http://mlpy.sourceforge.net "MLPy")).&#13;
&#13;
In conclusion, (examples of) applications of scikit-learn to big data and &#13;
computational intensive tasks will be also presented.&#13;
&#13;
The general outline of the talk is reported as follows (the order of the topics may vary):&#13;
&#13;
*   Intro to Machine Learning&#13;
    *   Machine Learning in Python&#13;
    *   Intro to Scikit-Learn&#13;
*   Overview of Scikit-Learn&#13;
    *   Comparison with other existing ML Python libraries&#13;
*   Supervised Learning with `sklearn`&#13;
    *   Text Classification with SVM and Kernel Methods&#13;
*   Unsupervised Learning with `sklearn`&#13;
    *   Partitional and Model-based Clustering (i.e., k-means and Mixture Models)&#13;
*   Scaling up Machine Learning&#13;
    *   Parallel and Large Scale ML with `sklearn`&#13;
&#13;
The talk is intended for an intermediate level audience (i.e., Advanced).&#13;
It requires basic math skills and a good knowledge of the Python language.&#13;
&#13;
Good knowledge of the `numpy` and `scipy` packages is also a plus.&#13;
&#13;
[0]: http://goo.gl/BnhoHa "Machine Learning: The Art and Science of Algorithms that Make Sense of Data, *Peter Flach, 2012*"</description><speakers><speaker id="250"><name>Valerio Maggio</name><profile>https://ep2014.europython.eu/en/accounts/profile/250/</profile><description>Valerio Maggio is a Postdoc Researcher at the University of Salerno. &#13;
His research interests are mainly focused on Machine Learning and &#13;
Software Engineering, recently combined with Semantic Web technologies &#13;
for (big) linked data analysis.&#8232;&#13;
Currently he uses Python as the mainstream language for his machine &#13;
learning code, making an intensive use of Scikit-learn and Matplotlib to &#13;
crunch, munge, and analyse experimental data.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/me_kyoto_3.jpg</image></speaker></speakers></entry><entry id="23"><category>Talk</category><audience>Novice</audience><topics><topic>Python Core</topic></topics><start>1145</start><duration>45</duration><room id="1">C01</room><title>Python Debugger Uncovered</title><abstract>This talk will explain how to implement a debugger for Python. We'll start with setting a simple trace function, then look how it is implemented in modern IDEs like PyCharm and Pydev. &#13;
Then we go further in the details and uncover the tricks used to implement some cool features like exception handling and multiprocess debugging.</abstract><description>Presentation describes how to implement debugger for Python and has 4 parts:&#13;
&#13;
* Tracing Python code&#13;
&#13;
    Explains how to use trace function&#13;
&#13;
* Debugger Architecture&#13;
&#13;
    Explains which parts consists of a modern full-fledged debugger.&#13;
&#13;
* A Bit of Details&#13;
&#13;
    Explains how to make code to work for all python versions and implementations, survive gevent monkey-patching etc.&#13;
&#13;
* Cool Features&#13;
&#13;
    Explains how to implement exception handling and multiprocess debugging&#13;
</description><speakers><speaker id="358"><name>Dmitry Trofimov</name><profile>https://ep2014.europython.eu/en/accounts/profile/358/</profile><description>Dmitry Trofimov has worked as a software developer for several companies using a lot of different programming languages.  Dmitry beliefs that Python language is the one that brings the most pleasure while programming. Working currently on PyCharm IDE he is making development in Python even more pleasurable. </description><image>https://ep2014.europython.eu/site_media/avatars/DSC_4262-smaller.jpg</image></speaker></speakers></entry><entry id="80"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1145</start><duration>45</duration><room id="5">A08</room><title>Probabilistic Programming in Python</title><abstract>Probabilistic Programming allows flexible specification of statistical models to gain insight from data. The high interpretability and ease by which different sources can be combined has huge value for Data Science. PyMC3 features next generation sampling algorithms, an intuitive model specification syntax, and just-in-time compilation for speed, to allow estimation of large-scale probabilistic models.&#13;
</abstract><description>Probabilistic Programming allows flexible specification of statistical models to gain insight from data. Estimation of best fitting parameter values, as well as uncertainty in these estimations, can be automated by sampling algorithms like Markov chain Monte Carlo (MCMC). The high interpretability and flexibility of this approach has lead to a huge paradigm shift in scientific fields ranging from Cognitive Science to Data Science and Quantitative Finance.&#13;
&#13;
PyMC3 is a new Python module that features next generation sampling algorithms and an intuitive model specification syntax. The whole code base is written in pure Python and Just-in-time compiled via Theano for speed.&#13;
&#13;
In this talk I will provide an intuitive introduction to Bayesian statistics and how probabilistic models can be specified and estimated using PyMC3.</description><speakers><speaker id="761"><name>Thomas Wiecki</name><profile>https://ep2014.europython.eu/en/accounts/profile/761/</profile><description>Thomas is currently finishing up his Ph.D. at Brown University where he investigates the neuronal underpinnings of mental illness using quantitative methods like Bayesian Modeling. &#13;
&#13;
He also works as a quantitative researcher for Quantopian Inc (https://www.quantopian.com) where he helps to build the worlds' first browser based algorithmic trading platform. </description><image>https://ep2014.europython.eu/site_media/avatars/tw3.jpg</image></speaker></speakers></entry><entry id="6"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1145</start><duration>45</duration><room id="2">B05/B06</room><title>How Pony ORM translates Python generators to SQL queries</title><abstract>Pony ORM is an Object-Relational Mapper implemented in Python. It uses an unusual approach for writing database queries using Python generators. Pony analyzes the abstract syntax tree of a generator and translates it to its SQL equivalent. The translation process consists of several non-trivial stages. In this talk one of Pony ORM authors will reveal the internal details of this process. </abstract><description>[Pony ORM](http://ponyorm.com) is an object-relational mapper implemented in Python. It allows writing advanced queries to a database using plain Python in the form of a generator expression. This way queries look very concise.&#13;
&#13;
The main feature of Pony is to provide a method to write declarative queries to databases in pure Python using generators. For this purpose Pony analyzes the abstract syntax tree of a generator and translates it to its SQL equivalent.&#13;
&#13;
Following is a sample of a query in Pony:&#13;
&#13;
    select(p for p in Product if "iPad" in p.name and p.price &gt;= 500)&#13;
&#13;
This query translates to SQL using a specific database dialect. Currently Pony works with SQLite, MySQL, PostgreSQL and Oracle databases.&#13;
&#13;
In this talk one of Pony ORM authors will go through the process of the query translation and dig into the implementation details.&#13;
&#13;
Attendees are going to walk away with the understanding of: &#13;
&#13;
1. Principles of building a programming language translator&#13;
2. Python to SQL translator implementation details &#13;
3. Approaches for creating a pluggable translator architecture &#13;
&#13;
The presentation outline:&#13;
&#13;
- Why Python generators are good for representing SQL queries&#13;
- Main stages of Python to SQL translation overview&#13;
- Decompiling Python bytecode into Python AST&#13;
- Translating Python AST to database-independent SQL representation&#13;
- Generating SQL for specific database&#13;
- Pluggable translator architecture&#13;
- Performance concerns: is such way of building SQL slower or faster then Django's and SQLAlchemy's?</description><speakers><speaker id="229"><name>Alexey Malashkevich</name><profile>https://ep2014.europython.eu/en/accounts/profile/229/</profile><description>Author of Pony ORM with more than 15 years of practical experience in building enterprise-class software in various roles. Before founding his own start-up, Alexey worked as a Tech Lead in a NYC based financial company.</description><image>https://ep2014.europython.eu/site_media/avatars/eu_ava.jpg</image></speaker></speakers></entry><entry id="9"><category></category><audience></audience><topics></topics><start>1230</start><duration>90</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Lunch</title><description></description><speakers></speakers></entry><entry id="78"><category>Talk</category><audience>Novice</audience><topics><topic>Science</topic></topics><start>1400</start><duration>30</duration><room id="5">A08</room><title>How to become a software developer in science?</title><abstract>My path from *'Hello world'* to software development was long and hard. The approach I learned during my research may help you to create high quality software and improve as a developer. The talk covers how you can benefit from your non-IT knowledge, atomize your project and how collaboration accelerates your learning.</abstract><description>**Goal**: give practical tools for improving skills and software quality to people with a background other than IT.&#13;
&#13;
Eight years ago, as a plant biologist, I knew almost nothing about programming. When I took a course in python programming, I found myself so fascinated that it altered my entire career. I became a scientific software developer. It was long and hard work to get from the level of 'Hello world' to the world of software development. The talk will cover how to embrace a non-IT education as a strength, how and why to atomize programming tasks and the importance of doing side projects.&#13;
&#13;
### 1. Embrace your background&#13;
Having domain specific knowledge from a field other than IT helps you to communicate with the team, the users and the group leader. It prevents misunderstandings and helps to define features better. A key step you can take is systematically apply the precise domain specific language to the code e.g when naming objects, methods or functions. Another is to describe the underlying scientific process step by step as a Use Case and write it down in pseudocode.&#13;
&#13;
### 2. Atomisation&#13;
Having a set of building block in your software helps to define responsibilities clearly. Smaller parts are easier to test, release and change. Modular design makes the software more flexible and avoids the Blob and Lava Flow Anti-Patterns. When using object oriented programming a rule of thumb is that an object (in Python also a method) does only one thing. You can express this Single Responsibility Principle as a short sentence for each module. Another practical action is to introduce Design Patterns that help to decouple data and its internal representation. As a result, your software becomes more flexible.&#13;
 &#13;
### 3. Participating in side projects&#13;
Learning from others is a great opportunity to grow. Through side projects you gain a fresh perspective and learn about best practices in project management. You gain new ideas for improvement and become aware of difficulties in your own project. You can easily participate in a scientific project by adding a small feature, writing a test suite or provide a code review on a part of a program.&#13;
&#13;
Summarizing, in scientific software development using domain-specific knowledge, atomisation of software, and participation in side projects are three things that help to create high quality software and to continuously improve as a developer.&#13;
&#13;
The talk will address challenges in areas where science differs from the business world. It will present general solution one might use for software developed in a scientific environment for research projects rather then discussing particular scientific packages. &#13;
&#13;
### Qualifications&#13;
During my PhD I developed a software on 3D RNA modeling (www.genesilico.pl/moderna/) that resulted in 7 published articles. I am coauthor on a paper on bioinformatic software development. Currently I am actively developing a system biology software in Python at the Humboldt University Berlin (www.rxncon.org).</description><speakers><speaker id="353"><name>Magdalena Rother</name><profile>https://ep2014.europython.eu/en/accounts/profile/353/</profile><description>Magdalena Rother during her PhD developed a software on 3D RNA modeling (www.genesilico.pl/moderna/) that resulted in 7 published articles. She is coauthor on a paper on bioinformatic software development. Currently she actively develops a system biology software in Python at the Humboldt University Berlin (www.rxncon.org).</description><image>https://ep2014.europython.eu/site_media/avatars/MRother_photo_2.png</image></speaker></speakers></entry><entry id="3"><category>Talk</category><audience>Novice</audience><topics><topic>Best Practices</topic></topics><start>1400</start><duration>30</duration><room id="4">B09</room><title>Lessons learned from building Elasticsearch client</title><abstract>Lessons learned when building a client for a fully distributed system and trying to minimize context-switching pains when using multiple languages.</abstract><description>Last year we decided to create official clients for the most popular languages, Python included.&#13;
&#13;
Some of the goals were:&#13;
&#13;
* support the complete API of elasticsearch including all parameters&#13;
* provide a 1-to-1 mapping to the rest API to avoid having opinions and provide a familiar interface to our users consistent across languages and evironments&#13;
* degrade gracefully when the es cluster is changing (nodes dropping out or being added)&#13;
* flexibility - allow users to customize and extend the clients easily to suit their, potentially unique, environment&#13;
&#13;
In this talk I would like to take you through the process of designing said client, the challenges we faced and the solutions we picked. Amongst other things I will touch on the difference between languages (and their respective communities), the architecture of the client itself, mapping out the API and making sure it stays up to date and integrating with existing tools.&#13;
</description><speakers><speaker id="152"><name>Honza Kr&#225;l</name><profile>https://ep2014.europython.eu/en/accounts/profile/152/</profile><description>Honza is a Python programmer and Django core developer &#8211; since he is scared of&#13;
the bright and shiny world of browsers, designers, and users he prefers to stay&#13;
buried deep in the infrastructure code and just provides others with tools to&#13;
do the actual site-building.&#13;
&#13;
Since 2008 Honza has been building content web sites for fun and profit. During&#13;
this time he discovered Elasticsearch which lead to him joining the company&#13;
behind it in 2013 to work on the Python drivers.</description><image>https://ep2014.europython.eu/site_media/avatars/cb.jpg</image></speaker></speakers></entry><entry id="19"><category>Talk</category><audience>Advanced</audience><topics><topic>Web</topic></topics><start>1400</start><duration>30</duration><room id="1">C01</room><title>Morepath: a Python Web Framework with Super Powers</title><abstract>[Morepath](http://morepath.readthedocs.org) is a server web framework written with modern, rich client web development in mind. Why another new Python web framework in 2014? &#13;
&#13;
Because it can be done better: Morepath understands how to construct hyperlinks from models. Writing a generic view in Morepath is like writing any other view. With Morepath, you can reuse, extend and override apps as easily as you can construct them.&#13;
&#13;
Even if you don't end up using Morepath, you will learn something about how the nature of web frameworks.&#13;
</abstract><description>[Morepath](http://morepath.readthedocs.org) is a new server web&#13;
framework written with modern, rich client web development in mind.&#13;
&#13;
In the talk I will be discussing some core features of Morepath that&#13;
make it different:&#13;
&#13;
* Its different take on routing and linking. Morepath has support&#13;
  to help you construct hyperlinks to models.&#13;
* Its view system: plain views, generic views, view composition.&#13;
* Morepath's approach to application construction allows application extension and overriding, and composition.&#13;
&#13;
This talk will attempt to convince people to try Morepath. For those&#13;
unable or unwilling to try, I will communicate some design principles&#13;
behind Morepath which can be of help to any web developer.</description><speakers><speaker id="284"><name>Martijn Faassen</name><profile>https://ep2014.europython.eu/en/accounts/profile/284/</profile><description>Martijn Faassen has been a Python developer since 1998. He's been involved in Zope, Grok, helped start EuroPython and was the original creator of lxml.&#13;
&#13;
More recently he's been hacking on Morepath, a Python web framework with super powers.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/martijn_faassen.png</image></speaker></speakers></entry><entry id="56"><category>Talk</category><audience>Novice</audience><topics><topic>Education</topic></topics><start>1400</start><duration>30</duration><room id="2">B05/B06</room><title>Python for Zombies: 15.000 enrolled in the first Brazilian MOOC to teach Python</title><abstract>Experiences of how we spread the Python community in Brazil with a non english MOOC (Massive Open Online Course) to teach programming. Hacking basic modules and classes to obtain the "Answer to the Ultimate Question of Life, the Universe, and Everything". A funny way to teach programming.</abstract><description>Python for Zombies is the first MOOC (Massive Open Online Course) to teach programming in portuguese. Our first edition had 15.000 "zombies".  This course is very different from traditional MOOCs (Edx, Coursera, etc).  First is an initiative of the brazilian Python community. Besides the difference of language, it is very "casual", as I have little time, I recorded most of the videos on my trips between meetings, conferences or at mealtimes. This MOOC is "brazilian", in a non traditional academic way. The size of the videos is far lower than the average traditional courses too. I will show you the most funny codes that I used in MOOC classes to teach programming:  hacking basic modules and classes to obtain the "Answer to the Ultimate Question of Life, the Universe, and Everything". All material is Creative Commons Share Alike. The MOOC is based in my experience to teach programming in past six years at FATEC, a public university in Brazil, with decreasing rates of failure in the introduction to programming discipline. We have 100% class in labs, Coding Dojos to training and tests in exercises. Slides: http://bit.ly/python-for-zombies</description><speakers><speaker id="46"><name>Fernando Masanori Ashikaga</name><profile>https://ep2014.europython.eu/en/accounts/profile/46/</profile><description>Professor at FATEC S&#227;o Jos&#233; dos Campos, loves teaching. Developed projects for Software Express, Cobra Technology, Credicard Mastercard, PwC (PriceWaterhouseCoopers) and ITA&#218; Bank Boston. Interests: Python, Business Analytics, NoSQL. Creator of the first brazilian MOOC to teach programming "Python for Zombies" http://pycursos.com/python-para-zumbis/</description><image>https://ep2014.europython.eu/site_media/avatars/Massa.jpg</image></speaker></speakers></entry><entry id="77"><category>Training</category><audience>Novice</audience><topics></topics><start>1400</start><duration>180</duration><room id="6">A03/A04</room><title>Python for System Administrators</title><abstract>The training goal is to show how to use python and the Python Standard Library to replace a variegate set of administration tools like grep, sed, awk, perl and gnuplot.&#13;
&#13;
&#13;
&#13;
</abstract><description>This interactive training introduces the use of python and ipython to quickly perform system administration tasks like:&#13;
&#13;
- gather system data on different platforms (Linux, Windows, Mac);&#13;
- parse them efficiently;&#13;
- make basic statistics like distribution, deviation, aggregation, correlation;&#13;
- plot data;&#13;
&#13;
Students will be driven performing the exercises and sharing their results. &#13;
&#13;
Participants should setup and test their environment - eg. ipython, numpy scipy, psutil, nose -  following the [provided instructions](https://github.com/ioggstream/python-course/blob/master/python-for-sysadmin/README.setup).&#13;
&#13;
Novice should consider reading the  [introductory crash course](https://github.com/ioggstream/python-course/blob/master/python-for-sysadmin/README)&#13;
&#13;
&#13;
Extra topics are:&#13;
&#13;
- use the  Python Standard Library to monitor services;&#13;
- expose monitored data via http with flask;&#13;
&#13;
Feel free to [contact me](mailto:robipolli@gmail.com) for any issue or question!</description><speakers><speaker id="248"><name>Roberto Polli</name><profile>https://ep2014.europython.eu/en/accounts/profile/248/</profile><description>Roberto works at Babel, migrating big mail infrastructures to open solutions. Develops in Python, C and Java to foster communities around various FLOSS, trying to bring both social and IT innovation.&#13;
&#13;
He's a Red Hat Certified Engineer and Virtualization Administrator, but loves maintaining free software, including the caldav java library: caldav4j.&#13;
&#13;
A life ago he took a Math degree, and he's really proud of it.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/rpolli_400.jpg</image></speaker></speakers></entry><entry id="90"><category>Training</category><audience>Advanced</audience><topics></topics><start>1400</start><duration>180</duration><room id="7">A05/A06</room><title>Topic Modeling For Fun and Profit</title><abstract>This is a hands-on workshop for extracting and utilizing semantic topics from large collections of natural language texts.&#13;
&#13;
By the end, participants will have built an application for efficiently processing, indexing and querying the entire English Wikipedia, using wondrous Python tools.&#13;
</abstract><description>Workshop assumes knowledge of intermediate Python concepts (classes, generators, iterators).&#13;
&#13;
* 20 min: motivation &amp; dataset: the English Wikipedia&#13;
* 30 min: NLP: tokenization, lemmatization (textblob)&#13;
* 60 min: topic modeling (gensim)&#13;
* 60 min: document indexing, querying, parallelization (gensim)&#13;
* 10 min: cushion/extra: "Wikipedia similarity" web app (flask)&#13;
&#13;
Install beforehand: IPython, NumPy, SciPy, TextBlob, Gensim + optionally Flask+Angular (all Python &amp; open-source).&#13;
&#13;
Linux, OSX and Windows are all fine.</description><speakers><speaker id="274"><name>Radim Rehurek</name><profile>https://ep2014.europython.eu/en/accounts/profile/274/</profile><description>Radim runs a privately owned consulting company that specializes in building systems for intelligent, automated analysis of (big) data: radimrehurek.com.&#13;
&#13;
A tech geek and developer at heart, Radim founded and led Seznam.cz&#8217;s research department (Sklik, Search, Zbozi, &#8230;), then moved on to develop and consult for various international companies and startups.&#13;
&#13;
Radim has lived around the globe with his wife for the past decade, but moved to Prague after receiving the Czech Hope award for his PhD thesis in 2012. He&#8217;s now trying to evangelize data-driven business solutions and help aspiring entrepreneurs make the most of their data.</description><image>https://ep2014.europython.eu/site_media/avatars/radim2.png</image></speaker></speakers></entry><entry id="18"><category>Talk</category><audience>Novice</audience><topics><topic>Science</topic></topics><start>1430</start><duration>30</duration><room id="5">A08</room><title>Learning Chess from data</title><abstract>Is watching a chess game enough to figure out the rules?&#13;
What is common denominator between different plays and game ending?&#13;
In this presentation, we will show how Machine Learning and Hadoop &#13;
can help us re-discover chess rules and gain new understanding of the game.</abstract><description>Can empirical samples unveil the big picture?&#13;
Is chess games descriptions expose good enough data to gain understanding of chess rules - legal piece moves, castling, check versus checkmate, etc.&#13;
Which features are important in describing a chess game and which features are not. What is a good representation of a chess game for this uses.&#13;
What is the minimal sample size which is required in order to learn this in a good enough manner and where this learning can go wrong.&#13;
&#13;
&#13;
**Ne3  =&gt;  E=mc2**&#13;
&#13;
Looking at the bigger picture - Can we understand big systems based on empirical samples.&#13;
Can we reverse engineer physics and discover how physical system work based on no external knowledge beside empirical samples.</description><speakers><speaker id="302"><name>Niv Mizarhi</name><profile>https://ep2014.europython.eu/en/accounts/profile/302/</profile><description>Niv Mizrahi is a builder &amp; coder. He is an engineering director at Taykey &amp; holds a B.Sc in Physics from Tel Aviv University.&#13;
He is interested in Data problems and large-scale distributed system. &#13;
Niv's mother is a robot &amp; Code is his first language.</description><image>https://ep2014.europython.eu/site_media/avatars/561952_102971469866829_419869712_n.jpg</image></speaker><speaker id="304"><name>Tom Ron</name><profile>https://ep2014.europython.eu/en/accounts/profile/304/</profile><description>Love data of all sizes, geek, tech enthusiastic and long distance runner. </description><image></image></speaker></speakers></entry><entry id="24"><category>Talk</category><audience>Advanced</audience><topics><topic>Web</topic></topics><start>1430</start><duration>30</duration><room id="1">C01</room><title>The inner guts of Bitbucket</title><abstract>Today Bitbucket is more than 30 times bigger than at the time of acquisition almost 4 years ago and serves repositories to over a million developers.&#13;
&#13;
This talk lays out its current architecture in great detail, from Gunicorn and Django to Celery and HA-Proxy to NFS.&#13;
</abstract><description>This talk is about Bitbucket's architecture. Leaving no stone unturned, I'll be covering the entire infrastructure. Every component, from web servers to message brokers and load balancing to managing hundreds of terabytes of data.&#13;
&#13;
Since its inception in 2008, Bitbucket has grown from a standard, modest Django app into a large, complex stack that while still based around Django, has expanded into many more components.&#13;
&#13;
Today Bitbucket is more than 30 times bigger than at the time of acquisition almost 4 years ago and serves Git and Mercurial repos to over a million users and growing faster now than ever before.&#13;
&#13;
Our current architecture and infrastructure was shaped by rapid growth and has resulted in a large, mostly horizontally scalable system. What has not changed is that it's still nearly all Python based and could serve as inspiration or validation for other community members responsible for rapidly scaling their apps.&#13;
&#13;
This talk will layout the entire architecture and motivate our technology choices. From our Gunicorn to Celery and HA-Proxy to NFS.&#13;
</description><speakers><speaker id="821"><name>Erik van Zijst</name><profile>https://ep2014.europython.eu/en/accounts/profile/821/</profile><description>Erik has been a passionate software professional for 15 years, who considers software to be a craft, not science.&#13;
&#13;
Launching his career in his native Amsterdam in 1999, he served as architect for a financial market data startup from its inception until acquisition. He then co-founded a not so successful Palo-Alto based online real-time video streaming startup. In a deliberate move back to more hands-on coding, Erik joined Atlassian in 2008 and relocated to Sydney, Australia. After having worked on various product teams, he joined the newly formed team to run Bitbucket after its acquisition since 2010.&#13;
&#13;
Currently based out of San Francisco Erik continues to work on Bitbucket.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/erik-avatar.jpg</image></speaker></speakers></entry><entry id="21"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1430</start><duration>30</duration><room id="2">B05/B06</room><title>Jython in practice</title><abstract>A lot of people have heard of Jython, some have tried it, but it seems few have actually deployed it in a corporate environment. In this talk I'll share my experiences in using Jython as a testbed for Java applications, for rapid prototyping in Java desktop and web environments, and for embedding scripting capabilities in Java products. </abstract><description>    A lot of people have heard of Jython, some have tried it, but it seems few have actually deployed it in a corporate environment. In this talk I'll share my experiences in using Jython as a testbed for Java applications, for rapid prototyping in Java desktop and web environments, and for embedding scripting capabilities in Java products.&#13;
&#13;
    Not everyone gets paid to work with Python all the time, but if you find yourself in a Java project, there are good chances you could benefit from Python without throwing out the Java stack. Using Jython, you can do rapid prototyping without the long edit-compile-test cycles normally associated with large Java projects, whether on the web or the desktop, and when testing an application might become a nightmare of scaffolding in Java, a little Jython may be just what you need to be able to run your tests smoothly.&#13;
&#13;
    At the end of this talk, I will put on my politician&#180;s hat and bring up the best - and worst - arguments to use to get permission to use Jython in a corporate environment. </description><speakers><speaker id="299"><name>Fredrik H&#229;&#229;rd</name><profile>https://ep2014.europython.eu/en/accounts/profile/299/</profile><description>Fredrik H&#229;&#229;rd is a freelance software developer and contractor, occasional speaker or teacher. With ten years of consulting under his belt, he has lost faith in frameworks. Fredrik is  the chair of Python Sverige, and the chief instigator of the first PyCon Sweden.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/me_6.jpg</image></speaker></speakers></entry><entry id="124"><category>Talk</category><audience>Novice</audience><topics><topic>Education</topic></topics><start>1430</start><duration>30</duration><room id="4">B09</room><title>Pioneering the Future of Computing Education</title><abstract>How the Raspberry Pi Foundation are leading the way in the computing in schools revolution by providing affordable open and connectable hardware to people of all levels of experience.&#13;
&#13;
Now we have an education team, we're pushing forward with creating resources and training teachers to help deliver modern computing education around the world.&#13;
&#13;
All our learning resources are Creative Commons licensed and available on GitHub. We write materials that match the UK computing curriculum.</abstract><description>I'm Ben, from Raspberry Pi. I do development and outreach for the Foundation and I work with the rest of the education team to help make learning through computer science, coding and hardware hacking more accessible to all.&#13;
&#13;
In this talk I explain the Raspberry Pi story: its mission - the reason the Pi exists; what happened before release - getting the board in to production; what happened in the first two years - the community birth and growth; and what's coming next - education focus, new hardware and improved software.&#13;
&#13;
Python is the main language used (and advocated by us) in education with Raspberry Pi.&#13;
&#13;
We're creating learning resources to match up with the new UK computing curriculum, where we teach young people programming and computer science concepts with Python on Pi, and help teachers deliver quality material in the classroom to work towards the objectives the curriculum sets out to achieve.&#13;
&#13;
With Raspberry Pi we open up possibilities for connecting to the real world in an accessible way using the powerful, high level and human read/write -able language of Python.&#13;
&#13;
We work closely with the community: hobbyists organising Raspberry Jam events; educators teaching with Raspberry Pi; the software communities and their contributions - and we welcome any interested parties to get involved with helping us provide for the wider community.</description><speakers><speaker id="209"><name>Ben Nuttall</name><profile>https://ep2014.europython.eu/en/accounts/profile/209/</profile><description>I'm a software developer working at the Raspberry Pi Foundation. I'm responsible for the website, I'm part of the Education Team and I do plenty of outreach and community engagement. I'm into free software and I like to explore uses of GitHub in Education.</description><image>https://ep2014.europython.eu/site_media/avatars/ben-nuttall.png</image></speaker></speakers></entry><entry id="8"><category>Talk</category><audience>Novice</audience><topics><topic>Best Practices</topic></topics><start>1500</start><duration>30</duration><room id="4">B09</room><title>The ideal REST API for the AngularJS applications</title><abstract>This talk will summarize, in a series of easy-to-follow recipes, the best practices of building a comprehensive REST API required to support a relatively big AngularJS application. &#13;
&#13;
We will build API iteratively, while creating our AngularJS app. Along the way, we will look into bottlenecks and pitfalls that await you once you step beyond the trivial "hello world" apps.&#13;
&#13;
The main takeaway of the talk: listeners should obtain enough info to have an *informed* opinion whether AngularJS is easy enough to choose for their next project.</abstract><description>## Motivation&#13;
&#13;
I became interested in AngularJS framework about a year ago, as a part of my graduate studies at Georgia Tech. I have been following this amazing technology development ever since.&#13;
&#13;
With a recent trend of Single Page Apps (SPAs) becoming more and more sophisticated and more widely accepted, it is necessary to revisit our REST API design and implementation strategies. &#13;
&#13;
While REST style has been around for quite some time, it is still considered informal and only vaguely understood, which is probably because not many of us developers have actually spent time reading Fielding's dissertation (including me, until some time ago). &#13;
&#13;
Recently I have finished designing backend specifications for relatively complex AngularJS application (it deals with event management, and is scheduled for beta later on this year). &#13;
&#13;
In this talk, I want to share my insights on designing and implementing non-trivial REST API to fully utilize AngularJS stack.&#13;
&#13;
## Format&#13;
&#13;
The talk will not be a REST 101, as I will concentrate on specific *practical* problems that arise when implementing backend API.&#13;
&#13;
During the talk, I will walkthrough the audience through the process of building simple AngularJS app, with all necessary REST backend implemented on top of the Flask framework.&#13;
&#13;
Each topic, that we will discuss, will be presented as a three section block: &#13;
&#13;
- a) Problem Postulation &#13;
- b) Proposed Implementation &#13;
- c) Pitfalls, Gotchas and Tips.&#13;
&#13;
**Note:** Flask is used as illustration, therefore techniques I present are almost framework-agnostic, as the micro-framework imposes quite a few requirements on a developer. My aim is to make sure that examples are easily adaptable to your framework of choice.&#13;
&#13;
## Topic Covered&#13;
&#13;
Here is a rough outline of topics/themes that I will cover (it is what I am working on now, list can probably be expanded, but only slightly):&#13;
&#13;
- CRUD (emphasis on integration with Form processing facilities of AngularJS)&#13;
- Designing URLs (Interconnecting with AngularJS navigation)&#13;
- Content Negotiation (language, representation format)&#13;
- Security (both Authentication and Authorization)&#13;
- Caching&#13;
- API Testing (including load testing)&#13;
- API Extension and Versioning&#13;
- Beyond CRUD: Collections + Querying&#13;
&#13;
## Target Audience&#13;
&#13;
I expect people be familiar with Python (obviously). Additionally, I expect people to have basic knowledge of the REST architecture style (to get most out of the talk)&#13;
&#13;
No prior familiarity with AngularJS is expected (I will provide some quick overview of the framework w/i talk).&#13;
&#13;
Anyone interested in exploring what AngularJS framework has to offer, should benefit from this talk.&#13;
&#13;
## Extra notes&#13;
&#13;
I can present the talk as 180min. tutorial or as a long talk. The former will have more hands-on approach in it. &#13;
&#13;
It will be same when it comes to topics covered, but we will have more time to actually practice creating sample AngularJS application and necessary backend API in real-time.&#13;
&#13;
Additionally, if it is better to present the topic as tutorial, we will cover some best practices of AngularJS application creation too e.g. using conventional toolset (yeoman, grunt, bower etc).</description><speakers><speaker id="41"><name>Victor Farazdagi</name><profile>https://ep2014.europython.eu/en/accounts/profile/41/</profile><description>- Graduate student at Georgia Tech&#13;
- ACM Professional Member</description><image>https://ep2014.europython.eu/site_media/avatars/farazdagi.jpg</image></speaker></speakers></entry><entry id="71"><category>Talk</category><audience>Advanced</audience><topics><topic>System Administration</topic></topics><start>1500</start><duration>30</duration><room id="1">C01</room><title>Packaging in packaging: dh-virtualenv</title><abstract>Deploying your software can become a tricky task, regardless of the&#13;
language. In the spirit of the Python conferences, every conference&#13;
needs at least one packaging talk.&#13;
&#13;
This talk is about dh-virtualenv. It's a Python packaging tool aimed&#13;
for Debian-based systems and for deployment flows that already take&#13;
advantage of Debian packaging with Python virtualenvs&#13;
</abstract><description>[Dh-virtualenv][1] is an open source tool developed at Spotify. We use it&#13;
to ease deploying our Python software to production. We built dh-virtualenv as a tool that fits our existing continuous integration flow with a dedicated sbuild server.&#13;
As we were already packaging software in Debian packages, the&#13;
aim of dh-virtualenv was to make transition to virtualenv based installations as smooth as possible.&#13;
&#13;
This talk covers how you can use dh-virtualenv to help you deploy your&#13;
software to production, where you are already running a Debian-based system, such as Ubuntu, and what are the advantages and disadvantages of the approach over other existing and&#13;
popular techniques. We will discuss the deploying as a problem in&#13;
general, look into building a dh-vritualenv-backed package, and in the&#13;
end, look into how dh-virtualenv was actually made.&#13;
&#13;
Goal is that after this presentation you know how to make your Debian/Ubuntu deployments easier!&#13;
&#13;
[dh-virtualenv][1] if fully open sourced, production tested software,&#13;
licensed under GPLv2+ and available in Debian testing and unstable.&#13;
&#13;
More information of it is also available in our [blogpost][2].&#13;
&#13;
&#13;
Talk outline:&#13;
&#13;
1. Introduction &amp; overview (3min)&#13;
    * Who am I?&#13;
    * Why am I fiddling with Python packaging?&#13;
    * What do you get out of this talk?&#13;
2.  Different shortcomings of Python deployments (5min)&#13;
    * Native system packages&#13;
    * Virtualenv based installations&#13;
    * Containers, virtual machine images&#13;
3. dh-virtualenv (10 min)&#13;
    * What is dh-virtualenv?&#13;
    * Thought behind dh-virtualenv&#13;
    * Advantages over others&#13;
    * Requirements for your deployment flow&#13;
    * Short intro to packaging Sentry with dh-virtualenv&#13;
4. How is it built? (10 min)&#13;
    * Debian package building flow primer&#13;
    * How dh-virtualenv fits that flow&#13;
    * What does it do build time and why?&#13;
&#13;
[1]:http://github.com/spotify/dh-virtualenv&#13;
[2]:http://labs.spotify.com/2013/10/10/packaging-in-your-packaging-dh-virtualenv/&#13;
</description><speakers><speaker id="733"><name>Jyrki Pulliainen</name><profile>https://ep2014.europython.eu/en/accounts/profile/733/</profile><description>Jyrki Pulliainen is a Python hacker and open source advocate, who has been working with the snakes for over 7 years.&#13;
&#13;
His background is in web back-ends and nowadays he's a content engineer at Spotify. On the side he also runs PyCon Sweden and helps out with the Stockholm Python user group.&#13;
</description><image>https://ep2014.europython.eu/site_media/avatars/jyrki_2.jpg</image></speaker></speakers></entry><entry id="13"><category>Talk</category><audience>Novice</audience><topics><topic>Science</topic></topics><start>1500</start><duration>30</duration><room id="5">A08</room><title>Non Sequitur: An exploration of Python's random module</title><abstract>An exploration of Python's random module for the curious programmer, this talk will give a little background in statistics and pseudorandom number generation, explain the properties of python's choice of pseudorandom generator and explore through visualizations the different distributions provided by the module.</abstract><description># Audience&#13;
Non mathematical people who wants a better understanding of Python's random module.&#13;
&#13;
# Objectives&#13;
The audience will understand pseudorandom number generators, the properties of Python's Mersenne Twister and the differences and possible use cases between the distributions provided by the `random` module. &#13;
&#13;
# The talk&#13;
I will start by talking about what randomness means and then about how we try to achieve it in computing through pseudorandom number generators (5 min.)&#13;
&#13;
I will give a brief overview of pseudorandom number generation techniques, show how their quality can be assessed and finally talk about Python's Mersenne Twister and why it is a fairly good choice. (10 min.)&#13;
&#13;
Finally I will talk about how from randomness we can build generators with interesting probability distributions. I'll compare through visualizations thos provided in Python's `random` module and show examples of when they can be useful in real-life. (10 min.)</description><speakers><speaker id="59"><name>Javier Jair Trejo Garc&#237;a</name><profile>https://ep2014.europython.eu/en/accounts/profile/59/</profile><description>Jair is a web project developer, manager and consultant. He has been developing software professionally for the past four years, mostly on the web, but his interest in programming is a life-long affair.</description><image>https://ep2014.europython.eu/site_media/avatars/new-profile-pic.jpg</image></speaker></speakers></entry><entry id="58"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1500</start><duration>30</duration><room id="2">B05/B06</room><title>Farewell and Welcome Home: Python in Two Genders</title><abstract>After half a lifetime I transitioned from male to female while staying involved in the Python community. This talk discusses that transition and explores how I found life in Python as a woman different from my former life as a man and the lessons about diversity I have learned.</abstract><description>After half a lifetime "undercover as a man" I transitioned from male to female while staying involved in the Python community. This talk discusses that transition and explores how I found life in Python as a woman different from my former life as a man and the lessons about diversity I have learned.&#13;
&#13;
This talk will include a brief discussion of what being transgender means, my experiences as I came to terms with it, and the losses and gains transition entailed. Early on I made the decision to be as open as possible and to stay engaged in the Python community as I transitioned and I will discuss why I made that decision and the levels of acceptance and support I encountered.&#13;
&#13;
Transition has been wonderfully successful, but that very transition put me in a surprisingly different world. Now being part of not one, but at least 3 groups that are minorities in the Python world gave me a very different view of a community I thought I knew, and pushed me to being an activist (or trouble maker) in spite of myself. In addition to the many positives the Python community has offered me on my journey, I will discuss the experiences that have made me understand that privilege is very much alive and well in the Python world.</description><speakers><speaker id="396"><name>Naomi Ceder</name><profile>https://ep2014.europython.eu/en/accounts/profile/396/</profile><description>Naomi Ceder is the author of the Quick Python Book, 2nd Ed. Naomi has has taught Python in schools and in the community for many years, and she was the originator of PyCon North America poster session and Education summit. She is currently Lead Architect for RazorOccam/Zoro Tools Europe.</description><image>https://ep2014.europython.eu/site_media/avatars/Naomi_headshot2.jpg</image></speaker></speakers></entry><entry id="133"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1500</start><duration>30</duration><room id="3">B07/B08</room><title>The Continuum Platform: Advanced Analytics and Web-based Interactive Visualization for Enterprises</title><abstract>The people at Continuum have been involved in the Python community for decades. As a company our mission is to empower domain experts inside enterprises with the best tools for producing software solutions that deal with large and quickly-changing data. The Continuum Platform brings the world of open source together into one complete, easy-to-manage analytics and visualization platform. In this talk, Dr. Oliphant will review the open source libraries that Continuum is building and contributing to the community as part of this effort, including Numba, Bokeh, Blaze, conda, llvmpy, PyParallel, and DyND, as well as describe the freely available components of the Continuum Platform that anyone can benefit from today: Anaconda, wakari.io, and binstar.org.</abstract><description>The people at Continuum have been involved in the Python community for decades. As a company our mission is to empower domain experts inside enterprises with the best tools for producing software solutions that deal with large and quickly-changing data. The Continuum Platform brings the world of open source together into one complete, easy-to-manage analytics and visualization platform. In this talk, Dr. Oliphant will review the open source libraries that Continuum is building and contributing to the community as part of this effort, including Numba, Bokeh, Blaze, conda, llvmpy, PyParallel, and DyND, as well as describe the freely available components of the Continuum Platform that anyone can benefit from today: Anaconda, wakari.io, and binstar.org.</description><speakers><speaker id="1328"><name>Travis Oliphant</name><profile>https://ep2014.europython.eu/en/accounts/profile/1328/</profile><description>Travis has a Ph.D. from the Mayo Clinic and B.S. and M.S. degrees in Mathematics and Electrical Engineering from Brigham Young University. Since 1997, he has worked extensively with Python for numerical and scientific programming, most notably as the primary developer of the NumPy package, and as a founding contributor of the SciPy package. He is also the author of the definitive "Guide to NumPy".&#13;
&#13;
Travis was an assistant professor of Electrical and Computer Engineering at BYU from 2001-2007, where he taught courses in probability theory, electromagnetics, inverse problems, and signal processing. He also served as Director of the Biomedical Imaging Lab, where he researched satellite remote sensing, MRI, ultrasound, elastography, and scanning impedance imaging.&#13;
&#13;
From 2007-2011, Travis was the President at Enthought, Inc. During his tenure there, the company grew from 15 to 50 employees, and Travis worked with well-known Fortune 50 companies in finance, oil-and-gas, and consumer-products. He was involved in all aspects of the contractual relationship, including consulting, training, code-architecture, and development.&#13;
&#13;
As CEO of Continuum Analytics, Travis engages customers, develops business strategy, and guides technical direction of the company. He actively contributes to software development and engages with the wider open source community in the Python ecosystem.</description><image>https://ep2014.europython.eu/site_media/avatars/travis2.png</image></speaker></speakers></entry><entry id="16"><category></category><audience></audience><topics></topics><start>1530</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Coffee Break</title><description></description><speakers></speakers></entry><entry id="116"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1600</start><duration>30</duration><room id="4">B09</room><title>Presenting the EuroPython Society (EPS)</title><abstract>The EuroPython Society (EPS) holds the IP rights to the EuroPython conference series and manages the organization of the EuroPython conference events.&#13;
&#13;
The EPS board would like to provide more insight into the work done by the EPS, invite attendees to become members of the EPS and would like to reach out to anyone who would like to help with our mission.</abstract><description>The EuroPython Society (EPS) holds the IP rights to the EuroPython conference series and manages the organization of the EuroPython conference events.&#13;
&#13;
The EPS board would like to provide more insight into the work done by the EPS, invite attendees to become members of the EPS and would like to reach out to anyone who would like to help with our mission.</description><speakers><speaker id="135"><name>Marc-Andr&#233; Lemburg</name><profile>https://ep2014.europython.eu/en/accounts/profile/135/</profile><description>Marc-Andre is the CEO and founder of eGenix.com, a Python-focused project and consulting company based in Germany. He has a degree in mathematics from the University of D&#252;sseldorf. His work with and for Python started in Winter 1993. In 1997, he became a Python Core Developer. He designed and implemented the Unicode support in Python.&#13;
&#13;
Marc-Andre is a founding member of the Python Software Foundation (PSF) and has served on the PSF Board several times. He is also board member of the EuroPython Society (EPS) which organizes the EuroPython conference series and the author of the well-known mx Extensions, e.g. mxTextTools, mxDateTime and mxODBC, which are now distributed and maintained through eGenix.com.&#13;
&#13;
Today Marc-Andre spends most of his time managing large-scale customer projects heavily relying on Python and databases.</description><image>https://ep2014.europython.eu/site_media/avatars/mal-business-2-446x446.png</image></speaker></speakers></entry><entry id="26"><category></category><audience></audience><topics></topics><start>1600</start><duration>90</duration><room id="1">C01</room><title>Lightning Talks</title><description></description><speakers></speakers></entry><entry id="115"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1630</start><duration>30</duration><room id="4">B09</room><title>EuroPython Society General Assembly</title><abstract>The EuroPython Society (EPS) will have its annual Generally Assembly at EuroPython 2014.&#13;
&#13;
The general assembly is open to all EPS members and EuroPython attendees. During the session, we will report on our work, the EPS finances, vote on a new board and any other motions announced in the invitation to the general assembly.&#13;
&#13;
Please see the EPS bylaws for details.</abstract><description>The EuroPython Society (EPS) will have its annual Generally Assembly at EuroPython 2014.&#13;
&#13;
The general assembly is open to all EPS members and EuroPython attendees. During the session, we will report on our work, the EPS finances, vote on a new board and any other motions announced in the invitation to the general assembly.&#13;
&#13;
Please see the EPS bylaws for details.</description><speakers><speaker id="135"><name>Marc-Andr&#233; Lemburg</name><profile>https://ep2014.europython.eu/en/accounts/profile/135/</profile><description>Marc-Andre is the CEO and founder of eGenix.com, a Python-focused project and consulting company based in Germany. He has a degree in mathematics from the University of D&#252;sseldorf. His work with and for Python started in Winter 1993. In 1997, he became a Python Core Developer. He designed and implemented the Unicode support in Python.&#13;
&#13;
Marc-Andre is a founding member of the Python Software Foundation (PSF) and has served on the PSF Board several times. He is also board member of the EuroPython Society (EPS) which organizes the EuroPython conference series and the author of the well-known mx Extensions, e.g. mxTextTools, mxDateTime and mxODBC, which are now distributed and maintained through eGenix.com.&#13;
&#13;
Today Marc-Andre spends most of his time managing large-scale customer projects heavily relying on Python and databases.</description><image>https://ep2014.europython.eu/site_media/avatars/mal-business-2-446x446.png</image></speaker></speakers></entry><entry id="117"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1700</start><duration>30</duration><room id="4">B09</room><title>EuroPython 2015 - Let's build it together</title><abstract>The EuroPython Society has announced that it will change the organizational setup for the upcoming 2015 conference to a model based on distributed work groups rather than having a local organizer manage the whole event.&#13;
&#13;
We would like to invite everyone who's interested in making EuroPython 2015 happen to this session.</abstract><description>The EuroPython Society has announced that it will change the organizational setup for the upcoming 2015 conference to a model based on distributed work groups rather than having a local organizer manage the whole event.&#13;
&#13;
We would like to invite everyone who's interested in making EuroPython 2015 happen to this session.&#13;
&#13;
----&#13;
&#13;
The presentation will present the new work group setup and provide a forum for questions and answers.</description><speakers><speaker id="135"><name>Marc-Andr&#233; Lemburg</name><profile>https://ep2014.europython.eu/en/accounts/profile/135/</profile><description>Marc-Andre is the CEO and founder of eGenix.com, a Python-focused project and consulting company based in Germany. He has a degree in mathematics from the University of D&#252;sseldorf. His work with and for Python started in Winter 1993. In 1997, he became a Python Core Developer. He designed and implemented the Unicode support in Python.&#13;
&#13;
Marc-Andre is a founding member of the Python Software Foundation (PSF) and has served on the PSF Board several times. He is also board member of the EuroPython Society (EPS) which organizes the EuroPython conference series and the author of the well-known mx Extensions, e.g. mxTextTools, mxDateTime and mxODBC, which are now distributed and maintained through eGenix.com.&#13;
&#13;
Today Marc-Andre spends most of his time managing large-scale customer projects heavily relying on Python and databases.</description><image>https://ep2014.europython.eu/site_media/avatars/mal-business-2-446x446.png</image></speaker></speakers></entry><entry id="65"><category></category><audience></audience><topics></topics><start>1800</start><duration>120</duration><room>ALL</room><title>Sponsored Event: elasticsearch meetup</title><description></description><speakers></speakers></entry></day><day date="2014-07-25"><entry id="119"><category>Keynote</category><audience>Novice</audience><topics></topics><start>0900</start><duration>45</duration><room id="1">C01</room><title>Python's Role in Big Data Analytics: Past, Present, and Future</title><abstract>Python has had a long history in Scientific Computing which means it has had the fundamental building blocks necessary for doing Data Analysis for many years. As a result, Python has long played a role in scientific problems with the largest data sets. Lately, it has also grown in traction as a tool for doing rapid Data Analysis. As a result, Python is the center of an emerging trend that is unifying traditional High Performance Computing with "Big Data" applications. In this talk I will discuss the features of Python and its popular libraries that have promoted its use in data analytics. I will also discuss the features that are still missing to enable Python to remain competitive and useful for data scientists and other domain experts. Finally, will describe open source projects that are currently occupying my attention which can assist in keeping Python relevant and even essential in Data Analytics for many years to come.</abstract><description>Python has had a long history in Scientific Computing which means it has had the fundamental building blocks necessary for doing Data Analysis for many years. As a result, Python has long played a role in scientific problems with the largest data sets. Lately, it has also grown in traction as a tool for doing rapid Data Analysis. As a result, Python is the center of an emerging trend that is unifying traditional High Performance Computing with "Big Data" applications. In this talk I will discuss the features of Python and its popular libraries that have promoted its use in data analytics. I will also discuss the features that are still missing to enable Python to remain competitive and useful for data scientists and other domain experts. Finally, will describe open source projects that are currently occupying my attention which can assist in keeping Python relevant and even essential in Data Analytics for many years to come.</description><speakers><speaker id="1328"><name>Travis Oliphant</name><profile>https://ep2014.europython.eu/en/accounts/profile/1328/</profile><description>Travis has a Ph.D. from the Mayo Clinic and B.S. and M.S. degrees in Mathematics and Electrical Engineering from Brigham Young University. Since 1997, he has worked extensively with Python for numerical and scientific programming, most notably as the primary developer of the NumPy package, and as a founding contributor of the SciPy package. He is also the author of the definitive "Guide to NumPy".&#13;
&#13;
Travis was an assistant professor of Electrical and Computer Engineering at BYU from 2001-2007, where he taught courses in probability theory, electromagnetics, inverse problems, and signal processing. He also served as Director of the Biomedical Imaging Lab, where he researched satellite remote sensing, MRI, ultrasound, elastography, and scanning impedance imaging.&#13;
&#13;
From 2007-2011, Travis was the President at Enthought, Inc. During his tenure there, the company grew from 15 to 50 employees, and Travis worked with well-known Fortune 50 companies in finance, oil-and-gas, and consumer-products. He was involved in all aspects of the contractual relationship, including consulting, training, code-architecture, and development.&#13;
&#13;
As CEO of Continuum Analytics, Travis engages customers, develops business strategy, and guides technical direction of the company. He actively contributes to software development and engages with the wider open source community in the Python ecosystem.</description><image>https://ep2014.europython.eu/site_media/avatars/travis2.png</image></speaker></speakers></entry><entry id="129"><category>Talk</category><audience>Novice</audience><topics><topic>Other</topic></topics><start>1000</start><duration>30</duration><room id="3">B07/B08</room><title>Python Driven Company</title><abstract>Adopting Python across a company brings extra agility and productivity not provided by traditional mainstream tools like Excel. This is the story of programmers teaching non-programmers, from different departments, to embrace Python in their daily work.</abstract><description>By introducing ipython notebook, pandas and the other data analysis packages that make python even more accessible and attractive, we attempted to adapt python as a core technology across our whole company. We&#8217;ve challenged the dominant position of Microsoft Excel and similar tools, and dared to replace it by pandas-powered ipython notebooks.&#13;
&#13;
During this transitional phase, we have been inspired and sometimes forced to develop multiple packages that extend pandas, numpy etc., in order to enable our colleagues, in other departments, to access all the data they need. Moreover, we are developing several high level functionalities for the notebook environment. &#13;
&#13;
The notebook environment is allowing us to be extremely responsive to the changes our users are asking for, since, for part of the work, we don&#8217;t have to go through the whole traditional development process.&#13;
&#13;
The talk focuses on challenges and problems we&#8217;ve solved and managed in order to achieve our long term goal of creating highly agile, data-driven non-tech teams, free from the constraints imposed by mainstream technologies, and all of this thanks to python.</description><speakers><speaker id="407"><name>Maciej Sobczak</name><profile>https://ep2014.europython.eu/en/accounts/profile/407/</profile><description>I love python, AI, physics and running. &#13;
&#13;
The most important for me is to lead passion driven life.</description><image></image></speaker></speakers></entry><entry id="86"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1000</start><duration>30</duration><room id="4">B09</room><title>Scientific Visualization with GR</title><abstract>Python developers often get frustrated when managing visualization packages that cover the specific needs in scientific or engineering environments. The [*GR* framework](http://gr-framework.org/) could help. *GR* is a library for visualization applications ranging from publication-quality 2D graphs to the creation of complex 3D scenes and can easily be integrated into existing Python environments or distributions like *Anaconda*.</abstract><description>Python has long been established in software development departments of research and industry, not least because of the proliferation of libraries such as *SciPy* and *Matplotlib*. However, when processing large amounts of data, in particular in combination with GUI toolkits (*Qt*) or three-dimensional visualizations (*OpenGL*), it seems that Python as an interpretative programming language may be reaching its limits.&#13;
&#13;
---&#13;
&#13;
*Outline*&#13;
&#13;
- Introduction (1 min)&#13;
    - motivation&#13;
- GR framework (2 mins)&#13;
    - layer structure&#13;
    - output devices and capabilities&#13;
- GR3 framework (1 min)&#13;
    - layer structure&#13;
    - output capabilities (3 mins)&#13;
        - high-resolution images&#13;
        - POV-Ray scenes&#13;
        - OpenGL drawables&#13;
        - HTML5 / WebGL&#13;
- Simple 2D / 3D examples (2 min)&#13;
- Interoperability (PyQt/PySide, 3 min)&#13;
- How to speed up Python scripts (4 mins)&#13;
    - Numpy&#13;
    - Numba (Pro) &#13;
- Animated visualization examples (live demos, 6 mins)&#13;
    - physics simulations&#13;
    - surfaces / meshes&#13;
    - molecule viewer&#13;
    - MRI voxel data&#13;
- Outlook (1 min)&#13;
&#13;
*Notes*&#13;
&#13;
Links to similar talks, tutorials or presentations can be found [here][1]. Unfortunately, most of them are in German language.&#13;
&#13;
The GR framework has already been presented in a talk at PyCon DE [2012][2] and [2013][3], during a [poster session][4] at PyCon US 2013, and at [PythonCamps 2013][5] in Cologne. The slides for the PyCon.DE 2013 talk can be found [here][6].&#13;
&#13;
As part of a collaboration the GR framework has been integrated into [NICOS][7] (a network-based control system completely written in Python) as a replacement for PyQwt.&#13;
&#13;
  [1]: http://gr-framework.org/&#13;
  [2]: https://2012.de.pycon.org/programm/schedule/sessions/54&#13;
  [3]: https://2013.de.pycon.org/schedule/sessions/45/&#13;
  [4]: https://us.pycon.org/2013/schedule/presentation/158/&#13;
  [5]: http://josefheinen.de/rasberry-pi.html&#13;
  [6]: http://iffwww.iff.kfa-juelich.de/pub/doc/PyCon_DE_2013&#13;
  [7]: http://cdn.frm2.tum.de/fileadmin/stuff/services/ITServices/nicos-2.0/dirhtml/&#13;
</description><speakers><speaker id="599"><name>Josef Heinen</name><profile>https://ep2014.europython.eu/en/accounts/profile/599/</profile><description>Josef Heinen is the head of the group "Scientific IT-Systems" at the Peter Gr&#252;nberg Institute / J&#252;lich Centre for Neutron Science, both institutes at Forschungszentrum J&#252;lich, a leading research centre in Germany. The design and development of visualization systems have been an essential part of his activities over the last twenty years. He is involved in several Open Source projects. Most recently his team is engaged with the further development of a universal framework for cross-platform visualization applications (GR Framework).</description><image>https://ep2014.europython.eu/site_media/avatars/jh.png</image></speaker></speakers></entry><entry id="61"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1000</start><duration>30</duration><room id="5">A08</room><title>Scalable Realtime Architectures in Python</title><abstract>This talk will focus on you can readily implement highly scalable and fault tolerant realtime architectures, such as dashboards, using Python and tools like Storm, Kafka, and ZooKeeper. We will focus on two related aspects: composing reliable systems using at-least-once and idempotence semantics and how to partition for locality.</abstract><description>Increasingly we are interested in implementing highly scalable and&#13;
fault tolerant realtime architectures such as the following:&#13;
&#13;
* Realtime aggregation. This is the realtime analogue of working with&#13;
  batched map-reduce in systems like Hadoop.&#13;
&#13;
* Realtime dashboards. Continuously updated views on all your&#13;
  customers, systems, and the like, without breaking a sweat.&#13;
&#13;
* Realtime decision making. Given a set of input streams, policy on&#13;
  what you like to do, and models learned by machine learning, optimize a&#13;
  business process. One example includes autoscaling a set of servers.&#13;
&#13;
(We use realtime in the soft sense: systems that are continuously&#13;
computing on input streams of data and make a best effort to keep up;&#13;
it certainly does not imply hard realtime systems that strictly&#13;
bound their computation times.)&#13;
&#13;
Obvious tooling for such implementations include Storm (for event&#13;
processing), Kafka (for queueing), and ZooKeeper (for tracking and&#13;
configuration). Such components, written respectively in Clojure&#13;
(Storm), Scala (Kafka), and Java (ZooKeeper), provide the desired&#13;
scalability and reliability. But what may not be so obvious at first&#13;
glance is that we can work with other languages, including Python, for&#13;
the application level of such architectures. (If so inclined, you can&#13;
also try reimplementing such components in Python, but why not use&#13;
something that's been proven to be robust?)&#13;
&#13;
In fact Python is likely a better language for the app level, given&#13;
that it is concise, high level, dynamically typed, and has great&#13;
libraries. Not to mention fun to write code in! This is especially&#13;
true when we consider the types of tasks we need to write: they are&#13;
very much like the data transformations and analyses we would have&#13;
written of say a standard Unix pipeline. And no one is going to argue&#13;
that writing such a filter in say Java is fun, concise, or even&#13;
considerably faster in running time.&#13;
&#13;
So let's look at how you might solve such larger problems. Given that&#13;
it was straightforward to solve a small problem, we might approach as&#13;
follows. Simply divide up larger problems in small one. For example,&#13;
perhaps work with one customer at a time. And if failure is an ever&#13;
present reality, then simply ensure your code retries, just like you&#13;
might have re-run your pipeline against some input files.&#13;
&#13;
Unfortunately both require distributed coordination at scale. And&#13;
distributed coordination is challenging, especially for real systems,&#13;
that will break at scale. Just putting a box in your architecture&#13;
labeled **"ZooKeeper"** doesn't magically solve things, even if&#13;
ZooKeeper can be a very helpful part of an actual solution.&#13;
&#13;
Enter the Storm framework. While Storm certainly doesn't solve all&#13;
problems in this space, it can support many different types of&#13;
realtime architectures and works well with Python. In particular,&#13;
Storm solves two key problems for you.&#13;
&#13;
**Partitioning**. Storm lets you partition streams, so you can break&#13;
down the size of your problem. But if the a node running your code&#13;
fails, Storm will restart it. Storm also ensures such topology&#13;
invariants as the number of nodes (spouts and bolts in Storm's lingo)&#13;
that are running, making it very easy to recover from such failures.&#13;
&#13;
This is where the cleverness really begins. What can you do if you can&#13;
ensure that **all the data** you need for a given continuously updated&#13;
computation - what is the state of this customer's account?  - can be&#13;
put in **exactly one place**, then flow the supporting data through it&#13;
over time? We will look at how you can readily use such locality in&#13;
your own Python code.&#13;
&#13;
**Retries**. Storm tracks success and failure of events being&#13;
processed efficiently through a batching scheme and other&#13;
cleverness. Your code can then choose to retry as necessary. Although&#13;
Storm also supports exactly-once event processing semantics, we will&#13;
focus on the simpler model of at-least-once semantics. This means your&#13;
code must tolerate retry, or in a word, is idempotent. But this is&#13;
straightforward. We have often written code like the following:&#13;
&#13;
    seen = set()&#13;
    for record in stream:&#13;
        k = uniquifier(record)&#13;
        if k not in seen:&#13;
           seen.add(k)&#13;
           process(record)&#13;
&#13;
Except of course that any such real usage has to ensure it doesn't&#13;
attempt to store all observations (first, download the Internet! ;),&#13;
but removes them by implementing some sort of window or uses data&#13;
structures like HyperLogLog, as we will discuss.&#13;
&#13;
One more aspect of reliability we will discuss is how to compose&#13;
reliable systems out of reliable components; we will show how this&#13;
can be readily done with a real example of consuming Kafka and&#13;
tracking consumption progress in ZooKeeper.</description><speakers><speaker id="414"><name>Jim Baker</name><profile>https://ep2014.europython.eu/en/accounts/profile/414/</profile><description>Jim is a committer on Jython, for which he has worked on nearly every aspect from compilation to Unicode, and a co-author of the Definitive Guide to Jython. Jim is a senior software developer at Rackspace, where he works at the intersection of big data and cloud computing. He is also a lecturer in computer science at the University of Colorado at Boulder, where he teaches Principles of Programming Languages. He is a graduate of Harvard College and Brown University and is a nominated member of the Python Software Foundation.</description><image></image></speaker></speakers></entry><entry id="106"><category>Talk</category><audience>Advanced</audience><topics><topic>Best Practices</topic></topics><start>1000</start><duration>30</duration><room id="2">B05/B06</room><title>Generators, or how to step to infinity and beyond</title><abstract>Generators are a great weapon in every programmer toolkit, they allow you to write elegant code even when working on infinite streams of data.&#13;
&#13;
In this talk I'm going to show the differences between iterators, iterables, generators, coroutines, how to define them and give many real world examples.</abstract><description>Generators are a great weapon in every programmer toolkit, they allow you to write elegant code even working on infinite streams of data.&#13;
&#13;
We start by introducing a problem that can be solved both by a classic list construction and with a generators.&#13;
Then we use this problem to build up more advanced solution using generators or custom iterable objects, and analyze the benefits (and the possibly drawbacks) of this approach.&#13;
&#13;
In the last section we talk about coroutines and how the yield statement allows us to write nice asynchronous code that has a synchronous look-and-feel.</description><speakers><speaker id="251"><name>Andrea Crotti</name><profile>https://ep2014.europython.eu/en/accounts/profile/251/</profile><description>I'm currently working as Python/Django developer in London after other Python experiences in the aerospace and hardware industries.&#13;
&#13;
I started to use Python 7 years ago and it still does not stop to amaze me how much I can get done with so little elegant code.&#13;
&#13;
I've been attending Python conferences in the last few years and enjoyed giving talks about various topics, from decorators to TDD.</description><image>https://ep2014.europython.eu/site_media/avatars/andrea_face_1.jpg</image></speaker></speakers></entry><entry id="66"><category>Talk</category><audience>Novice</audience><topics><topic>Science</topic></topics><start>1000</start><duration>30</duration><room id="1">C01</room><title>Combining the powerful worlds of Python and R</title><abstract>Although maybe not very well known in the Python community there exists a powerful statistical open-source ecosystem called R. Mostly used in scientific contexts it provides lots of functionality for doing statistical analysis, generation of various kinds of plots and graphs, and much, much more.&#13;
&#13;
The triplet [R](http://www.r-project.org "R"), [Rserve](https://rforge.net/Rserve/ "Rserve"), and [pyRserve](https://pypi.python.org/pypi/pyRserve/ "pyRserve") allows the building up of a network bridge from Python to R: Now R-functions can be called from Python as if they were implemented in Python, and even complete R scripts can be executed through this connection.</abstract><description>pyRserve is a small open source project originally developed to fulfill the needs of a German biotech company to do statistical analysis in a large Python-based Lab Information Management System (LIMS). In contrast to other R-related libraries like RPy where Python and R run on the same host, pyRserve allows the distribution of complex operations and calculations over multiple R servers across the network. &#13;
&#13;
The aim of this talk is to show how easily Python can be connected to R, and to present a number of selected (simple) code examples which demonstrate the power of this setup.</description><speakers><speaker id="686"><name>Ralph Heinkel</name><profile>https://ep2014.europython.eu/en/accounts/profile/686/</profile><description>Ralph has been a Python developer since 1998, mainly is the field of molecular biology and biocomputing, but also in finance. &#13;
&#13;
Currently he works as freelance Python DevOp and technical lead for biotechnology and pharma companies, mainly doing web-based LIMS (Laboratory information management systems) development. Besides his contributions to Open source (e.g. http://pypi.python.org/pypi/pyrserve) he has a full training as body therapist, and actively practices meditation and mindfulness trainings.</description><image>https://ep2014.europython.eu/site_media/avatars/ralph-no-panic.jpg</image></speaker></speakers></entry><entry id="85"><category>Training</category><audience>Advanced</audience><topics></topics><start>1000</start><duration>180</duration><room id="6">A03/A04</room><title>Interactive experiments in sound synthesis with Nsound, numpy and matplotlib</title><abstract>After a brief introduction to the theoretical foundations, the training is divided in several practice sections, each approx. 15-20 min. long. In these, a short demonstration of the programming tools for the topic is followed by examples and hands-on excercises for the participants to implement.&#13;
</abstract><description>Overview&#13;
--------&#13;
&#13;
This training intends to teach how to experiment with generating sounds and digital signals in an interactive programming and exploration environment provided by [IPython](http://ipython.org/), [matplotlib](http://matplotlib.org/) and the [Nsound](http://nsound.sourceforge.net/) package.&#13;
&#13;
Participants will learn how to generate various waveforms, tones and noises and explore these by listening and easy plotting of various diagrams, all using simple Python code.&#13;
&#13;
&#13;
Topics&#13;
------&#13;
&#13;
* Sound sampling, digital signals and processing&#13;
* Generating and plotting waveforms&#13;
* Loading WAV files&#13;
* Adding sine waves and combining waveforms&#13;
* Producing audio output and WAV files&#13;
* Frequency spectrum diagrams&#13;
* Analyzing harmonic content&#13;
* Mixing Signals&#13;
* Filters&#13;
* Modulation: envelopes, low frequency oscillators (LFOs), and filter modulation&#13;
* Subtractive synthesis structure&#13;
&#13;
&#13;
Preparation&#13;
-----------&#13;
&#13;
Participants should bring a laptop with Linux (preferred), Windows, or OS X and good headphones. An external audio interface may help with audio performance but is not essential.&#13;
&#13;
Install the following prerequisite software:&#13;
&#13;
* A C/C++ compiler&#13;
  (under debian-like systems, install the 'build-essential' package)&#13;
* Python* (2.7)&#13;
* setuptools (2.x)&#13;
* virtualenv (&gt;= 1.10)&#13;
* Scons (2.3.0)&#13;
* SWIG&#13;
* portaudio*&#13;
&#13;
Any or all of:&#13;
&#13;
  - pygtk* (2.24)&#13;
  - pyqt4*&#13;
  - pyqt5*&#13;
  - wxpython* (3.0)&#13;
&#13;
\* including development headers&#13;
&#13;
Create a virtual environment with Python 2.7 and install the following Python packages and their dependencies:&#13;
&#13;
* Cython (0.20)&#13;
* IPython (1.1.x)&#13;
* matplotlib (1.3.x)&#13;
* numpy (1.8.x)&#13;
* Nsound (0.9.0)&#13;
&#13;
All these, except Nsound, may be installed from PyPI via pip. For Nsound, download the distribution package from its website and follow the installation instructions in the user's guide.&#13;
&#13;
&#13;
Schedule&#13;
--------&#13;
&#13;
1. A very short introduction to the basic principles of sound sampling, digital signals and sound synthesis (30 min. lecture)&#13;
&#13;
2. Exploring the programming environment (20 min., participants follow trainer)&#13;
   &#13;
    (Running IPython/pylab, verifying the matplotlib, Nsound and audio setup with  provided example scripts, first experiments)&#13;
&#13;
3. Generating and plotting waveforms (15 min. with excercises)&#13;
&#13;
4. Combining signals and generating complex sound files (15 min. with excercises)&#13;
&#13;
5. Plotting frequency spectrum diagrams and analyzing harmonic content (10. min)&#13;
&#13;
6. Modulating sound with envelopes and LFOs (20 min. with excercises)&#13;
  &#13;
7. Filtering audio by using and combining different filter types&#13;
  (20 min. with excercises)&#13;
&#13;
8. Putting the pieces together: building a processing chain for subtractive synthesis (20 min., participants follow trainer)&#13;
  &#13;
9. Participants work in groups on one of the following projects (30. min):&#13;
&#13;
    * Generating Sci-Fi sound effects&#13;
    * Implementing delays and modulation effects&#13;
    * Sequencing sound clips&#13;
&#13;
    For each project a handout with goals, hints and helpful code fragments is  provided.&#13;
&#13;
A coffee break is planned for after item 5.</description><speakers><speaker id="419"><name>Christopher Arndt</name><profile>https://ep2014.europython.eu/en/accounts/profile/419/</profile><description>Freelancing Python developer, trainer and Open Source consultant based in Cologne, Germany.&#13;
&#13;
Has worked with Python for over 15 years and was involved with setting up the Python User Group Cologne, pyCologne, in 2006 and has been an active member of the German Python community ever since. &#13;
&#13;
He plays the guitar and keyboards as a hobby and devotes much of his spare time to synthesizers, sound design and all things related to music production.</description><image>https://ep2014.europython.eu/site_media/avatars/chrisarndt_2014_gross.jpg</image></speaker></speakers></entry><entry id="92"><category>Training</category><audience>Advanced</audience><topics></topics><start>1000</start><duration>180</duration><room id="7">A05/A06</room><title>Improving your automated testing with pytest</title><abstract>This is a hands-on course with lots of student activities. Bring your laptop with pytest pre-installed. The presentation parts are usually short and include real-life examples. Students will create or use own tests or real-life projects from the very beginning. Exercises are an important part of the training. Students are encouraged to bring their own problems to be discussed at the end of the course and, if there is interest, during the conference in an additional open space.  </abstract><description>Many people learn testing through the JUnit/PYUnit paradigm. Lately, py.test's new fixture mechanisms have gained traction among many Pythonistas. This tutorial explores pytest and discusses key strategies how to benefit from using pytest for your existing unittest/nose based code bases.  &#13;
&#13;
-  (30 minutes) pytest feature walkthrough: automatic test discovery, assert statement, modular parametrizable fixtures, 50 plugins&#13;
&#13;
 -  (60 minutes) pytest fixture mechanism: dependency injection, declaring and using function/module/session scoped fixtures, using fixtures from fixture functions, parametrizing fixtures. Exercises.&#13;
&#13;
 -    (30 minutes): running nose/unittest/trial suites with pytest. Discussing advantages and limitations. Exercise with select existing real-life open source projects.&#13;
&#13;
 -     (30 minutes): Strategies for a) migrating to pytest b) using "autouse" fixtures in conjunction with XUnit-based setup/tearodwn methods. Exercise.&#13;
&#13;
- (30 minutes): open space for questions and interactively solving pytest/unittest integration problems on real-life problems as time permits. &#13;
</description><speakers><speaker id="275"><name>Holger Krekel</name><profile>https://ep2014.europython.eu/en/accounts/profile/275/</profile><description>Founder of PyPy, main author  of pytest, tox, devpi and execnet projects.  Trainer and conference speaker. Likes playing Go, listening to DnB and Electro Swing and caring for his son. </description><image></image></speaker></speakers></entry><entry id="5"><category></category><audience></audience><topics></topics><start>1030</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Breakfast</title><description></description><speakers></speakers></entry><entry id="29"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1100</start><duration>30</duration><room id="5">A08</room><title>Big Data Analytics with Python using Stratosphere</title><abstract>[Stratosphere](http://stratosphere.eu/) is a distributed platform for advanced big data analytics. It features a rich set of operators, advanced, iterative data flows, an efficient runtime, and automatic program optimization. We present Stratophere's new Python programming interface. It allows Python developers to easily get their hands on Big Data.</abstract><description>[Stratosphere](http://stratosphere.eu/) is implemented in Java. In 2013 we introduced support for writing Stratosphere programs in Scala. Since Scala also runs in the Java JVM the language integration was easy for Scala.&#13;
&#13;
In late 2013, we started to develop a generic language binding framework for Stratosphere to support non-JVM languages such as Python, JavaScript, Ruby but also compiled languages such as C++. The language binding framework uses [Google&#8217;s Protocol Buffers](https://code.google.com/p/protobuf/) for efficient data serialization and transportation between the languages.&#13;
&#13;
Since many &#8220;Data Scientists&#8221; and machine learning experts are using Python on a daily basis, we decided to use Python as the reference implementation for Stratosphere&#8217;s language binding feature.&#13;
Our talk at the EuroPython 2014 will present how Python developers can leverage the Stratosphere Platform to solve their big data problems.&#13;
&#13;
We introduce the most important concepts of Stratosphere such as the operators, connectors to data sources, data flows, the compiler, iterative algorithms and more.&#13;
Stratosphere is a mature, next generation big-data analytics platform developed by a vibrant [open-source community](https://github.com/stratosphere/stratosphere). The system is available under the Apache 2.0 license. &#13;
&#13;
The project started in 2009 as a joint research project of multiple universities in the Berlin area (Technische Universit&#228;t, Humboldt Universit&#228;t and Hasso-Plattner Institut). Nowadays it is an award winning system that has gained worldwide attention in both research and industry.&#13;
&#13;
A note to the program committee: As mentioned, the development of the Python language binding of Stratosphere has started a few months ago, therefore, the code is not yet in the main development branch. However, we are already able to execute the &#8220;Hello World&#8221; of big data, the &#8220;Word Count&#8221; example using the Python interface. See this example in the development branch: https://github.com/filiphaase/stratosphere/blob/langbinding/stratosphere-addons/stratosphere-language-binding/src/main/python/eu/stratosphere/language/binding/wordcountexample/WordCountPlan.py&#13;
&#13;
&#13;
Please contact us if you have any questions!</description><speakers><speaker id="1430"><name>Chesnay Schepler</name><profile>https://ep2014.europython.eu/en/accounts/profile/1430/</profile><description>I'm currently enrolled as a 6th semester Bachelor Computer Science student&#13;
at the Freie Universt&#228;t Berlin. Since April 2014 I work as a Student Research&#13;
Assistant at the Technische Universit&#228;t Berlin as part of the Stratosphere&#13;
team. My work in the Stratosphere team includes the development of the new Python API as well as enhancements of the core system.</description><image></image></speaker></speakers></entry><entry id="45"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1100</start><duration>30</duration><room id="1">C01</room><title>Out-of-Core Columnar Datasets</title><abstract>Tables are a very handy data structure to store&#13;
datasets to perform data analysis (filters, groupings, sortings,&#13;
alignments...).&#13;
&#13;
But it turns out that *how the tables are actually implemented* makes a large impact on how they perform.&#13;
&#13;
Learn what you can expect from the current tabular offerings in the Python ecosystem.</abstract><description>It is a fact: we just entered in the Big Data era.  More sensors, more&#13;
computers, and being more evenly distributed throughout space and time&#13;
than ever, are forcing data analyists to navigate through oceans of&#13;
data before getting insights on what this data means.&#13;
&#13;
Tables are a very handy and spreadly used data structure to store&#13;
datasets so as to perform data analysis (filters, groupings, sortings,&#13;
alignments...).  However, the actual table implementation, and&#13;
especially, whether data in tables is stored row-wise or column-wise,&#13;
whether the data is chunked or sequential, whether data is compressed or not,&#13;
among other factors, can make a lot of difference depending on the&#13;
analytic operations to be done.&#13;
&#13;
My talk will provide an overview of different libraries/systems in the&#13;
Python ecosystem that are designed to cope with tabular data, and how&#13;
the different implementations perform for different operations.  The&#13;
libraries or systems discussed are designed to operate either with&#13;
on-disk data ([PyTables] [1], [relational databases] [2], [BLZ] [3],&#13;
[Blaze] [4]...) as well as in-memory data containers ([NumPy] [5],&#13;
[DyND] [6], [Pandas] [7], [BLZ] [3], [Blaze] [4]...).&#13;
&#13;
A special emphasis will be put in the on-disk (also called&#13;
out-of-core) databases, which are the most commonly used ones for&#13;
handling extremely large tables.&#13;
&#13;
The hope is that, after this lecture, the audience will get a better&#13;
insight and a more informed opinion on the different solutions for&#13;
handling tabular data in the Python world, and most especially, which&#13;
ones adapts better to their needs.&#13;
&#13;
[1]: http://www.pytables.org&#13;
[2]: http://en.wikipedia.org/wiki/Relational_database&#13;
[3]: http://blz.pydata.org&#13;
[4]: http://blaze.pydata.org&#13;
[5]: http://www.numpy.org/&#13;
[6]: https://github.com/ContinuumIO/dynd-python&#13;
[7]: http://pandas.pydata.org/&#13;
</description><speakers><speaker id="695"><name>Francesc Alted</name><profile>https://ep2014.europython.eu/en/accounts/profile/695/</profile><description>Francesc Alted is a Python and C hacker.  He works as a freelancer helping others to squeeze the last drop of performance out of systems. He also loves doing training on performance Python.&#13;
&#13;
Creator of PyTables, Blosc, BLZ and developer of numexpr and Blaze.&#13;
&#13;
He also enjoys good movies.</description><image>https://ep2014.europython.eu/site_media/avatars/foto-meua.png</image></speaker></speakers></entry><entry id="42"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1100</start><duration>30</duration><room id="3">B07/B08</room><title>Event discrete simulation with SimPy</title><abstract>Often, experiments with real world systems are high-risk, accompanied by high&#13;
costs or not even possible at all. That&#8217;s when simulations come into play.&#13;
This talk will give a brief introduction into the topic of simulation. By means&#13;
of simple examples, it will demonstrate how you can use SimPy to implement&#13;
event-discrete simulations and which features SimPy offers to help you doing&#13;
that.</abstract><description>Simulation is important for the analysis of complex systems or the analysis of&#13;
the impact of certain actions on that systems. They are especially useful if&#13;
the actions are potentially harmful or expensive.&#13;
&#13;
Simulation is used in various natural scientific and economic areas, e.g., for&#13;
the modeling and study of biological or physical systems, for resource&#13;
scheduling and optimization or at the research for the integration of renewable&#13;
energies into the power grid (my personal background). The simulated time can&#13;
thereby be seen as continuous or discrete (discrete time or discrete event).&#13;
&#13;
In this talk, I want to show why Python is a good choice for implementing&#13;
simulation models and how SimPy can help here.&#13;
&#13;
Structure of the talk (20min talking + 5min discussion + 5min buffer):&#13;
&#13;
- Why simulation? (5min)&#13;
- History of SimPy (3min)&#13;
- How does SimPy work? (9min)&#13;
- Conclusion (3min)&#13;
&#13;
In the introduction, I&#8217;ll briefly explain what simulation is and motivate, why&#13;
it is a useful tool.&#13;
&#13;
The main part will consist of an introduction and demonstration of SimPy. Since&#13;
SimPy is now more then ten years old, I&#8217;ll first give a quick overview about&#13;
its history and development. Afterwards, I&#8217;ll explain SimPy&#8217;s concepts and&#13;
features by means of simple examples.&#13;
&#13;
In the conclusion, I&#8217;ll give a short outlook on the future development of&#13;
SimPy.&#13;
&#13;
The main goal of this talk is to create awareness that simulation is a powerful&#13;
tool in a lot of domains and to give the audience enough information to ease&#13;
their first steps.</description><speakers><speaker id="368"><name>Stefan Scherfke</name><profile>https://ep2014.europython.eu/en/accounts/profile/368/</profile><description>Stefan is a scientific assistant and passionate Python programmer at [OFFIS](http://www.offis.de) in&#13;
Oldenburg, Germany.&#8194;His current work centers around Smart Grid simulation and&#13;
the development of [mosaik](https://mosaik.offis.de), a co-simulation library for smart energy systems.&#13;
He is also one of the authors of [SimPy](http://simpy.readthedocs.org).</description><image>https://ep2014.europython.eu/site_media/avatars/ssc1.jpg</image></speaker></speakers></entry><entry id="28"><category>Talk</category><audience>Advanced</audience><topics><topic>Best Practices</topic></topics><start>1100</start><duration>30</duration><room id="2">B05/B06</room><title>Everything You Always Wanted to Know About Memory in Python But Were Afraid to Ask</title><abstract>Have you ever wondered what happens to all the precious RAM after running your 'simple' CPython code? &#13;
Prepare yourself for a short introduction to CPython memory management!&#13;
This presentation will try to answer some memory related questions you always wondered about. It will also discuss basic memory profiling tools and techniques.</abstract><description>This talk will cover basics of CPython memory usage. &#13;
It will start with basics like objects and data structures representation.&#13;
Then advanced memory management aspects, such as sharing, segmentation, preallocation or caching, will be discussed. Finally, memory profiling tools will be presented. </description><speakers><speaker id="292"><name>Piotr Przymus</name><profile>https://ep2014.europython.eu/en/accounts/profile/292/</profile><description>He is a Ph.D. Student of Computer Science at the Faculty of Mathematics and Computer Science, Nicolaus Copernicus University, Torun, Poland. His main scientific interests are: database systems, GPGPU computing and data mining. He is a big Python fan.</description><image>https://ep2014.europython.eu/site_media/avatars/IMG_0360-002.JPG</image></speaker></speakers></entry><entry id="127"><category>Talk</category><audience>Advanced</audience><topics><topic>Security</topic></topics><start>1100</start><duration>30</duration><room id="4">B09</room><title>Twisted Names: DNS Building Blocks for Python Programmers</title><abstract>In this talk I will report on my efforts to update the DNS components of Twisted&#13;
and discuss some of the things I've learned along the way. I'll demonstrate the&#13;
EDNS0, DNSSEC and DANE client support which I have been working on and show how&#13;
these new Twisted Names components can be glued together to build novel DNS&#13;
servers and clients.&#13;
&#13;
Twisted is an event-driven networking engine written in Python and&#13;
licensed under the open source MIT license.  It is a platform for&#13;
developing internet applications.</abstract><description># Description&#13;
&#13;
My talk will consist of four main sections. Given the 30 minute time constraint,&#13;
I may shorten or drop the two introductory parts in favour of the narrative and&#13;
demonstration of interesting new APIs and code examples in the final two&#13;
parts. My experience of delivering a similar talk at PyconUK 2013 is that those&#13;
are the parts that will most interest the audience and prompt most audience&#13;
questions.&#13;
&#13;
Here are my proposed sections with rough time allocations and descriptions:&#13;
&#13;
## Introducing Twisted Names (0-5)&#13;
&#13;
Twisted includes a comprehensive set of DNS components, collectively&#13;
known as Twisted Names.&#13;
&#13;
-   &lt;https://twistedmatrix.com/trac/wiki/TwistedNames&gt;&#13;
&#13;
I will begin the talk with a quick introduction to Twisted Names and its&#13;
capabilities, including one or two simple code examples.&#13;
&#13;
## Introducing My Project (0-5)&#13;
&#13;
With generous funding from The NLnet Foundation I am adding EDNS(0) and DNSSEC&#13;
client support in Twisted Names, including full DNSSEC verification and DANE&#13;
support.&#13;
&#13;
In the talk I will quickly summarise the steps taken and lessons learned in&#13;
securing that funding, and hope to encourage the audience to seek funding to&#13;
support there own pet OSS projects.&#13;
&#13;
## What's New in Twisted Names / Project Progress Report (10)&#13;
&#13;
My project plan is divided into the following broad milestones.&#13;
&#13;
1.  EDNS(0)&#13;
&#13;
    1.  OPT record&#13;
&#13;
    2.  Extended Message object with additional EDNS(0) items&#13;
&#13;
    3.  EDNS Client&#13;
&#13;
2.  RRSET handling&#13;
&#13;
    1.  Canonical Form and Order of Resource Records&#13;
&#13;
    2.  Receiving RRSETs&#13;
&#13;
3.  DNSSEC&#13;
&#13;
    1.  New DNSSEC Records and Lookup Methods&#13;
&#13;
    2.  Security-aware Non-validating Client&#13;
&#13;
    3.  Validating Client&#13;
&#13;
4.  DANE&#13;
&#13;
    1.  A twistd dns authoritative server capable of loading and serving TLSA&#13;
        records.&#13;
&#13;
    2.  A Twisted web client Agent wrapper which performs TLSA lookup and&#13;
        verification of a server certificate.&#13;
&#13;
    3.  A HostnameClientEndpoint which performs TLSA lookup and verification of a&#13;
        server certificate.&#13;
&#13;
    4.  A command line tool for debugging TLSA records and for verifying a&#13;
        certificate file against a domain name.&#13;
&#13;
    5.  A TLSA Record class for encoding and decoding TLSA bytes.&#13;
&#13;
    6.  A TLSA lookup method which accepts port, protocol and hostname and constructs&#13;
        a suitable TLSA domain name.&#13;
&#13;
In the talk I will quickly outline these goals, report on my progress so far,&#13;
and show running code examples to demonstrate the new APIs.&#13;
&#13;
## Future Developments (5)&#13;
&#13;
The aim of my project is to lay foundations that will eventually allow&#13;
end-to-end DNSSEC verification in all the core Twisted networking components,&#13;
including Twisted Conch (SSH), Mail (SMTP, POP3), Perspective Broker (RPC), Web&#13;
(HTTP, XML-RPC, SOAP), Words (XMPP, IRC).&#13;
&#13;
Additionally I hope that this foundation work will encourage the development of&#13;
end-to-end DNSSEC verification in many of the Open Source and commercial&#13;
projects built on top of Twisted.&#13;
&#13;
I will end the talk by outlining these exciting possibilities, and demonstrate&#13;
some code examples that illustrate these possibilities.&#13;
&#13;
## Q &amp; A (5-10)&#13;
&#13;
I'm determined to leave at least five minutes at the end for audience&#13;
questions. At PyconUK 2013 I was frustrated because I ran out of time and ended&#13;
up answering questions outside the lecture theatre; questions which would have&#13;
been interesting to the whole audience.&#13;
</description><speakers><speaker id="294"><name>Richard Wall</name><profile>https://ep2014.europython.eu/en/accounts/profile/294/</profile><description>RIchard Wall is a freelance Python programmer with an interest in network programming and DNS in particular. Richard has been a Twisted enthusiast since 2005 and attributes most of what he knows to lurking in #twisted on Freenode and to aping his Twisted heroes (glyph, exarkun, itamar, radix, dash etc). He gave his first Twisted talk  "An Introduction To Twisted"  at the first PyconUK in 2007. He also gave a talk about Twisted Names at PyconUK 2013 and Richard looks forward to the opportunity to talk about his favourite subject at EuroPython 2014.</description><image></image></speaker></speakers></entry><entry id="54"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1130</start><duration>30</duration><room id="3">B07/B08</room><title>Ganga: an interface to the LHC computing grid</title><abstract>Ganga is a tool, designed and used by the large particle physics experiments at CERN. Written in pure Python, it delivers a clean, usable interface to allow thousands of physicists to interact with the huge computing resources available to them.</abstract><description>[Ganga](https://cern.ch/ganga) is a tool, designed and used by the large particle physics experiments at CERN. Written in pure Python, it delivers a clean, usable interface to allow thousands of physicists to interact with the huge computing resources available to them. It provides a single platform with which data analysis tasks can be run on anything from a local machine to being distributed seamlessly to computing centres around the world.&#13;
&#13;
The talk will cover the problems faced by physicists when dealing with the computer infrastructure and how Ganga helps to solve this problem. It will focus on how Python has helped create such a tool through its advanced features such as metaclasses and integration into IPython.</description><speakers><speaker id="693"><name>Matt Williams</name><profile>https://ep2014.europython.eu/en/accounts/profile/693/</profile><description>Matt Williams studied for his degree in Physics at the University of Warwick and later his PhD in Particle Physics in association with CERN and LHCb. It is through this study and more recently his employment at the University of Birmingham that he began work on Ganga.&#13;
&#13;
He's been an active participant in open source projects for over 10 years, starting in KDE and more recently creating the Sphinx extension doxylink and working on the voxel library PolyVox at http://volumesoffun.com.</description><image>https://ep2014.europython.eu/site_media/avatars/matt_photo_portrait.jpg</image></speaker></speakers></entry><entry id="104"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1130</start><duration>30</duration><room id="1">C01</room><title>Advanced Database Programming with Python</title><abstract>The Python DB-API 2.0 provides a direct interface to&#13;
many popular database backends. It makes interaction with&#13;
relational database very straight forward and allows tapping&#13;
into the full set of features these databases provide.&#13;
&#13;
The talk will cover advanced database topics which are&#13;
relevant in production environments such as locks, distributed&#13;
transactions and transaction isolation.</abstract><description>The Python DB-API 2.0 provides a direct interface to&#13;
many popular database backends. It makes interaction with&#13;
relational database very straight forward and allows tapping&#13;
into the full set of features these databases provide.&#13;
&#13;
The talk will cover advanced database topics which are&#13;
relevant in production environments such as locks, distributed&#13;
transactions and transaction isolation.&#13;
&#13;
----&#13;
&#13;
The talk will give an in-depth discussion of advanced database&#13;
programming topics based on the Python DB-API 2.0: locks and&#13;
dead-locks, two-phase commits, transaction isolation, result&#13;
set scrolling, schema introspection and handling&#13;
multiple result sets.&#13;
&#13;
Talks slides are available on request.</description><speakers><speaker id="135"><name>Marc-Andr&#233; Lemburg</name><profile>https://ep2014.europython.eu/en/accounts/profile/135/</profile><description>Marc-Andre is the CEO and founder of eGenix.com, a Python-focused project and consulting company based in Germany. He has a degree in mathematics from the University of D&#252;sseldorf. His work with and for Python started in Winter 1993. In 1997, he became a Python Core Developer. He designed and implemented the Unicode support in Python.&#13;
&#13;
Marc-Andre is a founding member of the Python Software Foundation (PSF) and has served on the PSF Board several times. He is also board member of the EuroPython Society (EPS) which organizes the EuroPython conference series and the author of the well-known mx Extensions, e.g. mxTextTools, mxDateTime and mxODBC, which are now distributed and maintained through eGenix.com.&#13;
&#13;
Today Marc-Andre spends most of his time managing large-scale customer projects heavily relying on Python and databases.</description><image>https://ep2014.europython.eu/site_media/avatars/mal-business-2-446x446.png</image></speaker></speakers></entry><entry id="9"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1130</start><duration>30</duration><room id="2">B05/B06</room><title>Fun with cPython memory allocator</title><abstract>Working with Python does not usually involve debugging memory problems: the interpreter takes care of allocating and releasing system memory and you get to enjoy working on real world issues. But what if you encounter such problems? What if your program never releases memory? How do you debug it?&#13;
&#13;
This talk describes some of the lesser known properties of cPython memory allocator and some ways to debug memory-related problems, all this based on real events.</abstract><description>Working with Python does not usually involve debugging memory problems: the interpreter takes care of allocating and releasing system memory and you get to enjoy working on real problems. But what if you encounter such problems? What if your program never releases memory? How do you debug it?&#13;
&#13;
I will tell a story of one programmer discovering such problems. The talk will take listeners on a journey of issues they can encounter, tools they can use to debug the problems and possible solutions to seek out. There will also be a brief mention of general memory management principles.&#13;
&#13;
cPython uses a combination of its own allocator, `malloc`, and `mmap` pools to manage memory of Python programs. It usually is smart enough, but there are some darker corners that are not well known by an average Joe Programmer (read: me). &#13;
&#13;
There are tools that can help debug memory problems, but those are also relatively unknown, and tend to have documentation that one might find lacking. I will describe one such tool, called `guppy`, which I have found particulary helpful.</description><speakers><speaker id="471"><name>Tomasz Paczkowski</name><profile>https://ep2014.europython.eu/en/accounts/profile/471/</profile><description>Tomasz is software developer from Krak&#243;w, Poland. Currently he prefers working with Python and Django, but he also dabbled with Ruby, PHP and JavaScript. &#13;
&#13;
Avid conference goer. Co-organizer of DjangoCon Europe 2013. Local community wrangler, helping with Pykonik: Python users group from Krak&#243;w.</description><image>https://ep2014.europython.eu/site_media/avatars/avatar-big.jpg</image></speaker></speakers></entry><entry id="62"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1130</start><duration>30</duration><room id="5">A08</room><title>Extending Scikit-Learn with your own Regressor</title><abstract>We show how to write your own robust linear estimator within the Scikit-Learn framework using as an example the Theil-Sen estimator known as "the most popular nonparametric technique for estimating a linear trend".</abstract><description>Scikit-Learn (http://scikit-learn.org/) is a well-known and popular framework for machine learning that is used by Data Scientists all over the world. We show in a practical way how you can add your own estimator following the interfaces of Scikit-Learn. First we give a small introduction to the design of Scikit-Learn and its inner workings. Then we show how easily Scikit-Learn can be extended by creating an own estimator. In order to demonstrate this, we extend Scikit-Learn by the popular and robust Theil-Sen Estimator (http://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator) that is currently not in Scikit-Learn. We also motivate this estimator by outlining some of its superior properties compared to the ordinary least squares method (LinearRegression in Scikit-Learn).</description><speakers><speaker id="375"><name>Florian Wilhelm</name><profile>https://ep2014.europython.eu/en/accounts/profile/375/</profile><description>Data Scientist with a mathematical background. PhD from the Karlsruher Institute of Technology in Applied Mathematics. &#13;
Focus on mathematical modelling and machine learning as well as business analytics. Years of experience in several customer projects at Blue Yonder.</description><image>https://ep2014.europython.eu/site_media/avatars/Foto_400dpi.jpg</image></speaker></speakers></entry><entry id="63"><category>Talk</category><audience>Novice</audience><topics><topic>Web</topic></topics><start>1130</start><duration>30</duration><room id="4">B09</room><title>Building Realtime Web Applications with WebRTC and Python</title><abstract>WebRTC makes building peer to peer real time web applications easier. First, we'll discuss in short what WebRTC is, how it works. Then we will explore ways to build the signalling system of a WebRTC app using Python.     </abstract><description>Introduction&#13;
===========&#13;
This talk will first introduce the audience to WebRTC and then discuss about how to implement the server side logic of a WebRTC app using Python. &#13;
&#13;
WebRTC is a free, open project that enables web browsers with plugin-less Real-Time Communications (RTC) capabilities via simple JavaScript APIs. What makes WebRTC special is that the data travels from one client to another without going through the server. &#13;
&#13;
The main functions of WebRTC can be broadly categorized into three types. &#13;
&#13;
- Access and acquire video and audio streams&#13;
- Establish a connection between peers and stream audio/video.&#13;
- Communicate arbitrary data.&#13;
&#13;
WebRTC uses three different JavaScript APIs to perform these three functions. These APIs are:&#13;
&#13;
- MediaStream (aka getUserMedia)&#13;
- RTCPeerConnection&#13;
- RTCDataChannel&#13;
&#13;
MediaStream API performs the task of accessing the webcam and/or microphone of the device and acquire the video and/or audio stream from them. RTCPeerConnection API establishes connection between peers and streams audio and video data. This API also does all the encoding and decoding of audio/video data. The third API, RTCDataChannel helps to communicate arbitrary data from one client to the other.&#13;
&#13;
There will be short demos to demonstrate the functionalities of these APIs.&#13;
&#13;
Signaling and Session Control&#13;
========================&#13;
&#13;
WebRTC uses RTCPeerConnection to communicate streaming data between browsers, but some sort of mechanism is needed to coordinate this communication and to send control messages. This process is known as signaling.&#13;
&#13;
Signaling is used to exchange three types of information.&#13;
&#13;
- Session control messages: to initialize or close communication and report errors.&#13;
- Network configuration: to the outside world, what's my computer's IP address and port?&#13;
- Media capabilities: what codecs and resolutions can be handled by my browser and the browser it wants to communicate with?&#13;
&#13;
This can be implemented using any appropriate two way communication channel.&#13;
&#13;
Implementing signaling in Python&#13;
==========================&#13;
&#13;
Next, we will have a look at how to implement this signaling mechanism in Python. ( Demonstration with annotated code and live application.)&#13;
&#13;
### Google AppEngine and the Channel API ###&#13;
Google AppEngine has a channel API which offers persistent connections between your application and Google servers, allowing your application to send messages to JavaScript clients in real time without the use of polling. We'll use this Channel API to build the signaling system of our WebRTC app on top of webapp2 and flask framework. &#13;
&#13;
### Flask and gevent ###&#13;
We'll implement the same signaling system again, this time on top of Flask using gevent for the persistent connection between the browser and our application. &#13;
&#13;
Outline of the talk&#13;
===============&#13;
### Intro (5 min) ###&#13;
- Who are we?&#13;
- What is WebRTC?&#13;
- Functions of WebRTC.&#13;
&#13;
### WebRTC APIs and Demos (3 min) ###&#13;
- MediaStream (getUserMedia) API&#13;
- RTCPeerConnection API&#13;
- RTCDataChannel API&#13;
&#13;
### Signaling in WebRTC Applications (3 min) ###&#13;
- What is signaling?&#13;
- Why is it needed?&#13;
- How to implement it?&#13;
&#13;
### Implementation of signaling (16 min) ###&#13;
- Implementation using Google AppEngine and Channel API&#13;
- Implementation using Flask and gevent&#13;
&#13;
### Questions (3 min) ###&#13;
</description><speakers><speaker id="31"><name>Tarashish Mishra</name><profile>https://ep2014.europython.eu/en/accounts/profile/31/</profile><description>Tarashish Mishra is a web developer in making based in Bhubaneswar, India. He is studying computer science as an undergraduate student. He loves making web application and scraping web pages with Python. He tinkers with arduino and helps people learn to code in free time. </description><image>https://ep2014.europython.eu/site_media/avatars/pic.jpg</image></speaker><speaker id="400"><name>Rishabh Raj</name><profile>https://ep2014.europython.eu/en/accounts/profile/400/</profile><description></description><image>https://ep2014.europython.eu/site_media/avatars/propic.jpg</image></speaker></speakers></entry><entry id="65"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1200</start><duration>30</duration><room id="3">B07/B08</room><title>Concurrent programming with Python and my little experiment</title><abstract>Concurrent programming in Python may be hard. A lot of solutions exists&#13;
though. Most of them are based on an eventloop. This talk will present&#13;
what I discovered and tested along the time and my little&#13;
[experiment](http://github.com/benoitc/offset) in porting the Go&#13;
concurrency model in Python.&#13;
</abstract><description>Concurrent programming in Python may be hard. A lot of solutions exists&#13;
though. Most of them are based on an eventloop. This talk will present&#13;
what I discovered and tested along the time with code examples, from&#13;
asyncore to asyncio, passing by gevent, eventlet, twisted and some new&#13;
alternatives like evergreen or gruvi. It will also present my little&#13;
experiment in porting the Go concurrency model in Python named [offset](http://github.com/benoitc/offset),&#13;
how it progressed in 1 year and how it became a fully usable library .&#13;
&#13;
This presentation will be an update of the presentation I gave at the FOSDEM 2014. It will introduce to the concurrency concepts and how they are implemented in the different libraries. &#13;
</description><speakers><speaker id="755"><name>Benoit Chesneau</name><profile>https://ep2014.europython.eu/en/accounts/profile/755/</profile><description>Beno&#238;t Chesneau is a French web craftsman, living near Paris. He has years of experience in building small and big-scale database backend website. He founded Enki Multimedia a company building innovative web services and open-source applications. Beno&#238;t Chesneau is a PSF member, Apache CouchDB committer and Gunicorn author.</description><image>https://ep2014.europython.eu/site_media/avatars/13_-_1.jpg</image></speaker></speakers></entry><entry id="105"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1200</start><duration>30</duration><room id="1">C01</room><title>Data Matching and Big Data Deduping in Python</title><abstract>Till now, using real-world-data is difficult. Apart from encoding and missing value, multiple records which mean the same thing is one of the biggest headaches. This talk will demonstrate two tools &#8220;Dedupe\*&#8221; and &#8220;Dedoop\**&#8221; to handle task of Data Matching and Deduplication in Python  at the scale of millions and billions of records respectively.</abstract><description>One of the widely postulated theory is &#8220;Most of the time spent working with real world data is not spent on the analysis, but in preparing the data&#8221;, I believe any Data guy would agree. There are numerous problems, which crop up while cleansing any dataset, and the prominent and recurring problem is duplicates (It is duplicate, so it has to be recurring). The problem of matching data and information from multiple databases or sources is also a prominent problem encountered in large decision support applications in large commercial and government organizations. This problems has many many different names deduplication, record linkage, entity resolution, coreference, reference reconciliation, record alignment.&#13;
&#13;
Accurate, Scalable and Fast entity resolution has huge practical implications in a wide variety of commercial, scientific and civic domains. Despite the long history of work on Data Matching, there is still a surprising diversity of approaches, and lack of guiding theory. Meanwhile, in the age of big data, the need for high quality entity resolution is growing, as we are inundated with more and more data, all of which needs to be integrated, aligned and matched, before further utility can be extracted.&#13;
&#13;
This talk will present the key ideas implemented behind &#8220;Dedupe&#8221; an open source python library that quickly deduplicates and matches records at the scale of millions of records on the laptop. The aim is to show how &#8220;Dedupe&#8221; achieves speed by &#8220;Blocking&#8221; records, to save from O(n2) comparisons, achieves accuracy, by using better string comparators and clustering algorithms suited for this problem etc. The attendees would also gain understanding of the tradeoffs between the speed and accuracy.&#13;
&#13;
But what about a billion records ? In such a scenario, it is imminent to parallelise the whole process, to achieve greater speed. So, enter MapReduce based Entity Resolution. Attendees would also walk away with the understanding of how the Deduplication procedure may be parallelised by distributing the task independently to the map and reduce stages. There would also be a demo of the same using &#8220;Dedoop&#8221; an open source Efficient Deduplication tool for Hadoop on Amazon EC2 Machines  &#13;
&#13;
&#13;
The Presentation is multifaceted, its outline/timeline would be:&#13;
&#13;
*  Introduction&#13;
*  Current Real World Data Problems&#13;
*  Why the Problem is hard ?&#13;
&#13;
(5 mins)&#13;
&#13;
*  Current Industry Workflow&#13;
*  What is Deduplication and Data Matching ?&#13;
*  &#8220;Dedupe&#8221; - Scalable Library for Data Matching in Python&#13;
&#13;
(10 mins)&#13;
&#13;
*  Scale Data Matching on your Laptop - DEMO&#13;
&#13;
(5 mins)&#13;
&#13;
*  What about Billions of Records ?&#13;
*  MapReduce based Entity Resolution&#13;
*  &#8220;Dedoop&#8221; - Efficient Deduplication with Hadoop&#13;
&#13;
(8 mins)&#13;
&#13;
*  Demo of Deduplication of on a products dataset on Amazon EC2 Machine using dedoop&#13;
&#13;
(10 mins)&#13;
&#13;
*  The Road Ahead&#13;
*  Any questions ?&#13;
&#13;
(5 mins)&#13;
&#13;
&#13;
Key Takeaway from the Demos would be:&#13;
&#13;
* The kind of input files, that are most easily deduplicated.&#13;
* Is preprocessing really needed ?&#13;
* Explain the output, to show how the deduplication and data matching fits into the overall Data Cleansing pipeline.&#13;
* How smart comparions are done, by comparing only those records which are similar enough (Blocking).&#13;
* How the specification in Dedoop is tranformed to an executable MapReduce workflow and submitted for execution on Hadoop Cluster.&#13;
* How to configure aribitary MapReduce workflows.&#13;
* Discuss, whether GUI of dedoop necessary ?&#13;
* Optimisation strategies to utilise all the nodes of the cluster.&#13;
* Explain why reduandany=free pair-comparisons and Load Balacning are necessary in a Map-Reduce setting.&#13;
&#13;
&#13;
\* Dedupe -https://github.com/datamade/dedupe - As a, contributor of dedupe,  my contribution involved Data Matching and Record Linkage components to the library.&#13;
&#13;
** Dedoop - http://dbs.uni-leipzig.de/dedoop - Dedoop is still an ongoing research project and is not licensed under MIT or any other Open source License. I am not involved in any way in the development of this project.</description><speakers><speaker id="207"><name>Nikit Saraf</name><profile>https://ep2014.europython.eu/en/accounts/profile/207/</profile><description>I am Computer Science Undergraduate and Machine Learning enthusiast. I just love lots and lots of data. I have worked and contributed to the open source project dedupe https://github.com/open-city/dedupe when I was selected for Google Summer of Code 2013. I worked for "Code for America" organization. The project involved developing data matching tools in python using machine learning algorithms. I have also published a paper in LNCS in the field of Natural Language Processing (again data). I have also attended PyData London this year. Since last year I have regularly been organizing local Scientific Python Meetup on weekends in my college. We hack on projects and work with libraries not limited to scikit-learn, pandas, nltk, scipy. I am very enthusiastic about Python in education.</description><image>https://ep2014.europython.eu/site_media/avatars/Screen_Shot_2014-03-06_at_5.39.03_am.png</image></speaker></speakers></entry><entry id="108"><category>Talk</category><audience>Advanced</audience><topics><topic>Science</topic></topics><start>1200</start><duration>30</duration><room id="5">A08</room><title>Bubbles &#8211; Data Processing with Dynamic Dispatch</title><abstract>Bubbles is a framework for data processing &#8211; letting them live in their most native environment. The developers of data processing pipelines can focus on their data task and they should not care too much about the underlying data implementation.&#13;
&#13;
The Bubbles is based on metadata and relies on dynamic dispatch to perform the most appropriate operation as possible. </abstract><description>The talk will be about principal parts of Bubbles: data objects, operations and the dynamic dispatch.&#13;
&#13;
The data objects have their physical representation, such as a SQL table, a CSV file or a remote API data source. The operations perform transformations or computations on top of those objects. The concrete operation used is decided during runtime based on the representation of data objects. The dispatch decides which concrete implementation of an operation is used: compose a SQL query, use a python iterator or issue a special API call. Moreover, the result of an operation is computed as necessary. Data are not pulled into the script when not necessary. &#13;
&#13;
Bubbles is performance agnostic at the low level of physical data implementation. Performance is assured by the data technology and appropriate use of operations.&#13;
&#13;
Bubbles is and will be Python 3 only.&#13;
&#13;
* [Project Home](http://www.slideshare.net/Stiivi/data-brewery-2-data-objects)&#13;
* [Introduction](http://www.slideshare.net/Stiivi/data-brewery-2-data-objects) &#8211; slides</description><speakers><speaker id="39"><name>Stefan Urbanek</name><profile>https://ep2014.europython.eu/en/accounts/profile/39/</profile><description>Data warehouse architect. Brewing data at the Data Brewery.</description><image></image></speaker></speakers></entry><entry id="107"><category>Talk</category><audience>Advanced</audience><topics><topic>Other</topic></topics><start>1200</start><duration>30</duration><room id="4">B09</room><title>Using asyncio (aka Tulip) for home automation</title><abstract>Python has a variety of options for creating concurrent applications. This talk will explore the usage of asyncio for this purpose while looking at a number of devices that can be used in home automation for monitoring your electricity usage, room temperatures and controlling remote devices.</abstract><description>This talk will cover the new asyncio library in Python 3.4 (also known as Tulip) and will use the area of home automation as a case study to explore its features. This talk will be based on code using Python 3.3+.&#13;
&#13;
Home automation is a growing area and the number of devices and potential applications is huge. From monitoring electricity usage to the temperature inside or outside your house to remote control of lights and other appliances the options are almost endless. However, managing and monitoring these devices is typically a problem that works best with event driven applications.&#13;
&#13;
This is where asnycio comes in, it was originally proposed in PEP 3156 by our BDFL, Guido van Rossum. Asyncio aims to bring a clear approach to the python ecosystem and borrows from a number of existing solutions to come up with something clean and modern for the Python stdlib.&#13;
&#13;
This talk will introduce asyncio and use it within the context of home automation and dealing with multiple event driven devices. Therefore we will cover asyncio and the lessions learned from using different devices in this context.&#13;
&#13;
Some of the devices that will be used include:&#13;
&#13;
 - Raspberry Pi&#13;
 - RFXCom's RFXtrx, USB serial tranciever.&#13;
 - Owl CM160 electricity tracker.&#13;
 - Oregon scientific thermometers.&#13;
 - Foscam IP cameras.&#13;
&#13;
This talk will also briefly cover the previous solution I used which was developed with Twisted and compare it briefly with my new code using asyncio.</description><speakers><speaker id="131"><name>Dougal Matthews</name><profile>https://ep2014.europython.eu/en/accounts/profile/131/</profile><description>Dougal Matthews is a Scottish Pythonista and skiier living in Glasgow. He runs the local Python user group. During the day, Dougal hacks on OpenStack as a senior developer at Red Hat.</description><image>https://ep2014.europython.eu/site_media/avatars/P1050828-400px.JPG</image></speaker></speakers></entry><entry id="50"><category>Talk</category><audience>Advanced</audience><topics><topic>Python Core</topic></topics><start>1200</start><duration>30</duration><room id="2">B05/B06</room><title>Post-Mortem Debugging with Heap-Dumps</title><abstract>UNIX core-dumps, Windows minidumps or Java heap-dumps are well established technologies for post-mortem defect analysis.&#13;
I'll present a similar technology for Python. An improved pickling mechanism makes it possible to serialise the state of a Python &#13;
program for subsequent analysis with a conventional Python-debugger.</abstract><description>Post-Mortem Debugging with Heap-Dumps&#13;
=====================================&#13;
&#13;
UNIX core-dumps, Windows minidumps and analogous solutions of other operating systems are well established technologies for &#13;
post-mortem defect analysis of native-code processes. In principle those dumps can be used to analyse &#8222;interpreted&#8220; &#13;
programs running within a native-code interpreter-process. However in practise this approach is tedious and not always successful \[1\].&#13;
Therefore operating system independent dump methods were developed for some &#8222;interpreted&#8220; languages \[2\]. &#13;
A prominent example are Java heap dumps \[3\]. &#13;
&#13;
Unfortunately up to now there was no practically usable dump-method for Python. Various attempts were made &#13;
to utilise OS-level dump methods \[4, 5\]. In 2012 Eli Finer published the Python module *pydump* \[6\].&#13;
This module pickles the traceback of an exception and subsequently uses the pdb debugger to analyse the unpickled traceback.&#13;
Unfortunately *pydump* fails on PicklingErrors.&#13;
&#13;
In my talk I'll present the Python package [*pyheapdump*](https://pypi.python.org/pypi/pyheapdump). It has the same operation principle as Eli's *pydump*, but &#13;
is an independent implementation. *pyheapdump* uses an extended pickler &#13;
([sPickle](https://pypi.python.org/pypi/sPickle)) to serialise all relevant objects &#13;
of a Python process to a file. Later on a fault tolerant unpickler recreates the objects and a common Python&#13;
debugger can be used to analyse the dump. The pickler extensions make it possible to:&#13;
&#13;
 * pickle and unpickle many commonly not pickleable objects [7].&#13;
 * replace the remaining not pickleable objects by surrogate objects so that the resulting object graph is&#13;
   almost isomorphic to the original object graph.&#13;
   &#13;
Which objects are relevant? In its default operation mode *pyheapdump* &#13;
uses the frame-stacks of all threads as start point for pickling. Following the &#13;
usual rules for pickling the dump includes all local variables and all objects &#13;
reachable from a local variable and so on. That is usually enough for a successful defect analysis.&#13;
&#13;
Compared with other Python post-mortem debugging methods *pyheapdump* has several advantages:&#13;
&#13;
 * It is a pure Python solution and independent from the operation system.&#13;
 * Creation of the pyheapdump and fault analysis can be performed different computers.&#13;
 * It is not obstructive. It does not modify / monkey-patch or disturb the dumped &#13;
   process in any way, with the exception of loading additional modules.&#13;
 * If used with the Pydev-debugger, it supports multi-threaded applications.&#13;
 * If used with the Pydev-debugger and Stackless Python, it supports tasklets. &#13;
&#13;
The implementation of *pyheapdump* is fairly small, because it draws most of its functionality &#13;
from the underlying sPickle package and from the new Stackless-Support \[8\] of the&#13;
Pydev-Debugger. Therefore it is - despite of its short history - already a useful piece of software.&#13;
&#13;
Outline of the talk&#13;
-------------------&#13;
&#13;
1.	Introduction to the problem&#13;
2.	Previous works&#13;
3.	The concept of *pyheapdump*&#13;
4.	Live demonstration&#13;
5.	Open problems and further development&#13;
6.	Questions and Answers&#13;
&#13;
References&#13;
----------&#13;
&#13;
1. Andraz Tori, Python, 2011-01-16: *gdb and a very large core dump*, blog at &lt;http://www.zemanta.com/blog/python-gdb-large-core-dump/&gt;&#13;
2. David Pacheco, ACM Queue - Programming Languages Volume 9 Issue 10, October 2011: &#13;
   *Postmortem Debugging in Dynamic Environments*, &#13;
   PDF &lt;http://dl.acm.org/ft_gateway.cfm?id=2039361&amp;ftid=1050739&amp;dwn=1&amp;CFID=290171300&amp;CFTOKEN=95099236&gt;&#13;
3. Chris Bailey, Andrew Johnson, Kevin Grigorenko, IBM developerWorks, 2011-03-15: &#13;
   *Debugging from dumps - Diagnose more than memory leaks with Memory Analyzer*, &#13;
   PDF &lt;http://www.ibm.com/developerworks/library/j-memoryanalyzer/j-memoryanalyzer-pdf.pdf&gt;&#13;
4. Brian Curtin, 2011-09-29: *minidumper - Python crash dumps on Windows*, &#13;
   blog at &lt;http://blog.briancurtin.com/posts/20110929minidumper-python-crash-dumps-on-windows.html&gt;&#13;
5. David Malcolm, Fedora Feature, 2010-04-06: *Easier Python Debugging* &#13;
   at &lt;http://fedoraproject.org/wiki/Features/EasierPythonDebugging&gt;&#13;
6. Eli Finer, Github-Project, 2012: *pydump* at &lt;https://github.com/gooli/pydump&gt;&#13;
7. Anselm Kruis, EuroPython 2011: *Advanced Pickling with Stackless Python and sPickle*,&#13;
   archived talk at &lt;https://ep2013.europython.eu/conference/talks/advanced-pickling-with-stackless-python-and-spickle&gt;&#13;
8. Fabio Zadrozny, 2013-12-12: *PyDev 3.1.0 released*, &#13;
   blog at &lt;http://pydev.blogspot.de/2013/12/pydev-310-released.html&gt;&#13;
&#13;
</description><speakers><speaker id="252"><name>Anselm Kruis</name><profile>https://ep2014.europython.eu/en/accounts/profile/252/</profile><description>Anselm Kruis works as a Senior Solution Architect for science + computing ag, a Bull subsidiary. He started software development 25 years ago and enjoys the simplicity of Python since over 10 years, mostly using Jython and nowadays Stackless Python. If allowed by professional constraints, he is happy to utilise and contribute to open software projects.</description><image>https://ep2014.europython.eu/site_media/avatars/kruis-gr.jpg</image></speaker></speakers></entry><entry id="10"><category></category><audience></audience><topics></topics><start>1230</start><duration>90</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Lunch</title><description></description><speakers></speakers></entry><entry id="27"><category></category><audience></audience><topics></topics><start>1400</start><duration>30</duration><room id="1">C01</room><title>Sprint Orientation</title><description></description><speakers></speakers></entry><entry id="28"><category></category><audience></audience><topics></topics><start>1430</start><duration>60</duration><room id="1">C01</room><title>Lightning Talks</title><description></description><speakers></speakers></entry><entry id="17"><category></category><audience></audience><topics></topics><start>1530</start><duration>30</duration><room>C01, B05/B06, B07/B08, B09, A08</room><title>Coffee Break</title><description></description><speakers></speakers></entry><entry id="29"><category></category><audience></audience><topics></topics><start>1600</start><duration>30</duration><room id="1">C01</room><title>Conference Closing</title><description></description><speakers></speakers></entry><entry id="30"><category></category><audience></audience><topics></topics><start>1630</start><duration>30</duration><room id="5">A08</room><title>PySV AGM</title><description>Annual General Meeting of the Python Software Verband e.V.</description><speakers></speakers></entry></day><day date="2014-07-26"><entry id="18"><category></category><audience></audience><topics></topics><start>0900</start><duration>90</duration><room id="5">A08</room><title>BarCamp</title><description></description><speakers></speakers></entry><entry id="20"><category></category><audience></audience><topics></topics><start>0900</start><duration>90</duration><room>A03/A04, A05/A06</room><title>Sprints</title><description></description><speakers></speakers></entry><entry id="38"><category></category><audience></audience><topics></topics><start>0900</start><duration>510</duration><room>B05/B06, B07/B08, B09</room><title>Satellite Event: PyData</title><description>PyData 2014 Berlin is a satellite event along the EuroPython 2014. Although PyData shares the same venue, EuroPython 2014 tickets do not include access to PyData.&#13;
&#13;
[PyData Schedule](http://pydata.org/berlin2014/schedule/)</description><speakers></speakers></entry><entry id="52"><category></category><audience></audience><topics></topics><start>1030</start><duration>30</duration><room>A08, A03/A04, A05/A06</room><title>Breakfast</title><description></description><speakers></speakers></entry><entry id="21"><category></category><audience></audience><topics></topics><start>1100</start><duration>90</duration><room>A03/A04, A05/A06</room><title>Sprints</title><description></description><speakers></speakers></entry><entry id="19"><category></category><audience></audience><topics></topics><start>1100</start><duration>90</duration><room id="5">A08</room><title>BarCamp</title><description></description><speakers></speakers></entry><entry id="54"><category></category><audience></audience><topics></topics><start>1230</start><duration>90</duration><room>A08, A03/A04, A05/A06</room><title>Lunch</title><description></description><speakers></speakers></entry><entry id="46"><category></category><audience></audience><topics></topics><start>1400</start><duration>90</duration><room id="5">A08</room><title>BarCamp</title><description></description><speakers></speakers></entry><entry id="22"><category></category><audience></audience><topics></topics><start>1400</start><duration>90</duration><room>A03/A04, A05/A06</room><title>Sprints</title><description></description><speakers></speakers></entry><entry id="56"><category></category><audience></audience><topics></topics><start>1530</start><duration>30</duration><room>A08, A03/A04, A05/A06</room><title>Coffee Break</title><description></description><speakers></speakers></entry><entry id="47"><category></category><audience></audience><topics></topics><start>1600</start><duration>90</duration><room id="5">A08</room><title>BarCamp</title><description></description><speakers></speakers></entry><entry id="23"><category></category><audience></audience><topics></topics><start>1600</start><duration>90</duration><room>A03/A04, A05/A06</room><title>Sprints</title><description></description><speakers></speakers></entry></day><day date="2014-07-27"><entry id="48"><category></category><audience></audience><topics></topics><start>0900</start><duration>90</duration><room id="5">A08</room><title>BarCamp</title><description></description><speakers></speakers></entry><entry id="58"><category></category><audience></audience><topics></topics><start>0900</start><duration>90</duration><room>A03/A04, A05/A06</room><title>Sprints</title><description></description><speakers></speakers></entry><entry id="42"><category></category><audience></audience><topics></topics><start>0900</start><duration>510</duration><room>B05/B06, B07/B08, B09</room><title>Satellite Event: PyData</title><description>PyData 2014 Berlin is a satellite event along the EuroPython 2014. Although PyData shares the same venue, EuroPython 2014 tickets do not include access to PyData.&#13;
&#13;
[PyData Schedule](http://pydata.org/berlin2014/schedule/)</description><speakers></speakers></entry><entry id="53"><category></category><audience></audience><topics></topics><start>1030</start><duration>30</duration><room>A08, A03/A04, A05/A06</room><title>Breakfast</title><description></description><speakers></speakers></entry><entry id="59"><category></category><audience></audience><topics></topics><start>1100</start><duration>90</duration><room>A03/A04, A05/A06</room><title>Sprints</title><description></description><speakers></speakers></entry><entry id="49"><category></category><audience></audience><topics></topics><start>1100</start><duration>90</duration><room id="5">A08</room><title>BarCamp</title><description></description><speakers></speakers></entry><entry id="55"><category></category><audience></audience><topics></topics><start>1230</start><duration>90</duration><room>A08, A03/A04, A05/A06</room><title>Lunch</title><description></description><speakers></speakers></entry><entry id="60"><category></category><audience></audience><topics></topics><start>1400</start><duration>90</duration><room>A03/A04, A05/A06</room><title>Sprints</title><description></description><speakers></speakers></entry><entry id="50"><category></category><audience></audience><topics></topics><start>1400</start><duration>90</duration><room id="5">A08</room><title>BarCamp</title><description></description><speakers></speakers></entry><entry id="57"><category></category><audience></audience><topics></topics><start>1530</start><duration>30</duration><room>A08, A03/A04, A05/A06</room><title>Coffee Break</title><description></description><speakers></speakers></entry><entry id="51"><category></category><audience></audience><topics></topics><start>1600</start><duration>90</duration><room id="5">A08</room><title>BarCamp</title><description></description><speakers></speakers></entry><entry id="61"><category></category><audience></audience><topics></topics><start>1600</start><duration>90</duration><room>A03/A04, A05/A06</room><title>Sprints</title><description></description><speakers></speakers></entry></day></schedule>